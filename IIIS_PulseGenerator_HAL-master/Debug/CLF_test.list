
CLF_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007794  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c0  08007968  08007968  00017968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008228  08008228  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008230  08008230  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008230  08008230  00018230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008234  08008234  00018234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000084  080082bc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  080082bc  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013161  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002639  00000000  00000000  00033215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00035850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00036930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242c4  00000000  00000000  00037928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d11  00000000  00000000  0005bbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0a94  00000000  00000000  000718fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152391  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e0  00000000  00000000  001523e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800794c 	.word	0x0800794c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	0800794c 	.word	0x0800794c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 fd71 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f004 feee 	bl	8005d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fd89 	bl	8001af6 <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ffc:	f000 fd51 	bl	8001aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000001c 	.word	0x2000001c
 8001018:	20000004 	.word	0x20000004
 800101c:	20000000 	.word	0x20000000

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000004 	.word	0x20000004
 8001044:	200000a0 	.word	0x200000a0

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200000a0 	.word	0x200000a0

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000004 	.word	0x20000004

080010a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e033      	b.n	8001126 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f004 fe8a 	bl	8005de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d118      	bne.n	8001118 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ee:	f023 0302 	bic.w	r3, r3, #2
 80010f2:	f043 0202 	orr.w	r2, r3, #2
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 fa78 	bl	80015f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f023 0303 	bic.w	r3, r3, #3
 800110e:	f043 0201 	orr.w	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	641a      	str	r2, [r3, #64]	; 0x40
 8001116:	e001      	b.n	800111c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001146:	2b01      	cmp	r3, #1
 8001148:	d101      	bne.n	800114e <HAL_ADC_Start_DMA+0x1e>
 800114a:	2302      	movs	r3, #2
 800114c:	e0e9      	b.n	8001322 <HAL_ADC_Start_DMA+0x1f2>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b01      	cmp	r3, #1
 8001162:	d018      	beq.n	8001196 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0201 	orr.w	r2, r2, #1
 8001172:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001174:	4b6d      	ldr	r3, [pc, #436]	; (800132c <HAL_ADC_Start_DMA+0x1fc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a6d      	ldr	r2, [pc, #436]	; (8001330 <HAL_ADC_Start_DMA+0x200>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	0c9a      	lsrs	r2, r3, #18
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001188:	e002      	b.n	8001190 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	3b01      	subs	r3, #1
 800118e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f9      	bne.n	800118a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011a4:	d107      	bne.n	80011b6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	f040 80a1 	bne.w	8001308 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d007      	beq.n	80011f8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001204:	d106      	bne.n	8001214 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f023 0206 	bic.w	r2, r3, #6
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	645a      	str	r2, [r3, #68]	; 0x44
 8001212:	e002      	b.n	800121a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2200      	movs	r2, #0
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001222:	4b44      	ldr	r3, [pc, #272]	; (8001334 <HAL_ADC_Start_DMA+0x204>)
 8001224:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122a:	4a43      	ldr	r2, [pc, #268]	; (8001338 <HAL_ADC_Start_DMA+0x208>)
 800122c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001232:	4a42      	ldr	r2, [pc, #264]	; (800133c <HAL_ADC_Start_DMA+0x20c>)
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123a:	4a41      	ldr	r2, [pc, #260]	; (8001340 <HAL_ADC_Start_DMA+0x210>)
 800123c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001246:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001256:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001266:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	334c      	adds	r3, #76	; 0x4c
 8001272:	4619      	mov	r1, r3
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f000 fcf8 	bl	8001c6c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	2b00      	cmp	r3, #0
 8001286:	d12a      	bne.n	80012de <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a2d      	ldr	r2, [pc, #180]	; (8001344 <HAL_ADC_Start_DMA+0x214>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d015      	beq.n	80012be <HAL_ADC_Start_DMA+0x18e>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a2c      	ldr	r2, [pc, #176]	; (8001348 <HAL_ADC_Start_DMA+0x218>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d105      	bne.n	80012a8 <HAL_ADC_Start_DMA+0x178>
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <HAL_ADC_Start_DMA+0x204>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 031f 	and.w	r3, r3, #31
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00a      	beq.n	80012be <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a27      	ldr	r2, [pc, #156]	; (800134c <HAL_ADC_Start_DMA+0x21c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d136      	bne.n	8001320 <HAL_ADC_Start_DMA+0x1f0>
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_ADC_Start_DMA+0x204>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d130      	bne.n	8001320 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d129      	bne.n	8001320 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	e020      	b.n	8001320 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a18      	ldr	r2, [pc, #96]	; (8001344 <HAL_ADC_Start_DMA+0x214>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d11b      	bne.n	8001320 <HAL_ADC_Start_DMA+0x1f0>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d114      	bne.n	8001320 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	e00b      	b.n	8001320 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f043 0210 	orr.w	r2, r3, #16
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001318:	f043 0201 	orr.w	r2, r3, #1
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000001c 	.word	0x2000001c
 8001330:	431bde83 	.word	0x431bde83
 8001334:	40012300 	.word	0x40012300
 8001338:	080017e9 	.word	0x080017e9
 800133c:	080018a3 	.word	0x080018a3
 8001340:	080018bf 	.word	0x080018bf
 8001344:	40012000 	.word	0x40012000
 8001348:	40012100 	.word	0x40012100
 800134c:	40012200 	.word	0x40012200

08001350 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x1c>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e113      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x244>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b09      	cmp	r3, #9
 80013b6:	d925      	bls.n	8001404 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68d9      	ldr	r1, [r3, #12]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	3b1e      	subs	r3, #30
 80013ce:	2207      	movs	r2, #7
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43da      	mvns	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	400a      	ands	r2, r1
 80013dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68d9      	ldr	r1, [r3, #12]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	4603      	mov	r3, r0
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4403      	add	r3, r0
 80013f6:	3b1e      	subs	r3, #30
 80013f8:	409a      	lsls	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	e022      	b.n	800144a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6919      	ldr	r1, [r3, #16]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	2207      	movs	r2, #7
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	400a      	ands	r2, r1
 8001426:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	4603      	mov	r3, r0
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4403      	add	r3, r0
 8001440:	409a      	lsls	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b06      	cmp	r3, #6
 8001450:	d824      	bhi.n	800149c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	3b05      	subs	r3, #5
 8001464:	221f      	movs	r2, #31
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	400a      	ands	r2, r1
 8001472:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	3b05      	subs	r3, #5
 800148e:	fa00 f203 	lsl.w	r2, r0, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	635a      	str	r2, [r3, #52]	; 0x34
 800149a:	e04c      	b.n	8001536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b0c      	cmp	r3, #12
 80014a2:	d824      	bhi.n	80014ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3b23      	subs	r3, #35	; 0x23
 80014b6:	221f      	movs	r2, #31
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43da      	mvns	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	400a      	ands	r2, r1
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	3b23      	subs	r3, #35	; 0x23
 80014e0:	fa00 f203 	lsl.w	r2, r0, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
 80014ec:	e023      	b.n	8001536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	3b41      	subs	r3, #65	; 0x41
 8001500:	221f      	movs	r2, #31
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	400a      	ands	r2, r1
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	3b41      	subs	r3, #65	; 0x41
 800152a:	fa00 f203 	lsl.w	r2, r0, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <HAL_ADC_ConfigChannel+0x250>)
 8001538:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <HAL_ADC_ConfigChannel+0x254>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d10f      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1d8>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b12      	cmp	r3, #18
 800154a:	d10b      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_ADC_ConfigChannel+0x254>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d12b      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x23a>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <HAL_ADC_ConfigChannel+0x258>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d003      	beq.n	8001580 <HAL_ADC_ConfigChannel+0x1f4>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b11      	cmp	r3, #17
 800157e:	d122      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a11      	ldr	r2, [pc, #68]	; (80015e4 <HAL_ADC_ConfigChannel+0x258>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d111      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_ADC_ConfigChannel+0x25c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a11      	ldr	r2, [pc, #68]	; (80015ec <HAL_ADC_ConfigChannel+0x260>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	0c9a      	lsrs	r2, r3, #18
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b8:	e002      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3b01      	subs	r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f9      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40012300 	.word	0x40012300
 80015e0:	40012000 	.word	0x40012000
 80015e4:	10000012 	.word	0x10000012
 80015e8:	2000001c 	.word	0x2000001c
 80015ec:	431bde83 	.word	0x431bde83

080015f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015f8:	4b79      	ldr	r3, [pc, #484]	; (80017e0 <ADC_Init+0x1f0>)
 80015fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	431a      	orrs	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001624:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	021a      	lsls	r2, r3, #8
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6899      	ldr	r1, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <ADC_Init+0x1f4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d022      	beq.n	80016ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001696:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6899      	ldr	r1, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	e00f      	b.n	80016ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0202 	bic.w	r2, r2, #2
 80016fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6899      	ldr	r1, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7e1b      	ldrb	r3, [r3, #24]
 8001708:	005a      	lsls	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01b      	beq.n	8001754 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800173a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6859      	ldr	r1, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	3b01      	subs	r3, #1
 8001748:	035a      	lsls	r2, r3, #13
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	e007      	b.n	8001764 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001762:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	3b01      	subs	r3, #1
 8001780:	051a      	lsls	r2, r3, #20
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6899      	ldr	r1, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017a6:	025a      	lsls	r2, r3, #9
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6899      	ldr	r1, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	029a      	lsls	r2, r3, #10
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40012300 	.word	0x40012300
 80017e4:	0f000001 	.word	0x0f000001

080017e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d13c      	bne.n	800187c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d12b      	bne.n	8001874 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001820:	2b00      	cmp	r3, #0
 8001822:	d127      	bne.n	8001874 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800183c:	2b00      	cmp	r3, #0
 800183e:	d119      	bne.n	8001874 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0220 	bic.w	r2, r2, #32
 800184e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d105      	bne.n	8001874 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f043 0201 	orr.w	r2, r3, #1
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f7ff fd6b 	bl	8001350 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800187a:	e00e      	b.n	800189a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f7ff fd75 	bl	8001378 <HAL_ADC_ErrorCallback>
}
 800188e:	e004      	b.n	800189a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	4798      	blx	r3
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f7ff fd57 	bl	8001364 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b084      	sub	sp, #16
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2240      	movs	r2, #64	; 0x40
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f043 0204 	orr.w	r2, r3, #4
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f7ff fd4a 	bl	8001378 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <__NVIC_EnableIRQ+0x38>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	; (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a58:	d301      	bcc.n	8001a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00f      	b.n	8001a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <SysTick_Config+0x40>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a66:	210f      	movs	r1, #15
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a6c:	f7ff ff8e 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <SysTick_Config+0x40>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <SysTick_Config+0x40>)
 8001a78:	2207      	movs	r2, #7
 8001a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff29 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab4:	f7ff ff3e 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	6978      	ldr	r0, [r7, #20]
 8001ac0:	f7ff ff8e 	bl	80019e0 <NVIC_EncodePriority>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff5d 	bl	800198c <__NVIC_SetPriority>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff31 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffa2 	bl	8001a48 <SysTick_Config>
 8001b04:	4603      	mov	r3, r0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff fa94 	bl	8001048 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e099      	b.n	8001c60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0201 	bic.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4c:	e00f      	b.n	8001b6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b4e:	f7ff fa7b 	bl	8001048 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	d908      	bls.n	8001b6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2203      	movs	r2, #3
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e078      	b.n	8001c60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e8      	bne.n	8001b4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_DMA_Init+0x158>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d107      	bne.n	8001bd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f023 0307 	bic.w	r3, r3, #7
 8001bee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d117      	bne.n	8001c32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00e      	beq.n	8001c32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fa6f 	bl	80020f8 <DMA_CheckFifoParam>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2240      	movs	r2, #64	; 0x40
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e016      	b.n	8001c60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fa26 	bl	800208c <DMA_CalcBaseAndBitshift>
 8001c40:	4603      	mov	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	223f      	movs	r2, #63	; 0x3f
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	f010803f 	.word	0xf010803f

08001c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_DMA_Start_IT+0x26>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e040      	b.n	8001d14 <HAL_DMA_Start_IT+0xa8>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d12f      	bne.n	8001d06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f9b8 	bl	8002030 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	223f      	movs	r2, #63	; 0x3f
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0216 	orr.w	r2, r2, #22
 8001cda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d007      	beq.n	8001cf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0208 	orr.w	r2, r2, #8
 8001cf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	e005      	b.n	8001d12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d28:	4b8e      	ldr	r3, [pc, #568]	; (8001f64 <HAL_DMA_IRQHandler+0x248>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a8e      	ldr	r2, [pc, #568]	; (8001f68 <HAL_DMA_IRQHandler+0x24c>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0a9b      	lsrs	r3, r3, #10
 8001d34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	2208      	movs	r2, #8
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01a      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0204 	bic.w	r2, r2, #4
 8001d6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	2208      	movs	r2, #8
 8001d76:	409a      	lsls	r2, r3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d80:	f043 0201 	orr.w	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d012      	beq.n	8001dbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001daa:	2201      	movs	r2, #1
 8001dac:	409a      	lsls	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db6:	f043 0202 	orr.w	r2, r3, #2
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d012      	beq.n	8001df4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00b      	beq.n	8001df4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	2204      	movs	r2, #4
 8001de2:	409a      	lsls	r2, r3
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dec:	f043 0204 	orr.w	r2, r3, #4
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	2210      	movs	r2, #16
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d043      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d03c      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	2210      	movs	r2, #16
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d018      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d108      	bne.n	8001e4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d024      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	4798      	blx	r3
 8001e4a:	e01f      	b.n	8001e8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01b      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
 8001e5c:	e016      	b.n	8001e8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d107      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0208 	bic.w	r2, r2, #8
 8001e7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	2220      	movs	r2, #32
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 808f 	beq.w	8001fbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8087 	beq.w	8001fbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d136      	bne.n	8001f34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0216 	bic.w	r2, r2, #22
 8001ed4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ee4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <HAL_DMA_IRQHandler+0x1da>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0208 	bic.w	r2, r2, #8
 8001f04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	223f      	movs	r2, #63	; 0x3f
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d07e      	beq.n	8002028 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	4798      	blx	r3
        }
        return;
 8001f32:	e079      	b.n	8002028 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d01d      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10d      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d031      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
 8001f60:	e02c      	b.n	8001fbc <HAL_DMA_IRQHandler+0x2a0>
 8001f62:	bf00      	nop
 8001f64:	2000001c 	.word	0x2000001c
 8001f68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d023      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4798      	blx	r3
 8001f7c:	e01e      	b.n	8001fbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10f      	bne.n	8001fac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0210 	bic.w	r2, r2, #16
 8001f9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d032      	beq.n	800202a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d022      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2205      	movs	r2, #5
 8001fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0201 	bic.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	3301      	adds	r3, #1
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d307      	bcc.n	8002004 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f2      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0x2cc>
 8002002:	e000      	b.n	8002006 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002004:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	4798      	blx	r3
 8002026:	e000      	b.n	800202a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002028:	bf00      	nop
    }
  }
}
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800204c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b40      	cmp	r3, #64	; 0x40
 800205c:	d108      	bne.n	8002070 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800206e:	e007      	b.n	8002080 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	60da      	str	r2, [r3, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	3b10      	subs	r3, #16
 800209c:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <DMA_CalcBaseAndBitshift+0x64>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020a6:	4a13      	ldr	r2, [pc, #76]	; (80020f4 <DMA_CalcBaseAndBitshift+0x68>)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d909      	bls.n	80020ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020c2:	f023 0303 	bic.w	r3, r3, #3
 80020c6:	1d1a      	adds	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	659a      	str	r2, [r3, #88]	; 0x58
 80020cc:	e007      	b.n	80020de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020d6:	f023 0303 	bic.w	r3, r3, #3
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	aaaaaaab 	.word	0xaaaaaaab
 80020f4:	08007a34 	.word	0x08007a34

080020f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d11f      	bne.n	8002152 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d856      	bhi.n	80021c6 <DMA_CheckFifoParam+0xce>
 8002118:	a201      	add	r2, pc, #4	; (adr r2, 8002120 <DMA_CheckFifoParam+0x28>)
 800211a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211e:	bf00      	nop
 8002120:	08002131 	.word	0x08002131
 8002124:	08002143 	.word	0x08002143
 8002128:	08002131 	.word	0x08002131
 800212c:	080021c7 	.word	0x080021c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d046      	beq.n	80021ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002140:	e043      	b.n	80021ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800214a:	d140      	bne.n	80021ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002150:	e03d      	b.n	80021ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800215a:	d121      	bne.n	80021a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d837      	bhi.n	80021d2 <DMA_CheckFifoParam+0xda>
 8002162:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <DMA_CheckFifoParam+0x70>)
 8002164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002168:	08002179 	.word	0x08002179
 800216c:	0800217f 	.word	0x0800217f
 8002170:	08002179 	.word	0x08002179
 8002174:	08002191 	.word	0x08002191
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
      break;
 800217c:	e030      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d025      	beq.n	80021d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800218e:	e022      	b.n	80021d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002198:	d11f      	bne.n	80021da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800219e:	e01c      	b.n	80021da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d903      	bls.n	80021ae <DMA_CheckFifoParam+0xb6>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d003      	beq.n	80021b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021ac:	e018      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
      break;
 80021b2:	e015      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00e      	beq.n	80021de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
      break;
 80021c4:	e00b      	b.n	80021de <DMA_CheckFifoParam+0xe6>
      break;
 80021c6:	bf00      	nop
 80021c8:	e00a      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ca:	bf00      	nop
 80021cc:	e008      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ce:	bf00      	nop
 80021d0:	e006      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021d2:	bf00      	nop
 80021d4:	e004      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021d6:	bf00      	nop
 80021d8:	e002      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80021da:	bf00      	nop
 80021dc:	e000      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021de:	bf00      	nop
    }
  } 
  
  return status; 
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	e165      	b.n	80024d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800220c:	2201      	movs	r2, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	429a      	cmp	r2, r3
 8002226:	f040 8154 	bne.w	80024d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d005      	beq.n	8002242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223e:	2b02      	cmp	r3, #2
 8002240:	d130      	bne.n	80022a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 0201 	and.w	r2, r3, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d017      	beq.n	80022e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d123      	bne.n	8002334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	08da      	lsrs	r2, r3, #3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3208      	adds	r2, #8
 80022f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	220f      	movs	r2, #15
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	08da      	lsrs	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3208      	adds	r2, #8
 800232e:	69b9      	ldr	r1, [r7, #24]
 8002330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0203 	and.w	r2, r3, #3
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80ae 	beq.w	80024d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b5d      	ldr	r3, [pc, #372]	; (80024f0 <HAL_GPIO_Init+0x300>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	4a5c      	ldr	r2, [pc, #368]	; (80024f0 <HAL_GPIO_Init+0x300>)
 8002380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002384:	6453      	str	r3, [r2, #68]	; 0x44
 8002386:	4b5a      	ldr	r3, [pc, #360]	; (80024f0 <HAL_GPIO_Init+0x300>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002392:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <HAL_GPIO_Init+0x304>)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	3302      	adds	r3, #2
 800239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	220f      	movs	r2, #15
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4f      	ldr	r2, [pc, #316]	; (80024f8 <HAL_GPIO_Init+0x308>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d025      	beq.n	800240a <HAL_GPIO_Init+0x21a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4e      	ldr	r2, [pc, #312]	; (80024fc <HAL_GPIO_Init+0x30c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01f      	beq.n	8002406 <HAL_GPIO_Init+0x216>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4d      	ldr	r2, [pc, #308]	; (8002500 <HAL_GPIO_Init+0x310>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d019      	beq.n	8002402 <HAL_GPIO_Init+0x212>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4c      	ldr	r2, [pc, #304]	; (8002504 <HAL_GPIO_Init+0x314>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_GPIO_Init+0x20e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4b      	ldr	r2, [pc, #300]	; (8002508 <HAL_GPIO_Init+0x318>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00d      	beq.n	80023fa <HAL_GPIO_Init+0x20a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4a      	ldr	r2, [pc, #296]	; (800250c <HAL_GPIO_Init+0x31c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <HAL_GPIO_Init+0x206>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a49      	ldr	r2, [pc, #292]	; (8002510 <HAL_GPIO_Init+0x320>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d101      	bne.n	80023f2 <HAL_GPIO_Init+0x202>
 80023ee:	2306      	movs	r3, #6
 80023f0:	e00c      	b.n	800240c <HAL_GPIO_Init+0x21c>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e00a      	b.n	800240c <HAL_GPIO_Init+0x21c>
 80023f6:	2305      	movs	r3, #5
 80023f8:	e008      	b.n	800240c <HAL_GPIO_Init+0x21c>
 80023fa:	2304      	movs	r3, #4
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x21c>
 80023fe:	2303      	movs	r3, #3
 8002400:	e004      	b.n	800240c <HAL_GPIO_Init+0x21c>
 8002402:	2302      	movs	r3, #2
 8002404:	e002      	b.n	800240c <HAL_GPIO_Init+0x21c>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_GPIO_Init+0x21c>
 800240a:	2300      	movs	r3, #0
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	f002 0203 	and.w	r2, r2, #3
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	4093      	lsls	r3, r2
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241c:	4935      	ldr	r1, [pc, #212]	; (80024f4 <HAL_GPIO_Init+0x304>)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242a:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <HAL_GPIO_Init+0x324>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244e:	4a31      	ldr	r2, [pc, #196]	; (8002514 <HAL_GPIO_Init+0x324>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002454:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <HAL_GPIO_Init+0x324>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002478:	4a26      	ldr	r2, [pc, #152]	; (8002514 <HAL_GPIO_Init+0x324>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247e:	4b25      	ldr	r3, [pc, #148]	; (8002514 <HAL_GPIO_Init+0x324>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a2:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <HAL_GPIO_Init+0x324>)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_GPIO_Init+0x324>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024cc:	4a11      	ldr	r2, [pc, #68]	; (8002514 <HAL_GPIO_Init+0x324>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3301      	adds	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b0f      	cmp	r3, #15
 80024dc:	f67f ae96 	bls.w	800220c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40013800 	.word	0x40013800
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020400 	.word	0x40020400
 8002500:	40020800 	.word	0x40020800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	40021000 	.word	0x40021000
 800250c:	40021400 	.word	0x40021400
 8002510:	40021800 	.word	0x40021800
 8002514:	40013c00 	.word	0x40013c00

08002518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	887b      	ldrh	r3, [r7, #2]
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	e001      	b.n	800253a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002564:	e003      	b.n	800256e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	041a      	lsls	r2, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	619a      	str	r2, [r3, #24]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e12b      	b.n	80027e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f003 fc94 	bl	8005ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2224      	movs	r2, #36	; 0x24
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025e0:	f000 fd1a 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 80025e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4a81      	ldr	r2, [pc, #516]	; (80027f0 <HAL_I2C_Init+0x274>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d807      	bhi.n	8002600 <HAL_I2C_Init+0x84>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a80      	ldr	r2, [pc, #512]	; (80027f4 <HAL_I2C_Init+0x278>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	bf94      	ite	ls
 80025f8:	2301      	movls	r3, #1
 80025fa:	2300      	movhi	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	e006      	b.n	800260e <HAL_I2C_Init+0x92>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a7d      	ldr	r2, [pc, #500]	; (80027f8 <HAL_I2C_Init+0x27c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	bf94      	ite	ls
 8002608:	2301      	movls	r3, #1
 800260a:	2300      	movhi	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e0e7      	b.n	80027e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a78      	ldr	r2, [pc, #480]	; (80027fc <HAL_I2C_Init+0x280>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	0c9b      	lsrs	r3, r3, #18
 8002620:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a6a      	ldr	r2, [pc, #424]	; (80027f0 <HAL_I2C_Init+0x274>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d802      	bhi.n	8002650 <HAL_I2C_Init+0xd4>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3301      	adds	r3, #1
 800264e:	e009      	b.n	8002664 <HAL_I2C_Init+0xe8>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	4a69      	ldr	r2, [pc, #420]	; (8002800 <HAL_I2C_Init+0x284>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	3301      	adds	r3, #1
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	430b      	orrs	r3, r1
 800266a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002676:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	495c      	ldr	r1, [pc, #368]	; (80027f0 <HAL_I2C_Init+0x274>)
 8002680:	428b      	cmp	r3, r1
 8002682:	d819      	bhi.n	80026b8 <HAL_I2C_Init+0x13c>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1e59      	subs	r1, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002692:	1c59      	adds	r1, r3, #1
 8002694:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002698:	400b      	ands	r3, r1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_I2C_Init+0x138>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1e59      	subs	r1, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b2:	e051      	b.n	8002758 <HAL_I2C_Init+0x1dc>
 80026b4:	2304      	movs	r3, #4
 80026b6:	e04f      	b.n	8002758 <HAL_I2C_Init+0x1dc>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d111      	bne.n	80026e4 <HAL_I2C_Init+0x168>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1e58      	subs	r0, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	440b      	add	r3, r1
 80026ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d2:	3301      	adds	r3, #1
 80026d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e012      	b.n	800270a <HAL_I2C_Init+0x18e>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1e58      	subs	r0, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	0099      	lsls	r1, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fa:	3301      	adds	r3, #1
 80026fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_I2C_Init+0x196>
 800270e:	2301      	movs	r3, #1
 8002710:	e022      	b.n	8002758 <HAL_I2C_Init+0x1dc>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10e      	bne.n	8002738 <HAL_I2C_Init+0x1bc>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1e58      	subs	r0, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	440b      	add	r3, r1
 8002728:	fbb0 f3f3 	udiv	r3, r0, r3
 800272c:	3301      	adds	r3, #1
 800272e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002736:	e00f      	b.n	8002758 <HAL_I2C_Init+0x1dc>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1e58      	subs	r0, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	0099      	lsls	r1, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	fbb0 f3f3 	udiv	r3, r0, r3
 800274e:	3301      	adds	r3, #1
 8002750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	6809      	ldr	r1, [r1, #0]
 800275c:	4313      	orrs	r3, r2
 800275e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002786:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6911      	ldr	r1, [r2, #16]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68d2      	ldr	r2, [r2, #12]
 8002792:	4311      	orrs	r1, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	430b      	orrs	r3, r1
 800279a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	000186a0 	.word	0x000186a0
 80027f4:	001e847f 	.word	0x001e847f
 80027f8:	003d08ff 	.word	0x003d08ff
 80027fc:	431bde83 	.word	0x431bde83
 8002800:	10624dd3 	.word	0x10624dd3

08002804 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4603      	mov	r3, r0
 8002814:	817b      	strh	r3, [r7, #10]
 8002816:	460b      	mov	r3, r1
 8002818:	813b      	strh	r3, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800281e:	f7fe fc13 	bl	8001048 <HAL_GetTick>
 8002822:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b20      	cmp	r3, #32
 800282e:	f040 80d9 	bne.w	80029e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2319      	movs	r3, #25
 8002838:	2201      	movs	r2, #1
 800283a:	496d      	ldr	r1, [pc, #436]	; (80029f0 <HAL_I2C_Mem_Write+0x1ec>)
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f971 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002848:	2302      	movs	r3, #2
 800284a:	e0cc      	b.n	80029e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_I2C_Mem_Write+0x56>
 8002856:	2302      	movs	r3, #2
 8002858:	e0c5      	b.n	80029e6 <HAL_I2C_Mem_Write+0x1e2>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d007      	beq.n	8002880 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2221      	movs	r2, #33	; 0x21
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a3a      	ldr	r2, [r7, #32]
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a4d      	ldr	r2, [pc, #308]	; (80029f4 <HAL_I2C_Mem_Write+0x1f0>)
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028c2:	88f8      	ldrh	r0, [r7, #6]
 80028c4:	893a      	ldrh	r2, [r7, #8]
 80028c6:	8979      	ldrh	r1, [r7, #10]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	4603      	mov	r3, r0
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f890 	bl	80029f8 <I2C_RequestMemoryWrite>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d052      	beq.n	8002984 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e081      	b.n	80029e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f9f2 	bl	8002cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00d      	beq.n	800290e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d107      	bne.n	800290a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002908:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e06b      	b.n	80029e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b04      	cmp	r3, #4
 800294a:	d11b      	bne.n	8002984 <HAL_I2C_Mem_Write+0x180>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	d017      	beq.n	8002984 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1aa      	bne.n	80028e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f9de 	bl	8002d52 <I2C_WaitOnBTFFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00d      	beq.n	80029b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d107      	bne.n	80029b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e016      	b.n	80029e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e000      	b.n	80029e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
  }
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	00100002 	.word	0x00100002
 80029f4:	ffff0000 	.word	0xffff0000

080029f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	4603      	mov	r3, r0
 8002a08:	817b      	strh	r3, [r7, #10]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	813b      	strh	r3, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f878 	bl	8002b24 <I2C_WaitOnFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00d      	beq.n	8002a56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a48:	d103      	bne.n	8002a52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e05f      	b.n	8002b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a56:	897b      	ldrh	r3, [r7, #10]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	6a3a      	ldr	r2, [r7, #32]
 8002a6a:	492d      	ldr	r1, [pc, #180]	; (8002b20 <I2C_RequestMemoryWrite+0x128>)
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f8b0 	bl	8002bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e04c      	b.n	8002b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a94:	6a39      	ldr	r1, [r7, #32]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f91a 	bl	8002cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d107      	bne.n	8002aba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e02b      	b.n	8002b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac4:	893b      	ldrh	r3, [r7, #8]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	611a      	str	r2, [r3, #16]
 8002ace:	e021      	b.n	8002b14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ad0:	893b      	ldrh	r3, [r7, #8]
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae0:	6a39      	ldr	r1, [r7, #32]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f8f4 	bl	8002cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00d      	beq.n	8002b0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d107      	bne.n	8002b06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e005      	b.n	8002b16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b0a:	893b      	ldrh	r3, [r7, #8]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	00010002 	.word	0x00010002

08002b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b34:	e025      	b.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b3c:	d021      	beq.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7fe fa83 	bl	8001048 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d116      	bne.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e023      	b.n	8002bca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	0c1b      	lsrs	r3, r3, #16
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d10d      	bne.n	8002ba8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	43da      	mvns	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	e00c      	b.n	8002bc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bf0c      	ite	eq
 8002bba:	2301      	moveq	r3, #1
 8002bbc:	2300      	movne	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d0b6      	beq.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002be0:	e051      	b.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf0:	d123      	bne.n	8002c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f043 0204 	orr.w	r2, r3, #4
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e046      	b.n	8002cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c40:	d021      	beq.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c42:	f7fe fa01 	bl	8001048 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d116      	bne.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f043 0220 	orr.w	r2, r3, #32
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e020      	b.n	8002cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d10c      	bne.n	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e00b      	b.n	8002cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d18d      	bne.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cdc:	e02d      	b.n	8002d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f878 	bl	8002dd4 <I2C_IsAcknowledgeFailed>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e02d      	b.n	8002d4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf4:	d021      	beq.n	8002d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf6:	f7fe f9a7 	bl	8001048 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d302      	bcc.n	8002d0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d116      	bne.n	8002d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e007      	b.n	8002d4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d44:	2b80      	cmp	r3, #128	; 0x80
 8002d46:	d1ca      	bne.n	8002cde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d5e:	e02d      	b.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f837 	bl	8002dd4 <I2C_IsAcknowledgeFailed>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e02d      	b.n	8002dcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d76:	d021      	beq.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d78:	f7fe f966 	bl	8001048 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d302      	bcc.n	8002d8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d116      	bne.n	8002dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e007      	b.n	8002dcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d1ca      	bne.n	8002d60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dea:	d11b      	bne.n	8002e24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002df4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f043 0204 	orr.w	r2, r3, #4
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0cc      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e48:	4b68      	ldr	r3, [pc, #416]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d90c      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b65      	ldr	r3, [pc, #404]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b63      	ldr	r3, [pc, #396]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0b8      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d020      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e88:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4a58      	ldr	r2, [pc, #352]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea0:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eac:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	494d      	ldr	r1, [pc, #308]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d044      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	4b47      	ldr	r3, [pc, #284]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d119      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e07f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e06f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f02:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e067      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f12:	4b37      	ldr	r3, [pc, #220]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4934      	ldr	r1, [pc, #208]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f24:	f7fe f890 	bl	8001048 <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2c:	f7fe f88c 	bl	8001048 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e04f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 020c 	and.w	r2, r3, #12
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d1eb      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f54:	4b25      	ldr	r3, [pc, #148]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d20c      	bcs.n	8002f7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b22      	ldr	r3, [pc, #136]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e032      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	490e      	ldr	r1, [pc, #56]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fba:	f000 f855 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	490a      	ldr	r1, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	5ccb      	ldrb	r3, [r1, r3]
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1c8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fff0 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023c00 	.word	0x40023c00
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	080081a8 	.word	0x080081a8
 8002ff8:	2000001c 	.word	0x2000001c
 8002ffc:	20000000 	.word	0x20000000

08003000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_RCC_GetHCLKFreq+0x14>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	2000001c 	.word	0x2000001c

08003018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800301c:	f7ff fff0 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0a9b      	lsrs	r3, r3, #10
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4903      	ldr	r1, [pc, #12]	; (800303c <HAL_RCC_GetPCLK1Freq+0x24>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40023800 	.word	0x40023800
 800303c:	080081b8 	.word	0x080081b8

08003040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003044:	f7ff ffdc 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0b5b      	lsrs	r3, r3, #13
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4903      	ldr	r1, [pc, #12]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	080081b8 	.word	0x080081b8

08003068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800306c:	b0ae      	sub	sp, #184	; 0xb8
 800306e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800308e:	4bcb      	ldr	r3, [pc, #812]	; (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b0c      	cmp	r3, #12
 8003098:	f200 8206 	bhi.w	80034a8 <HAL_RCC_GetSysClockFreq+0x440>
 800309c:	a201      	add	r2, pc, #4	; (adr r2, 80030a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800309e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a2:	bf00      	nop
 80030a4:	080030d9 	.word	0x080030d9
 80030a8:	080034a9 	.word	0x080034a9
 80030ac:	080034a9 	.word	0x080034a9
 80030b0:	080034a9 	.word	0x080034a9
 80030b4:	080030e1 	.word	0x080030e1
 80030b8:	080034a9 	.word	0x080034a9
 80030bc:	080034a9 	.word	0x080034a9
 80030c0:	080034a9 	.word	0x080034a9
 80030c4:	080030e9 	.word	0x080030e9
 80030c8:	080034a9 	.word	0x080034a9
 80030cc:	080034a9 	.word	0x080034a9
 80030d0:	080034a9 	.word	0x080034a9
 80030d4:	080032d9 	.word	0x080032d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d8:	4bb9      	ldr	r3, [pc, #740]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80030da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80030de:	e1e7      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030e0:	4bb8      	ldr	r3, [pc, #736]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80030e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030e6:	e1e3      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e8:	4bb4      	ldr	r3, [pc, #720]	; (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030f4:	4bb1      	ldr	r3, [pc, #708]	; (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d071      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003100:	4bae      	ldr	r3, [pc, #696]	; (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	2200      	movs	r2, #0
 8003108:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800310c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003126:	4622      	mov	r2, r4
 8003128:	462b      	mov	r3, r5
 800312a:	f04f 0000 	mov.w	r0, #0
 800312e:	f04f 0100 	mov.w	r1, #0
 8003132:	0159      	lsls	r1, r3, #5
 8003134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003138:	0150      	lsls	r0, r2, #5
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4621      	mov	r1, r4
 8003140:	1a51      	subs	r1, r2, r1
 8003142:	6439      	str	r1, [r7, #64]	; 0x40
 8003144:	4629      	mov	r1, r5
 8003146:	eb63 0301 	sbc.w	r3, r3, r1
 800314a:	647b      	str	r3, [r7, #68]	; 0x44
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003158:	4649      	mov	r1, r9
 800315a:	018b      	lsls	r3, r1, #6
 800315c:	4641      	mov	r1, r8
 800315e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003162:	4641      	mov	r1, r8
 8003164:	018a      	lsls	r2, r1, #6
 8003166:	4641      	mov	r1, r8
 8003168:	1a51      	subs	r1, r2, r1
 800316a:	63b9      	str	r1, [r7, #56]	; 0x38
 800316c:	4649      	mov	r1, r9
 800316e:	eb63 0301 	sbc.w	r3, r3, r1
 8003172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003180:	4649      	mov	r1, r9
 8003182:	00cb      	lsls	r3, r1, #3
 8003184:	4641      	mov	r1, r8
 8003186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800318a:	4641      	mov	r1, r8
 800318c:	00ca      	lsls	r2, r1, #3
 800318e:	4610      	mov	r0, r2
 8003190:	4619      	mov	r1, r3
 8003192:	4603      	mov	r3, r0
 8003194:	4622      	mov	r2, r4
 8003196:	189b      	adds	r3, r3, r2
 8003198:	633b      	str	r3, [r7, #48]	; 0x30
 800319a:	462b      	mov	r3, r5
 800319c:	460a      	mov	r2, r1
 800319e:	eb42 0303 	adc.w	r3, r2, r3
 80031a2:	637b      	str	r3, [r7, #52]	; 0x34
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031b0:	4629      	mov	r1, r5
 80031b2:	024b      	lsls	r3, r1, #9
 80031b4:	4621      	mov	r1, r4
 80031b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031ba:	4621      	mov	r1, r4
 80031bc:	024a      	lsls	r2, r1, #9
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031c6:	2200      	movs	r2, #0
 80031c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80031d4:	f7fd fd50 	bl	8000c78 <__aeabi_uldivmod>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4613      	mov	r3, r2
 80031de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031e2:	e067      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e4:	4b75      	ldr	r3, [pc, #468]	; (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031f0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80031f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80031fe:	2300      	movs	r3, #0
 8003200:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003202:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003206:	4622      	mov	r2, r4
 8003208:	462b      	mov	r3, r5
 800320a:	f04f 0000 	mov.w	r0, #0
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	0159      	lsls	r1, r3, #5
 8003214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003218:	0150      	lsls	r0, r2, #5
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4621      	mov	r1, r4
 8003220:	1a51      	subs	r1, r2, r1
 8003222:	62b9      	str	r1, [r7, #40]	; 0x28
 8003224:	4629      	mov	r1, r5
 8003226:	eb63 0301 	sbc.w	r3, r3, r1
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003238:	4649      	mov	r1, r9
 800323a:	018b      	lsls	r3, r1, #6
 800323c:	4641      	mov	r1, r8
 800323e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003242:	4641      	mov	r1, r8
 8003244:	018a      	lsls	r2, r1, #6
 8003246:	4641      	mov	r1, r8
 8003248:	ebb2 0a01 	subs.w	sl, r2, r1
 800324c:	4649      	mov	r1, r9
 800324e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800325e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003262:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003266:	4692      	mov	sl, r2
 8003268:	469b      	mov	fp, r3
 800326a:	4623      	mov	r3, r4
 800326c:	eb1a 0303 	adds.w	r3, sl, r3
 8003270:	623b      	str	r3, [r7, #32]
 8003272:	462b      	mov	r3, r5
 8003274:	eb4b 0303 	adc.w	r3, fp, r3
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003286:	4629      	mov	r1, r5
 8003288:	028b      	lsls	r3, r1, #10
 800328a:	4621      	mov	r1, r4
 800328c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003290:	4621      	mov	r1, r4
 8003292:	028a      	lsls	r2, r1, #10
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800329c:	2200      	movs	r2, #0
 800329e:	673b      	str	r3, [r7, #112]	; 0x70
 80032a0:	677a      	str	r2, [r7, #116]	; 0x74
 80032a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80032a6:	f7fd fce7 	bl	8000c78 <__aeabi_uldivmod>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4613      	mov	r3, r2
 80032b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032b4:	4b41      	ldr	r3, [pc, #260]	; (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	3301      	adds	r3, #1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80032c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032d6:	e0eb      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d8:	4b38      	ldr	r3, [pc, #224]	; (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e4:	4b35      	ldr	r3, [pc, #212]	; (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d06b      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f0:	4b32      	ldr	r3, [pc, #200]	; (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	099b      	lsrs	r3, r3, #6
 80032f6:	2200      	movs	r2, #0
 80032f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80032fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003302:	663b      	str	r3, [r7, #96]	; 0x60
 8003304:	2300      	movs	r3, #0
 8003306:	667b      	str	r3, [r7, #100]	; 0x64
 8003308:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800330c:	4622      	mov	r2, r4
 800330e:	462b      	mov	r3, r5
 8003310:	f04f 0000 	mov.w	r0, #0
 8003314:	f04f 0100 	mov.w	r1, #0
 8003318:	0159      	lsls	r1, r3, #5
 800331a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800331e:	0150      	lsls	r0, r2, #5
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4621      	mov	r1, r4
 8003326:	1a51      	subs	r1, r2, r1
 8003328:	61b9      	str	r1, [r7, #24]
 800332a:	4629      	mov	r1, r5
 800332c:	eb63 0301 	sbc.w	r3, r3, r1
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800333e:	4659      	mov	r1, fp
 8003340:	018b      	lsls	r3, r1, #6
 8003342:	4651      	mov	r1, sl
 8003344:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003348:	4651      	mov	r1, sl
 800334a:	018a      	lsls	r2, r1, #6
 800334c:	4651      	mov	r1, sl
 800334e:	ebb2 0801 	subs.w	r8, r2, r1
 8003352:	4659      	mov	r1, fp
 8003354:	eb63 0901 	sbc.w	r9, r3, r1
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003364:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003368:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800336c:	4690      	mov	r8, r2
 800336e:	4699      	mov	r9, r3
 8003370:	4623      	mov	r3, r4
 8003372:	eb18 0303 	adds.w	r3, r8, r3
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	462b      	mov	r3, r5
 800337a:	eb49 0303 	adc.w	r3, r9, r3
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800338c:	4629      	mov	r1, r5
 800338e:	024b      	lsls	r3, r1, #9
 8003390:	4621      	mov	r1, r4
 8003392:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003396:	4621      	mov	r1, r4
 8003398:	024a      	lsls	r2, r1, #9
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033a2:	2200      	movs	r2, #0
 80033a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80033a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80033a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033ac:	f7fd fc64 	bl	8000c78 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4613      	mov	r3, r2
 80033b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033ba:	e065      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x420>
 80033bc:	40023800 	.word	0x40023800
 80033c0:	00f42400 	.word	0x00f42400
 80033c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c8:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	099b      	lsrs	r3, r3, #6
 80033ce:	2200      	movs	r2, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	4611      	mov	r1, r2
 80033d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033d8:	653b      	str	r3, [r7, #80]	; 0x50
 80033da:	2300      	movs	r3, #0
 80033dc:	657b      	str	r3, [r7, #84]	; 0x54
 80033de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80033e2:	4642      	mov	r2, r8
 80033e4:	464b      	mov	r3, r9
 80033e6:	f04f 0000 	mov.w	r0, #0
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	0159      	lsls	r1, r3, #5
 80033f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f4:	0150      	lsls	r0, r2, #5
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4641      	mov	r1, r8
 80033fc:	1a51      	subs	r1, r2, r1
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	4649      	mov	r1, r9
 8003402:	eb63 0301 	sbc.w	r3, r3, r1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003414:	4659      	mov	r1, fp
 8003416:	018b      	lsls	r3, r1, #6
 8003418:	4651      	mov	r1, sl
 800341a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800341e:	4651      	mov	r1, sl
 8003420:	018a      	lsls	r2, r1, #6
 8003422:	4651      	mov	r1, sl
 8003424:	1a54      	subs	r4, r2, r1
 8003426:	4659      	mov	r1, fp
 8003428:	eb63 0501 	sbc.w	r5, r3, r1
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	00eb      	lsls	r3, r5, #3
 8003436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800343a:	00e2      	lsls	r2, r4, #3
 800343c:	4614      	mov	r4, r2
 800343e:	461d      	mov	r5, r3
 8003440:	4643      	mov	r3, r8
 8003442:	18e3      	adds	r3, r4, r3
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	464b      	mov	r3, r9
 8003448:	eb45 0303 	adc.w	r3, r5, r3
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800345a:	4629      	mov	r1, r5
 800345c:	028b      	lsls	r3, r1, #10
 800345e:	4621      	mov	r1, r4
 8003460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003464:	4621      	mov	r1, r4
 8003466:	028a      	lsls	r2, r1, #10
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003470:	2200      	movs	r2, #0
 8003472:	64bb      	str	r3, [r7, #72]	; 0x48
 8003474:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003476:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800347a:	f7fd fbfd 	bl	8000c78 <__aeabi_uldivmod>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4613      	mov	r3, r2
 8003484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003488:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0f1b      	lsrs	r3, r3, #28
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800349a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800349e:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034a6:	e003      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80034aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	37b8      	adds	r7, #184	; 0xb8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	00f42400 	.word	0x00f42400

080034c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e28d      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8083 	beq.w	80035ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034e8:	4b94      	ldr	r3, [pc, #592]	; (800373c <HAL_RCC_OscConfig+0x274>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d019      	beq.n	8003528 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034f4:	4b91      	ldr	r3, [pc, #580]	; (800373c <HAL_RCC_OscConfig+0x274>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d106      	bne.n	800350e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003500:	4b8e      	ldr	r3, [pc, #568]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800350c:	d00c      	beq.n	8003528 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350e:	4b8b      	ldr	r3, [pc, #556]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003516:	2b0c      	cmp	r3, #12
 8003518:	d112      	bne.n	8003540 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351a:	4b88      	ldr	r3, [pc, #544]	; (800373c <HAL_RCC_OscConfig+0x274>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003526:	d10b      	bne.n	8003540 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	4b84      	ldr	r3, [pc, #528]	; (800373c <HAL_RCC_OscConfig+0x274>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d05b      	beq.n	80035ec <HAL_RCC_OscConfig+0x124>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d157      	bne.n	80035ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e25a      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d106      	bne.n	8003558 <HAL_RCC_OscConfig+0x90>
 800354a:	4b7c      	ldr	r3, [pc, #496]	; (800373c <HAL_RCC_OscConfig+0x274>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a7b      	ldr	r2, [pc, #492]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <HAL_RCC_OscConfig+0xcc>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0xb4>
 8003562:	4b76      	ldr	r3, [pc, #472]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a75      	ldr	r2, [pc, #468]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b73      	ldr	r3, [pc, #460]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a72      	ldr	r2, [pc, #456]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0xcc>
 800357c:	4b6f      	ldr	r3, [pc, #444]	; (800373c <HAL_RCC_OscConfig+0x274>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6e      	ldr	r2, [pc, #440]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b6c      	ldr	r3, [pc, #432]	; (800373c <HAL_RCC_OscConfig+0x274>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a6b      	ldr	r2, [pc, #428]	; (800373c <HAL_RCC_OscConfig+0x274>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fd fd54 	bl	8001048 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fd fd50 	bl	8001048 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e21f      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b61      	ldr	r3, [pc, #388]	; (800373c <HAL_RCC_OscConfig+0x274>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0xdc>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fd fd40 	bl	8001048 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fd fd3c 	bl	8001048 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e20b      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	4b57      	ldr	r3, [pc, #348]	; (800373c <HAL_RCC_OscConfig+0x274>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x104>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d06f      	beq.n	80036da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035fa:	4b50      	ldr	r3, [pc, #320]	; (800373c <HAL_RCC_OscConfig+0x274>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b00      	cmp	r3, #0
 8003604:	d017      	beq.n	8003636 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003606:	4b4d      	ldr	r3, [pc, #308]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800360e:	2b08      	cmp	r3, #8
 8003610:	d105      	bne.n	800361e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003612:	4b4a      	ldr	r3, [pc, #296]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d11c      	bne.n	8003664 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362a:	4b44      	ldr	r3, [pc, #272]	; (800373c <HAL_RCC_OscConfig+0x274>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d116      	bne.n	8003664 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_RCC_OscConfig+0x186>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d001      	beq.n	800364e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e1d3      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4937      	ldr	r1, [pc, #220]	; (800373c <HAL_RCC_OscConfig+0x274>)
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003662:	e03a      	b.n	80036da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d020      	beq.n	80036ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800366c:	4b34      	ldr	r3, [pc, #208]	; (8003740 <HAL_RCC_OscConfig+0x278>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fd fce9 	bl	8001048 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800367a:	f7fd fce5 	bl	8001048 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e1b4      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368c:	4b2b      	ldr	r3, [pc, #172]	; (800373c <HAL_RCC_OscConfig+0x274>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003698:	4b28      	ldr	r3, [pc, #160]	; (800373c <HAL_RCC_OscConfig+0x274>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4925      	ldr	r1, [pc, #148]	; (800373c <HAL_RCC_OscConfig+0x274>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]
 80036ac:	e015      	b.n	80036da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ae:	4b24      	ldr	r3, [pc, #144]	; (8003740 <HAL_RCC_OscConfig+0x278>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fd fcc8 	bl	8001048 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036bc:	f7fd fcc4 	bl	8001048 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e193      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ce:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_RCC_OscConfig+0x274>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d036      	beq.n	8003754 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d016      	beq.n	800371c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <HAL_RCC_OscConfig+0x27c>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f4:	f7fd fca8 	bl	8001048 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036fc:	f7fd fca4 	bl	8001048 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e173      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x234>
 800371a:	e01b      	b.n	8003754 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_RCC_OscConfig+0x27c>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fd fc91 	bl	8001048 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	e00e      	b.n	8003748 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372a:	f7fd fc8d 	bl	8001048 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d907      	bls.n	8003748 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e15c      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
 800373c:	40023800 	.word	0x40023800
 8003740:	42470000 	.word	0x42470000
 8003744:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	4b8a      	ldr	r3, [pc, #552]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800374a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ea      	bne.n	800372a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8097 	beq.w	8003890 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003766:	4b83      	ldr	r3, [pc, #524]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10f      	bne.n	8003792 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	4b7f      	ldr	r3, [pc, #508]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	4a7e      	ldr	r2, [pc, #504]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800377c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003780:	6413      	str	r3, [r2, #64]	; 0x40
 8003782:	4b7c      	ldr	r3, [pc, #496]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003792:	4b79      	ldr	r3, [pc, #484]	; (8003978 <HAL_RCC_OscConfig+0x4b0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d118      	bne.n	80037d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379e:	4b76      	ldr	r3, [pc, #472]	; (8003978 <HAL_RCC_OscConfig+0x4b0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a75      	ldr	r2, [pc, #468]	; (8003978 <HAL_RCC_OscConfig+0x4b0>)
 80037a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037aa:	f7fd fc4d 	bl	8001048 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b2:	f7fd fc49 	bl	8001048 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e118      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	4b6c      	ldr	r3, [pc, #432]	; (8003978 <HAL_RCC_OscConfig+0x4b0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d106      	bne.n	80037e6 <HAL_RCC_OscConfig+0x31e>
 80037d8:	4b66      	ldr	r3, [pc, #408]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037dc:	4a65      	ldr	r2, [pc, #404]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	6713      	str	r3, [r2, #112]	; 0x70
 80037e4:	e01c      	b.n	8003820 <HAL_RCC_OscConfig+0x358>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0x340>
 80037ee:	4b61      	ldr	r3, [pc, #388]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	4a60      	ldr	r2, [pc, #384]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80037f4:	f043 0304 	orr.w	r3, r3, #4
 80037f8:	6713      	str	r3, [r2, #112]	; 0x70
 80037fa:	4b5e      	ldr	r3, [pc, #376]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	4a5d      	ldr	r2, [pc, #372]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6713      	str	r3, [r2, #112]	; 0x70
 8003806:	e00b      	b.n	8003820 <HAL_RCC_OscConfig+0x358>
 8003808:	4b5a      	ldr	r3, [pc, #360]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	4a59      	ldr	r2, [pc, #356]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800380e:	f023 0301 	bic.w	r3, r3, #1
 8003812:	6713      	str	r3, [r2, #112]	; 0x70
 8003814:	4b57      	ldr	r3, [pc, #348]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	4a56      	ldr	r2, [pc, #344]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800381a:	f023 0304 	bic.w	r3, r3, #4
 800381e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d015      	beq.n	8003854 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fd fc0e 	bl	8001048 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	e00a      	b.n	8003846 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003830:	f7fd fc0a 	bl	8001048 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e0d7      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003846:	4b4b      	ldr	r3, [pc, #300]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0ee      	beq.n	8003830 <HAL_RCC_OscConfig+0x368>
 8003852:	e014      	b.n	800387e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fd fbf8 	bl	8001048 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385a:	e00a      	b.n	8003872 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800385c:	f7fd fbf4 	bl	8001048 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e0c1      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003872:	4b40      	ldr	r3, [pc, #256]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1ee      	bne.n	800385c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800387e:	7dfb      	ldrb	r3, [r7, #23]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d105      	bne.n	8003890 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003884:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	4a3a      	ldr	r2, [pc, #232]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800388a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80ad 	beq.w	80039f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800389a:	4b36      	ldr	r3, [pc, #216]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d060      	beq.n	8003968 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d145      	bne.n	800393a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	4b33      	ldr	r3, [pc, #204]	; (800397c <HAL_RCC_OscConfig+0x4b4>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd fbc8 	bl	8001048 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fd fbc4 	bl	8001048 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e093      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	4b29      	ldr	r3, [pc, #164]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	019b      	lsls	r3, r3, #6
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	3b01      	subs	r3, #1
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	071b      	lsls	r3, r3, #28
 8003906:	491b      	ldr	r1, [pc, #108]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x4b4>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003912:	f7fd fb99 	bl	8001048 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391a:	f7fd fb95 	bl	8001048 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e064      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x452>
 8003938:	e05c      	b.n	80039f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <HAL_RCC_OscConfig+0x4b4>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fd fb82 	bl	8001048 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003948:	f7fd fb7e 	bl	8001048 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e04d      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x480>
 8003966:	e045      	b.n	80039f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d107      	bne.n	8003980 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e040      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
 8003974:	40023800 	.word	0x40023800
 8003978:	40007000 	.word	0x40007000
 800397c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003980:	4b1f      	ldr	r3, [pc, #124]	; (8003a00 <HAL_RCC_OscConfig+0x538>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d030      	beq.n	80039f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d129      	bne.n	80039f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d122      	bne.n	80039f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039b0:	4013      	ands	r3, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d119      	bne.n	80039f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	3b01      	subs	r3, #1
 80039ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d10f      	bne.n	80039f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d107      	bne.n	80039f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800

08003a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e041      	b.n	8003a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f002 fa98 	bl	8005f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f000 fac4 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d001      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e04e      	b.n	8003b5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a23      	ldr	r2, [pc, #140]	; (8003b68 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d022      	beq.n	8003b24 <HAL_TIM_Base_Start_IT+0x80>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae6:	d01d      	beq.n	8003b24 <HAL_TIM_Base_Start_IT+0x80>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1f      	ldr	r2, [pc, #124]	; (8003b6c <HAL_TIM_Base_Start_IT+0xc8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d018      	beq.n	8003b24 <HAL_TIM_Base_Start_IT+0x80>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <HAL_TIM_Base_Start_IT+0xcc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d013      	beq.n	8003b24 <HAL_TIM_Base_Start_IT+0x80>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00e      	beq.n	8003b24 <HAL_TIM_Base_Start_IT+0x80>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d009      	beq.n	8003b24 <HAL_TIM_Base_Start_IT+0x80>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a19      	ldr	r2, [pc, #100]	; (8003b7c <HAL_TIM_Base_Start_IT+0xd8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d004      	beq.n	8003b24 <HAL_TIM_Base_Start_IT+0x80>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d111      	bne.n	8003b48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b06      	cmp	r3, #6
 8003b34:	d010      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0201 	orr.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b46:	e007      	b.n	8003b58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800
 8003b74:	40000c00 	.word	0x40000c00
 8003b78:	40010400 	.word	0x40010400
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40001800 	.word	0x40001800

08003b84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6a1a      	ldr	r2, [r3, #32]
 8003ba2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10f      	bne.n	8003bcc <HAL_TIM_Base_Stop_IT+0x48>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6a1a      	ldr	r2, [r3, #32]
 8003bb2:	f240 4344 	movw	r3, #1092	; 0x444
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d107      	bne.n	8003bcc <HAL_TIM_Base_Stop_IT+0x48>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d122      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d11b      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f06f 0202 	mvn.w	r2, #2
 8003c0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f9b5 	bl	8003f94 <HAL_TIM_IC_CaptureCallback>
 8003c2a:	e005      	b.n	8003c38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f9a7 	bl	8003f80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f9b8 	bl	8003fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d122      	bne.n	8003c92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d11b      	bne.n	8003c92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f06f 0204 	mvn.w	r2, #4
 8003c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f98b 	bl	8003f94 <HAL_TIM_IC_CaptureCallback>
 8003c7e:	e005      	b.n	8003c8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f97d 	bl	8003f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f98e 	bl	8003fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d122      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d11b      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f06f 0208 	mvn.w	r2, #8
 8003cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2204      	movs	r2, #4
 8003cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f961 	bl	8003f94 <HAL_TIM_IC_CaptureCallback>
 8003cd2:	e005      	b.n	8003ce0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f953 	bl	8003f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f964 	bl	8003fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d122      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d11b      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f06f 0210 	mvn.w	r2, #16
 8003d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2208      	movs	r2, #8
 8003d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f937 	bl	8003f94 <HAL_TIM_IC_CaptureCallback>
 8003d26:	e005      	b.n	8003d34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f929 	bl	8003f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f93a 	bl	8003fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10e      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d107      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f06f 0201 	mvn.w	r2, #1
 8003d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f001 f9a3 	bl	80050ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d10e      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	2b80      	cmp	r3, #128	; 0x80
 8003d80:	d107      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fadf 	bl	8004350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d10e      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d107      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f8ff 	bl	8003fbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d10e      	bne.n	8003dea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d107      	bne.n	8003dea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f06f 0220 	mvn.w	r2, #32
 8003de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 faa9 	bl	800433c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_TIM_ConfigClockSource+0x1c>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e0b4      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x186>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e34:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e46:	d03e      	beq.n	8003ec6 <HAL_TIM_ConfigClockSource+0xd4>
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4c:	f200 8087 	bhi.w	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e54:	f000 8086 	beq.w	8003f64 <HAL_TIM_ConfigClockSource+0x172>
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	d87f      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e5e:	2b70      	cmp	r3, #112	; 0x70
 8003e60:	d01a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0xa6>
 8003e62:	2b70      	cmp	r3, #112	; 0x70
 8003e64:	d87b      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e66:	2b60      	cmp	r3, #96	; 0x60
 8003e68:	d050      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x11a>
 8003e6a:	2b60      	cmp	r3, #96	; 0x60
 8003e6c:	d877      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e6e:	2b50      	cmp	r3, #80	; 0x50
 8003e70:	d03c      	beq.n	8003eec <HAL_TIM_ConfigClockSource+0xfa>
 8003e72:	2b50      	cmp	r3, #80	; 0x50
 8003e74:	d873      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e76:	2b40      	cmp	r3, #64	; 0x40
 8003e78:	d058      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x13a>
 8003e7a:	2b40      	cmp	r3, #64	; 0x40
 8003e7c:	d86f      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e7e:	2b30      	cmp	r3, #48	; 0x30
 8003e80:	d064      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x15a>
 8003e82:	2b30      	cmp	r3, #48	; 0x30
 8003e84:	d86b      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d060      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x15a>
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d867      	bhi.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d05c      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x15a>
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d05a      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x15a>
 8003e96:	e062      	b.n	8003f5e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6899      	ldr	r1, [r3, #8]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f000 f9ac 	bl	8004204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	609a      	str	r2, [r3, #8]
      break;
 8003ec4:	e04f      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6899      	ldr	r1, [r3, #8]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f000 f995 	bl	8004204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee8:	609a      	str	r2, [r3, #8]
      break;
 8003eea:	e03c      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f000 f909 	bl	8004110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2150      	movs	r1, #80	; 0x50
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f962 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003f0a:	e02c      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f000 f928 	bl	800416e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2160      	movs	r1, #96	; 0x60
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 f952 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003f2a:	e01c      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f000 f8e9 	bl	8004110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2140      	movs	r1, #64	; 0x40
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 f942 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003f4a:	e00c      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f000 f939 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e003      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
      break;
 8003f62:	e000      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a40      	ldr	r2, [pc, #256]	; (80040e4 <TIM_Base_SetConfig+0x114>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fee:	d00f      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3d      	ldr	r2, [pc, #244]	; (80040e8 <TIM_Base_SetConfig+0x118>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3c      	ldr	r2, [pc, #240]	; (80040ec <TIM_Base_SetConfig+0x11c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d007      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a3b      	ldr	r2, [pc, #236]	; (80040f0 <TIM_Base_SetConfig+0x120>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3a      	ldr	r2, [pc, #232]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d108      	bne.n	8004022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2f      	ldr	r2, [pc, #188]	; (80040e4 <TIM_Base_SetConfig+0x114>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d02b      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d027      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2c      	ldr	r2, [pc, #176]	; (80040e8 <TIM_Base_SetConfig+0x118>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d023      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <TIM_Base_SetConfig+0x11c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01f      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <TIM_Base_SetConfig+0x120>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01b      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a29      	ldr	r2, [pc, #164]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d017      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a28      	ldr	r2, [pc, #160]	; (80040f8 <TIM_Base_SetConfig+0x128>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a27      	ldr	r2, [pc, #156]	; (80040fc <TIM_Base_SetConfig+0x12c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00f      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a26      	ldr	r2, [pc, #152]	; (8004100 <TIM_Base_SetConfig+0x130>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00b      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a25      	ldr	r2, [pc, #148]	; (8004104 <TIM_Base_SetConfig+0x134>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a24      	ldr	r2, [pc, #144]	; (8004108 <TIM_Base_SetConfig+0x138>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a23      	ldr	r2, [pc, #140]	; (800410c <TIM_Base_SetConfig+0x13c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d108      	bne.n	8004094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <TIM_Base_SetConfig+0x114>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_Base_SetConfig+0xf8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a0c      	ldr	r2, [pc, #48]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d103      	bne.n	80040d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	615a      	str	r2, [r3, #20]
}
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40000400 	.word	0x40000400
 80040ec:	40000800 	.word	0x40000800
 80040f0:	40000c00 	.word	0x40000c00
 80040f4:	40010400 	.word	0x40010400
 80040f8:	40014000 	.word	0x40014000
 80040fc:	40014400 	.word	0x40014400
 8004100:	40014800 	.word	0x40014800
 8004104:	40001800 	.word	0x40001800
 8004108:	40001c00 	.word	0x40001c00
 800410c:	40002000 	.word	0x40002000

08004110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f023 0201 	bic.w	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 030a 	bic.w	r3, r3, #10
 800414c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416e:	b480      	push	{r7}
 8004170:	b087      	sub	sp, #28
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0210 	bic.w	r2, r3, #16
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	031b      	lsls	r3, r3, #12
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b085      	sub	sp, #20
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f043 0307 	orr.w	r3, r3, #7
 80041f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	609a      	str	r2, [r3, #8]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	021a      	lsls	r2, r3, #8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	431a      	orrs	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4313      	orrs	r3, r2
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004258:	2302      	movs	r3, #2
 800425a:	e05a      	b.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a21      	ldr	r2, [pc, #132]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d022      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a8:	d01d      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d018      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1a      	ldr	r2, [pc, #104]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00e      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a18      	ldr	r2, [pc, #96]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d009      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a17      	ldr	r2, [pc, #92]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a15      	ldr	r2, [pc, #84]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10c      	bne.n	8004300 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40010000 	.word	0x40010000
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00
 8004330:	40010400 	.word	0x40010400
 8004334:	40014000 	.word	0x40014000
 8004338:	40001800 	.word	0x40001800

0800433c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e03f      	b.n	80043f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f001 fe0e 	bl	8005fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2224      	movs	r2, #36	; 0x24
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f929 	bl	8004600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b08a      	sub	sp, #40	; 0x28
 8004402:	af02      	add	r7, sp, #8
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b20      	cmp	r3, #32
 800441c:	d17c      	bne.n	8004518 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_UART_Transmit+0x2c>
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e075      	b.n	800451a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_UART_Transmit+0x3e>
 8004438:	2302      	movs	r3, #2
 800443a:	e06e      	b.n	800451a <HAL_UART_Transmit+0x11c>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2221      	movs	r2, #33	; 0x21
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004452:	f7fc fdf9 	bl	8001048 <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	88fa      	ldrh	r2, [r7, #6]
 800445c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	88fa      	ldrh	r2, [r7, #6]
 8004462:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446c:	d108      	bne.n	8004480 <HAL_UART_Transmit+0x82>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d104      	bne.n	8004480 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	e003      	b.n	8004488 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004484:	2300      	movs	r3, #0
 8004486:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004490:	e02a      	b.n	80044e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	2180      	movs	r1, #128	; 0x80
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f840 	bl	8004522 <UART_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e036      	b.n	800451a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	3302      	adds	r3, #2
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	e007      	b.n	80044da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	3301      	adds	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1cf      	bne.n	8004492 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	2140      	movs	r1, #64	; 0x40
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f810 	bl	8004522 <UART_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e006      	b.n	800451a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3720      	adds	r7, #32
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b090      	sub	sp, #64	; 0x40
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	4613      	mov	r3, r2
 8004530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004532:	e050      	b.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800453a:	d04c      	beq.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800453c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <UART_WaitOnFlagUntilTimeout+0x30>
 8004542:	f7fc fd81 	bl	8001048 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800454e:	429a      	cmp	r2, r3
 8004550:	d241      	bcs.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004572:	637a      	str	r2, [r7, #52]	; 0x34
 8004574:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e5      	bne.n	8004552 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3314      	adds	r3, #20
 800458c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	613b      	str	r3, [r7, #16]
   return(result);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3314      	adds	r3, #20
 80045a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045a6:	623a      	str	r2, [r7, #32]
 80045a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	69f9      	ldr	r1, [r7, #28]
 80045ac:	6a3a      	ldr	r2, [r7, #32]
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e5      	bne.n	8004586 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e00f      	b.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4013      	ands	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	bf0c      	ite	eq
 80045e6:	2301      	moveq	r3, #1
 80045e8:	2300      	movne	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d09f      	beq.n	8004534 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3740      	adds	r7, #64	; 0x40
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004604:	b0c0      	sub	sp, #256	; 0x100
 8004606:	af00      	add	r7, sp, #0
 8004608:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	68d9      	ldr	r1, [r3, #12]
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	ea40 0301 	orr.w	r3, r0, r1
 8004628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800462a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	431a      	orrs	r2, r3
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	431a      	orrs	r2, r3
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800464c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004658:	f021 010c 	bic.w	r1, r1, #12
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004666:	430b      	orrs	r3, r1
 8004668:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467a:	6999      	ldr	r1, [r3, #24]
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	ea40 0301 	orr.w	r3, r0, r1
 8004686:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4b8f      	ldr	r3, [pc, #572]	; (80048cc <UART_SetConfig+0x2cc>)
 8004690:	429a      	cmp	r2, r3
 8004692:	d005      	beq.n	80046a0 <UART_SetConfig+0xa0>
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4b8d      	ldr	r3, [pc, #564]	; (80048d0 <UART_SetConfig+0x2d0>)
 800469c:	429a      	cmp	r2, r3
 800469e:	d104      	bne.n	80046aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046a0:	f7fe fcce 	bl	8003040 <HAL_RCC_GetPCLK2Freq>
 80046a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046a8:	e003      	b.n	80046b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046aa:	f7fe fcb5 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 80046ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046bc:	f040 810c 	bne.w	80048d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046d2:	4622      	mov	r2, r4
 80046d4:	462b      	mov	r3, r5
 80046d6:	1891      	adds	r1, r2, r2
 80046d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80046da:	415b      	adcs	r3, r3
 80046dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046e2:	4621      	mov	r1, r4
 80046e4:	eb12 0801 	adds.w	r8, r2, r1
 80046e8:	4629      	mov	r1, r5
 80046ea:	eb43 0901 	adc.w	r9, r3, r1
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004702:	4690      	mov	r8, r2
 8004704:	4699      	mov	r9, r3
 8004706:	4623      	mov	r3, r4
 8004708:	eb18 0303 	adds.w	r3, r8, r3
 800470c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004710:	462b      	mov	r3, r5
 8004712:	eb49 0303 	adc.w	r3, r9, r3
 8004716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800471a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004726:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800472a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800472e:	460b      	mov	r3, r1
 8004730:	18db      	adds	r3, r3, r3
 8004732:	653b      	str	r3, [r7, #80]	; 0x50
 8004734:	4613      	mov	r3, r2
 8004736:	eb42 0303 	adc.w	r3, r2, r3
 800473a:	657b      	str	r3, [r7, #84]	; 0x54
 800473c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004744:	f7fc fa98 	bl	8000c78 <__aeabi_uldivmod>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4b61      	ldr	r3, [pc, #388]	; (80048d4 <UART_SetConfig+0x2d4>)
 800474e:	fba3 2302 	umull	r2, r3, r3, r2
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	011c      	lsls	r4, r3, #4
 8004756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475a:	2200      	movs	r2, #0
 800475c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004760:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004764:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004768:	4642      	mov	r2, r8
 800476a:	464b      	mov	r3, r9
 800476c:	1891      	adds	r1, r2, r2
 800476e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004770:	415b      	adcs	r3, r3
 8004772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004774:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004778:	4641      	mov	r1, r8
 800477a:	eb12 0a01 	adds.w	sl, r2, r1
 800477e:	4649      	mov	r1, r9
 8004780:	eb43 0b01 	adc.w	fp, r3, r1
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004798:	4692      	mov	sl, r2
 800479a:	469b      	mov	fp, r3
 800479c:	4643      	mov	r3, r8
 800479e:	eb1a 0303 	adds.w	r3, sl, r3
 80047a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047a6:	464b      	mov	r3, r9
 80047a8:	eb4b 0303 	adc.w	r3, fp, r3
 80047ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047c4:	460b      	mov	r3, r1
 80047c6:	18db      	adds	r3, r3, r3
 80047c8:	643b      	str	r3, [r7, #64]	; 0x40
 80047ca:	4613      	mov	r3, r2
 80047cc:	eb42 0303 	adc.w	r3, r2, r3
 80047d0:	647b      	str	r3, [r7, #68]	; 0x44
 80047d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047da:	f7fc fa4d 	bl	8000c78 <__aeabi_uldivmod>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4611      	mov	r1, r2
 80047e4:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <UART_SetConfig+0x2d4>)
 80047e6:	fba3 2301 	umull	r2, r3, r3, r1
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	2264      	movs	r2, #100	; 0x64
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	1acb      	subs	r3, r1, r3
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047fa:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <UART_SetConfig+0x2d4>)
 80047fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004808:	441c      	add	r4, r3
 800480a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004814:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004818:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	1891      	adds	r1, r2, r2
 8004822:	63b9      	str	r1, [r7, #56]	; 0x38
 8004824:	415b      	adcs	r3, r3
 8004826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800482c:	4641      	mov	r1, r8
 800482e:	1851      	adds	r1, r2, r1
 8004830:	6339      	str	r1, [r7, #48]	; 0x30
 8004832:	4649      	mov	r1, r9
 8004834:	414b      	adcs	r3, r1
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004844:	4659      	mov	r1, fp
 8004846:	00cb      	lsls	r3, r1, #3
 8004848:	4651      	mov	r1, sl
 800484a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484e:	4651      	mov	r1, sl
 8004850:	00ca      	lsls	r2, r1, #3
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	4603      	mov	r3, r0
 8004858:	4642      	mov	r2, r8
 800485a:	189b      	adds	r3, r3, r2
 800485c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004860:	464b      	mov	r3, r9
 8004862:	460a      	mov	r2, r1
 8004864:	eb42 0303 	adc.w	r3, r2, r3
 8004868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004878:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800487c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004880:	460b      	mov	r3, r1
 8004882:	18db      	adds	r3, r3, r3
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28
 8004886:	4613      	mov	r3, r2
 8004888:	eb42 0303 	adc.w	r3, r2, r3
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004896:	f7fc f9ef 	bl	8000c78 <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <UART_SetConfig+0x2d4>)
 80048a0:	fba3 1302 	umull	r1, r3, r3, r2
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	2164      	movs	r1, #100	; 0x64
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	3332      	adds	r3, #50	; 0x32
 80048b2:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <UART_SetConfig+0x2d4>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	f003 0207 	and.w	r2, r3, #7
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4422      	add	r2, r4
 80048c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048c8:	e105      	b.n	8004ad6 <UART_SetConfig+0x4d6>
 80048ca:	bf00      	nop
 80048cc:	40011000 	.word	0x40011000
 80048d0:	40011400 	.word	0x40011400
 80048d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048dc:	2200      	movs	r2, #0
 80048de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048ea:	4642      	mov	r2, r8
 80048ec:	464b      	mov	r3, r9
 80048ee:	1891      	adds	r1, r2, r2
 80048f0:	6239      	str	r1, [r7, #32]
 80048f2:	415b      	adcs	r3, r3
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
 80048f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048fa:	4641      	mov	r1, r8
 80048fc:	1854      	adds	r4, r2, r1
 80048fe:	4649      	mov	r1, r9
 8004900:	eb43 0501 	adc.w	r5, r3, r1
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	00eb      	lsls	r3, r5, #3
 800490e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004912:	00e2      	lsls	r2, r4, #3
 8004914:	4614      	mov	r4, r2
 8004916:	461d      	mov	r5, r3
 8004918:	4643      	mov	r3, r8
 800491a:	18e3      	adds	r3, r4, r3
 800491c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004920:	464b      	mov	r3, r9
 8004922:	eb45 0303 	adc.w	r3, r5, r3
 8004926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004936:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004946:	4629      	mov	r1, r5
 8004948:	008b      	lsls	r3, r1, #2
 800494a:	4621      	mov	r1, r4
 800494c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004950:	4621      	mov	r1, r4
 8004952:	008a      	lsls	r2, r1, #2
 8004954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004958:	f7fc f98e 	bl	8000c78 <__aeabi_uldivmod>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4b60      	ldr	r3, [pc, #384]	; (8004ae4 <UART_SetConfig+0x4e4>)
 8004962:	fba3 2302 	umull	r2, r3, r3, r2
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	011c      	lsls	r4, r3, #4
 800496a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800496e:	2200      	movs	r2, #0
 8004970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004974:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004978:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800497c:	4642      	mov	r2, r8
 800497e:	464b      	mov	r3, r9
 8004980:	1891      	adds	r1, r2, r2
 8004982:	61b9      	str	r1, [r7, #24]
 8004984:	415b      	adcs	r3, r3
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800498c:	4641      	mov	r1, r8
 800498e:	1851      	adds	r1, r2, r1
 8004990:	6139      	str	r1, [r7, #16]
 8004992:	4649      	mov	r1, r9
 8004994:	414b      	adcs	r3, r1
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049a4:	4659      	mov	r1, fp
 80049a6:	00cb      	lsls	r3, r1, #3
 80049a8:	4651      	mov	r1, sl
 80049aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ae:	4651      	mov	r1, sl
 80049b0:	00ca      	lsls	r2, r1, #3
 80049b2:	4610      	mov	r0, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	4603      	mov	r3, r0
 80049b8:	4642      	mov	r2, r8
 80049ba:	189b      	adds	r3, r3, r2
 80049bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049c0:	464b      	mov	r3, r9
 80049c2:	460a      	mov	r2, r1
 80049c4:	eb42 0303 	adc.w	r3, r2, r3
 80049c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80049d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049e4:	4649      	mov	r1, r9
 80049e6:	008b      	lsls	r3, r1, #2
 80049e8:	4641      	mov	r1, r8
 80049ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ee:	4641      	mov	r1, r8
 80049f0:	008a      	lsls	r2, r1, #2
 80049f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049f6:	f7fc f93f 	bl	8000c78 <__aeabi_uldivmod>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4b39      	ldr	r3, [pc, #228]	; (8004ae4 <UART_SetConfig+0x4e4>)
 8004a00:	fba3 1302 	umull	r1, r3, r3, r2
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2164      	movs	r1, #100	; 0x64
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a34      	ldr	r2, [pc, #208]	; (8004ae4 <UART_SetConfig+0x4e4>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a1e:	441c      	add	r4, r3
 8004a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a24:	2200      	movs	r2, #0
 8004a26:	673b      	str	r3, [r7, #112]	; 0x70
 8004a28:	677a      	str	r2, [r7, #116]	; 0x74
 8004a2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a2e:	4642      	mov	r2, r8
 8004a30:	464b      	mov	r3, r9
 8004a32:	1891      	adds	r1, r2, r2
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	415b      	adcs	r3, r3
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a3e:	4641      	mov	r1, r8
 8004a40:	1851      	adds	r1, r2, r1
 8004a42:	6039      	str	r1, [r7, #0]
 8004a44:	4649      	mov	r1, r9
 8004a46:	414b      	adcs	r3, r1
 8004a48:	607b      	str	r3, [r7, #4]
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a56:	4659      	mov	r1, fp
 8004a58:	00cb      	lsls	r3, r1, #3
 8004a5a:	4651      	mov	r1, sl
 8004a5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a60:	4651      	mov	r1, sl
 8004a62:	00ca      	lsls	r2, r1, #3
 8004a64:	4610      	mov	r0, r2
 8004a66:	4619      	mov	r1, r3
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4642      	mov	r2, r8
 8004a6c:	189b      	adds	r3, r3, r2
 8004a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a70:	464b      	mov	r3, r9
 8004a72:	460a      	mov	r2, r1
 8004a74:	eb42 0303 	adc.w	r3, r2, r3
 8004a78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	663b      	str	r3, [r7, #96]	; 0x60
 8004a84:	667a      	str	r2, [r7, #100]	; 0x64
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a92:	4649      	mov	r1, r9
 8004a94:	008b      	lsls	r3, r1, #2
 8004a96:	4641      	mov	r1, r8
 8004a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	008a      	lsls	r2, r1, #2
 8004aa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004aa4:	f7fc f8e8 	bl	8000c78 <__aeabi_uldivmod>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <UART_SetConfig+0x4e4>)
 8004aae:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2164      	movs	r1, #100	; 0x64
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	3332      	adds	r3, #50	; 0x32
 8004ac0:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <UART_SetConfig+0x4e4>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	f003 020f 	and.w	r2, r3, #15
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4422      	add	r2, r4
 8004ad4:	609a      	str	r2, [r3, #8]
}
 8004ad6:	bf00      	nop
 8004ad8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004adc:	46bd      	mov	sp, r7
 8004ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae2:	bf00      	nop
 8004ae4:	51eb851f 	.word	0x51eb851f

08004ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004aec:	f7fc fa46 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004af0:	f000 f8b6 	bl	8004c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004af4:	f000 fa44 	bl	8004f80 <MX_GPIO_Init>
  MX_DMA_Init();
 8004af8:	f000 fa22 	bl	8004f40 <MX_DMA_Init>
  MX_ADC1_Init();
 8004afc:	f000 f91e 	bl	8004d3c <MX_ADC1_Init>
  MX_I2C1_Init();
 8004b00:	f000 f97a 	bl	8004df8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8004b04:	f000 f9a6 	bl	8004e54 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004b08:	f000 f9f0 	bl	8004eec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8004b0c:	f000 ff62 	bl	80059d4 <ssd1306_Init>

  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adcValue,2); //ADC-DMAを有効化
 8004b10:	2202      	movs	r2, #2
 8004b12:	4946      	ldr	r1, [pc, #280]	; (8004c2c <main+0x144>)
 8004b14:	4846      	ldr	r0, [pc, #280]	; (8004c30 <main+0x148>)
 8004b16:	f7fc fb0b 	bl	8001130 <HAL_ADC_Start_DMA>

  HAL_Delay(1000);
 8004b1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b1e:	f7fc fa9f 	bl	8001060 <HAL_Delay>
  STARTUP_LABEL:

//  sprintf(buf, "START UP\r\n");
//  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(buf), 10);

  UserSetUp(); //計測開始前設定処理
 8004b22:	f000 fdd3 	bl	80056cc <UserSetUp>
  SetUpNormalizeParameter(NormalizeParameter); //AD値の平均値と標準偏差を計算
 8004b26:	4843      	ldr	r0, [pc, #268]	; (8004c34 <main+0x14c>)
 8004b28:	f000 fbee 	bl	8005308 <SetUpNormalizeParameter>

//  sprintf(buf, "RESTART\r\n");
//  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(buf), 10);

  /*------------Draw LCD BEGIN----------*/
  sprintf(buf, "ave=%d sd=%d", (int)(NormalizeParameter[0]),(int)(NormalizeParameter[1]));
 8004b2c:	4b41      	ldr	r3, [pc, #260]	; (8004c34 <main+0x14c>)
 8004b2e:	edd3 7a00 	vldr	s15, [r3]
 8004b32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004b36:	4b3f      	ldr	r3, [pc, #252]	; (8004c34 <main+0x14c>)
 8004b38:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b40:	ee17 3a90 	vmov	r3, s15
 8004b44:	ee17 2a10 	vmov	r2, s14
 8004b48:	493b      	ldr	r1, [pc, #236]	; (8004c38 <main+0x150>)
 8004b4a:	483c      	ldr	r0, [pc, #240]	; (8004c3c <main+0x154>)
 8004b4c:	f001 fb76 	bl	800623c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(buf), 0xFFF);
 8004b50:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004b54:	2220      	movs	r2, #32
 8004b56:	4939      	ldr	r1, [pc, #228]	; (8004c3c <main+0x154>)
 8004b58:	4839      	ldr	r0, [pc, #228]	; (8004c40 <main+0x158>)
 8004b5a:	f7ff fc50 	bl	80043fe <HAL_UART_Transmit>

  ssd1306_Fill(White);
 8004b5e:	2001      	movs	r0, #1
 8004b60:	f000 ffa4 	bl	8005aac <ssd1306_Fill>

  ssd1306_SetCursor(0,0);
 8004b64:	2100      	movs	r1, #0
 8004b66:	2000      	movs	r0, #0
 8004b68:	f001 f8fa 	bl	8005d60 <ssd1306_SetCursor>
  ssd1306_WriteString(buf,Font_7x10,Black);
 8004b6c:	4a35      	ldr	r2, [pc, #212]	; (8004c44 <main+0x15c>)
 8004b6e:	2300      	movs	r3, #0
 8004b70:	ca06      	ldmia	r2, {r1, r2}
 8004b72:	4832      	ldr	r0, [pc, #200]	; (8004c3c <main+0x154>)
 8004b74:	f001 f8ce 	bl	8005d14 <ssd1306_WriteString>

  sprintf(buf, "Waiting for start");
 8004b78:	4933      	ldr	r1, [pc, #204]	; (8004c48 <main+0x160>)
 8004b7a:	4830      	ldr	r0, [pc, #192]	; (8004c3c <main+0x154>)
 8004b7c:	f001 fb5e 	bl	800623c <siprintf>
  ssd1306_SetCursor(0,12);
 8004b80:	210c      	movs	r1, #12
 8004b82:	2000      	movs	r0, #0
 8004b84:	f001 f8ec 	bl	8005d60 <ssd1306_SetCursor>
  ssd1306_WriteString(buf,Font_7x10,Black);
 8004b88:	4a2e      	ldr	r2, [pc, #184]	; (8004c44 <main+0x15c>)
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	ca06      	ldmia	r2, {r1, r2}
 8004b8e:	482b      	ldr	r0, [pc, #172]	; (8004c3c <main+0x154>)
 8004b90:	f001 f8c0 	bl	8005d14 <ssd1306_WriteString>

  ssd1306_UpdateScreen();
 8004b94:	f000 ffae 	bl	8005af4 <ssd1306_UpdateScreen>
  /*------------Draw LCD END---------*/

  while(1){ // REMシグナル待ち (計測待機状態)
	  if(HAL_GPIO_ReadPin(GPIOC, REM_SIG_Pin) == 1){
 8004b98:	2180      	movs	r1, #128	; 0x80
 8004b9a:	482c      	ldr	r0, [pc, #176]	; (8004c4c <main+0x164>)
 8004b9c:	f7fd fcbc 	bl	8002518 <HAL_GPIO_ReadPin>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d1f8      	bne.n	8004b98 <main+0xb0>
		ssd1306_Fill(White);
 8004ba6:	2001      	movs	r0, #1
 8004ba8:	f000 ff80 	bl	8005aac <ssd1306_Fill>
		sprintf(buf, "RUNNING");
 8004bac:	4928      	ldr	r1, [pc, #160]	; (8004c50 <main+0x168>)
 8004bae:	4823      	ldr	r0, [pc, #140]	; (8004c3c <main+0x154>)
 8004bb0:	f001 fb44 	bl	800623c <siprintf>
		ssd1306_SetCursor(0,0);
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f001 f8d2 	bl	8005d60 <ssd1306_SetCursor>
		ssd1306_WriteString(buf,Font_7x10,Black);
 8004bbc:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <main+0x15c>)
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	ca06      	ldmia	r2, {r1, r2}
 8004bc2:	481e      	ldr	r0, [pc, #120]	; (8004c3c <main+0x154>)
 8004bc4:	f001 f8a6 	bl	8005d14 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8004bc8:	f000 ff94 	bl	8005af4 <ssd1306_UpdateScreen>
		HAL_Delay(300);
 8004bcc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004bd0:	f7fc fa46 	bl	8001060 <HAL_Delay>
		break;
 8004bd4:	bf00      	nop
	  }
  }

  HAL_TIM_Base_Start_IT(&htim2); //タイマー割り込み機能を有効化 (つまり、割り込み関数である"ピークを発見したらパルスを生む関数"を有効化)
 8004bd6:	481f      	ldr	r0, [pc, #124]	; (8004c54 <main+0x16c>)
 8004bd8:	f7fe ff64 	bl	8003aa4 <HAL_TIM_Base_Start_IT>
  while(1) { //REMシグナルが来ているときに実行する処理

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC, REM_SIG_Pin) == 0){ //シグナルが終了したら
 8004bdc:	2180      	movs	r1, #128	; 0x80
 8004bde:	481b      	ldr	r0, [pc, #108]	; (8004c4c <main+0x164>)
 8004be0:	f7fd fc9a 	bl	8002518 <HAL_GPIO_ReadPin>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10c      	bne.n	8004c04 <main+0x11c>
		HAL_TIM_Base_Stop_IT(&htim2); //タイマー割り込み機能をオフ(もうパルス出す必要ないもんね)
 8004bea:	481a      	ldr	r0, [pc, #104]	; (8004c54 <main+0x16c>)
 8004bec:	f7fe ffca 	bl	8003b84 <HAL_TIM_Base_Stop_IT>
		HAL_Delay(300);
 8004bf0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004bf4:	f7fc fa34 	bl	8001060 <HAL_Delay>
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,RESET);
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2120      	movs	r1, #32
 8004bfc:	4816      	ldr	r0, [pc, #88]	; (8004c58 <main+0x170>)
 8004bfe:	f7fd fca3 	bl	8002548 <HAL_GPIO_WritePin>
		goto RESTART_LABEL;
 8004c02:	e793      	b.n	8004b2c <main+0x44>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, RIGHT_B_Pin) == 0){ //右ボタンを押したら強制終了 & 設定に戻る  // <----------------------- ここにフットスイッチのif文の代わりに条件文を入れる
 8004c04:	2110      	movs	r1, #16
 8004c06:	4815      	ldr	r0, [pc, #84]	; (8004c5c <main+0x174>)
 8004c08:	f7fd fc86 	bl	8002518 <HAL_GPIO_ReadPin>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e4      	bne.n	8004bdc <main+0xf4>
		  HAL_TIM_Base_Stop_IT(&htim2); //タイマー割り込み機能をオフ(もうパルス出す必要ないもんね)
 8004c12:	4810      	ldr	r0, [pc, #64]	; (8004c54 <main+0x16c>)
 8004c14:	f7fe ffb6 	bl	8003b84 <HAL_TIM_Base_Stop_IT>
		  HAL_Delay(300);
 8004c18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004c1c:	f7fc fa20 	bl	8001060 <HAL_Delay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,RESET);
 8004c20:	2200      	movs	r2, #0
 8004c22:	2120      	movs	r1, #32
 8004c24:	480c      	ldr	r0, [pc, #48]	; (8004c58 <main+0x170>)
 8004c26:	f7fd fc8f 	bl	8002548 <HAL_GPIO_WritePin>
		  goto STARTUP_LABEL;
 8004c2a:	e77a      	b.n	8004b22 <main+0x3a>
 8004c2c:	2000022c 	.word	0x2000022c
 8004c30:	200000a4 	.word	0x200000a4
 8004c34:	20000234 	.word	0x20000234
 8004c38:	08007968 	.word	0x08007968
 8004c3c:	20000248 	.word	0x20000248
 8004c40:	200001e8 	.word	0x200001e8
 8004c44:	20000008 	.word	0x20000008
 8004c48:	08007978 	.word	0x08007978
 8004c4c:	40020800 	.word	0x40020800
 8004c50:	0800798c 	.word	0x0800798c
 8004c54:	200001a0 	.word	0x200001a0
 8004c58:	40020000 	.word	0x40020000
 8004c5c:	40020400 	.word	0x40020400

08004c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b094      	sub	sp, #80	; 0x50
 8004c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c66:	f107 031c 	add.w	r3, r7, #28
 8004c6a:	2234      	movs	r2, #52	; 0x34
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f001 fadc 	bl	800622c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c74:	f107 0308 	add.w	r3, r7, #8
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c84:	2300      	movs	r3, #0
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	4b2a      	ldr	r3, [pc, #168]	; (8004d34 <SystemClock_Config+0xd4>)
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	4a29      	ldr	r2, [pc, #164]	; (8004d34 <SystemClock_Config+0xd4>)
 8004c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c92:	6413      	str	r3, [r2, #64]	; 0x40
 8004c94:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <SystemClock_Config+0xd4>)
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	607b      	str	r3, [r7, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <SystemClock_Config+0xd8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004cac:	4a22      	ldr	r2, [pc, #136]	; (8004d38 <SystemClock_Config+0xd8>)
 8004cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <SystemClock_Config+0xd8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cbc:	603b      	str	r3, [r7, #0]
 8004cbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004cc8:	2310      	movs	r3, #16
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004cd8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004cdc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004cde:	2304      	movs	r3, #4
 8004ce0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cea:	f107 031c 	add.w	r3, r7, #28
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe fbea 	bl	80034c8 <HAL_RCC_OscConfig>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8004cfa:	f000 fe4b 	bl	8005994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004cfe:	230f      	movs	r3, #15
 8004d00:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d02:	2302      	movs	r3, #2
 8004d04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004d14:	f107 0308 	add.w	r3, r7, #8
 8004d18:	2102      	movs	r1, #2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe f88a 	bl	8002e34 <HAL_RCC_ClockConfig>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8004d26:	f000 fe35 	bl	8005994 <Error_Handler>
  }
}
 8004d2a:	bf00      	nop
 8004d2c:	3750      	adds	r7, #80	; 0x50
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40023800 	.word	0x40023800
 8004d38:	40007000 	.word	0x40007000

08004d3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004d42:	463b      	mov	r3, r7
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	605a      	str	r2, [r3, #4]
 8004d4a:	609a      	str	r2, [r3, #8]
 8004d4c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004d4e:	4b27      	ldr	r3, [pc, #156]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004d50:	4a27      	ldr	r2, [pc, #156]	; (8004df0 <MX_ADC1_Init+0xb4>)
 8004d52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004d54:	4b25      	ldr	r3, [pc, #148]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004d56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004d5c:	4b23      	ldr	r3, [pc, #140]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004d62:	4b22      	ldr	r3, [pc, #136]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004d68:	4b20      	ldr	r3, [pc, #128]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004d6e:	4b1f      	ldr	r3, [pc, #124]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004d76:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004d7e:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <MX_ADC1_Init+0xb8>)
 8004d80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d82:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004d88:	4b18      	ldr	r3, [pc, #96]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004d8e:	4b17      	ldr	r3, [pc, #92]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004d9c:	4813      	ldr	r0, [pc, #76]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004d9e:	f7fc f983 	bl	80010a8 <HAL_ADC_Init>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004da8:	f000 fdf4 	bl	8005994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004db0:	2301      	movs	r3, #1
 8004db2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004db4:	2307      	movs	r3, #7
 8004db6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004db8:	463b      	mov	r3, r7
 8004dba:	4619      	mov	r1, r3
 8004dbc:	480b      	ldr	r0, [pc, #44]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004dbe:	f7fc fae5 	bl	800138c <HAL_ADC_ConfigChannel>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004dc8:	f000 fde4 	bl	8005994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004dcc:	4b07      	ldr	r3, [pc, #28]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004dd4:	4805      	ldr	r0, [pc, #20]	; (8004dec <MX_ADC1_Init+0xb0>)
 8004dd6:	f7fc f967 	bl	80010a8 <HAL_ADC_Init>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8004de0:	f000 fdd8 	bl	8005994 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	200000a4 	.word	0x200000a4
 8004df0:	40012000 	.word	0x40012000
 8004df4:	0f000001 	.word	0x0f000001

08004df8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004dfc:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <MX_I2C1_Init+0x50>)
 8004dfe:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <MX_I2C1_Init+0x54>)
 8004e00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004e02:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <MX_I2C1_Init+0x50>)
 8004e04:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <MX_I2C1_Init+0x58>)
 8004e06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e08:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <MX_I2C1_Init+0x50>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004e0e:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <MX_I2C1_Init+0x50>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <MX_I2C1_Init+0x50>)
 8004e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e1c:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <MX_I2C1_Init+0x50>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <MX_I2C1_Init+0x50>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e28:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <MX_I2C1_Init+0x50>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e2e:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <MX_I2C1_Init+0x50>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e34:	4804      	ldr	r0, [pc, #16]	; (8004e48 <MX_I2C1_Init+0x50>)
 8004e36:	f7fd fba1 	bl	800257c <HAL_I2C_Init>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004e40:	f000 fda8 	bl	8005994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004e44:	bf00      	nop
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	2000014c 	.word	0x2000014c
 8004e4c:	40005400 	.word	0x40005400
 8004e50:	000186a0 	.word	0x000186a0

08004e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	605a      	str	r2, [r3, #4]
 8004e64:	609a      	str	r2, [r3, #8]
 8004e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e68:	463b      	mov	r3, r7
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e70:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <MX_TIM2_Init+0x94>)
 8004e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8004e78:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <MX_TIM2_Init+0x94>)
 8004e7a:	2253      	movs	r2, #83	; 0x53
 8004e7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <MX_TIM2_Init+0x94>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004e84:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <MX_TIM2_Init+0x94>)
 8004e86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e8c:	4b16      	ldr	r3, [pc, #88]	; (8004ee8 <MX_TIM2_Init+0x94>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <MX_TIM2_Init+0x94>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e98:	4813      	ldr	r0, [pc, #76]	; (8004ee8 <MX_TIM2_Init+0x94>)
 8004e9a:	f7fe fdb3 	bl	8003a04 <HAL_TIM_Base_Init>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004ea4:	f000 fd76 	bl	8005994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	480c      	ldr	r0, [pc, #48]	; (8004ee8 <MX_TIM2_Init+0x94>)
 8004eb6:	f7fe ff9c 	bl	8003df2 <HAL_TIM_ConfigClockSource>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004ec0:	f000 fd68 	bl	8005994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ecc:	463b      	mov	r3, r7
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4805      	ldr	r0, [pc, #20]	; (8004ee8 <MX_TIM2_Init+0x94>)
 8004ed2:	f7ff f9b7 	bl	8004244 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004edc:	f000 fd5a 	bl	8005994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ee0:	bf00      	nop
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	200001a0 	.word	0x200001a0

08004eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ef0:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004ef2:	4a12      	ldr	r2, [pc, #72]	; (8004f3c <MX_USART2_UART_Init+0x50>)
 8004ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004ef6:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004efe:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f12:	220c      	movs	r2, #12
 8004f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f16:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f22:	4805      	ldr	r0, [pc, #20]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f24:	f7ff fa1e 	bl	8004364 <HAL_UART_Init>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004f2e:	f000 fd31 	bl	8005994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	200001e8 	.word	0x200001e8
 8004f3c:	40004400 	.word	0x40004400

08004f40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	607b      	str	r3, [r7, #4]
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <MX_DMA_Init+0x3c>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	4a0b      	ldr	r2, [pc, #44]	; (8004f7c <MX_DMA_Init+0x3c>)
 8004f50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f54:	6313      	str	r3, [r2, #48]	; 0x30
 8004f56:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <MX_DMA_Init+0x3c>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5e:	607b      	str	r3, [r7, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004f62:	2200      	movs	r2, #0
 8004f64:	2100      	movs	r1, #0
 8004f66:	2038      	movs	r0, #56	; 0x38
 8004f68:	f7fc fd9b 	bl	8001aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004f6c:	2038      	movs	r0, #56	; 0x38
 8004f6e:	f7fc fdb4 	bl	8001ada <HAL_NVIC_EnableIRQ>

}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800

08004f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	605a      	str	r2, [r3, #4]
 8004f90:	609a      	str	r2, [r3, #8]
 8004f92:	60da      	str	r2, [r3, #12]
 8004f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	4b40      	ldr	r3, [pc, #256]	; (800509c <MX_GPIO_Init+0x11c>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	4a3f      	ldr	r2, [pc, #252]	; (800509c <MX_GPIO_Init+0x11c>)
 8004fa0:	f043 0304 	orr.w	r3, r3, #4
 8004fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa6:	4b3d      	ldr	r3, [pc, #244]	; (800509c <MX_GPIO_Init+0x11c>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	4b39      	ldr	r3, [pc, #228]	; (800509c <MX_GPIO_Init+0x11c>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	4a38      	ldr	r2, [pc, #224]	; (800509c <MX_GPIO_Init+0x11c>)
 8004fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fc2:	4b36      	ldr	r3, [pc, #216]	; (800509c <MX_GPIO_Init+0x11c>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	4b32      	ldr	r3, [pc, #200]	; (800509c <MX_GPIO_Init+0x11c>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	4a31      	ldr	r2, [pc, #196]	; (800509c <MX_GPIO_Init+0x11c>)
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fde:	4b2f      	ldr	r3, [pc, #188]	; (800509c <MX_GPIO_Init+0x11c>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	4b2b      	ldr	r3, [pc, #172]	; (800509c <MX_GPIO_Init+0x11c>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	4a2a      	ldr	r2, [pc, #168]	; (800509c <MX_GPIO_Init+0x11c>)
 8004ff4:	f043 0302 	orr.w	r3, r3, #2
 8004ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8004ffa:	4b28      	ldr	r3, [pc, #160]	; (800509c <MX_GPIO_Init+0x11c>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	607b      	str	r3, [r7, #4]
 8005004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005006:	2200      	movs	r2, #0
 8005008:	2120      	movs	r1, #32
 800500a:	4825      	ldr	r0, [pc, #148]	; (80050a0 <MX_GPIO_Init+0x120>)
 800500c:	f7fd fa9c 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005016:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800501a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501c:	2300      	movs	r3, #0
 800501e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005020:	f107 0314 	add.w	r3, r7, #20
 8005024:	4619      	mov	r1, r3
 8005026:	481f      	ldr	r0, [pc, #124]	; (80050a4 <MX_GPIO_Init+0x124>)
 8005028:	f7fd f8e2 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800502c:	2320      	movs	r3, #32
 800502e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005030:	2301      	movs	r3, #1
 8005032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005034:	2300      	movs	r3, #0
 8005036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005038:	2300      	movs	r3, #0
 800503a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800503c:	f107 0314 	add.w	r3, r7, #20
 8005040:	4619      	mov	r1, r3
 8005042:	4817      	ldr	r0, [pc, #92]	; (80050a0 <MX_GPIO_Init+0x120>)
 8005044:	f7fd f8d4 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_B_Pin FOOT_SW_Pin RIGHT_B_Pin LEFT_B_Pin */
  GPIO_InitStruct.Pin = UP_B_Pin|FOOT_SW_Pin|RIGHT_B_Pin|LEFT_B_Pin;
 8005048:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800504c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800504e:	2300      	movs	r3, #0
 8005050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005052:	2301      	movs	r3, #1
 8005054:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005056:	f107 0314 	add.w	r3, r7, #20
 800505a:	4619      	mov	r1, r3
 800505c:	4812      	ldr	r0, [pc, #72]	; (80050a8 <MX_GPIO_Init+0x128>)
 800505e:	f7fd f8c7 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : REM_SIG_Pin */
  GPIO_InitStruct.Pin = REM_SIG_Pin;
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005066:	2300      	movs	r3, #0
 8005068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800506a:	2302      	movs	r3, #2
 800506c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(REM_SIG_GPIO_Port, &GPIO_InitStruct);
 800506e:	f107 0314 	add.w	r3, r7, #20
 8005072:	4619      	mov	r1, r3
 8005074:	480b      	ldr	r0, [pc, #44]	; (80050a4 <MX_GPIO_Init+0x124>)
 8005076:	f7fd f8bb 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOWN_B_Pin */
  GPIO_InitStruct.Pin = DOWN_B_Pin;
 800507a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800507e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005080:	2300      	movs	r3, #0
 8005082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005084:	2301      	movs	r3, #1
 8005086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DOWN_B_GPIO_Port, &GPIO_InitStruct);
 8005088:	f107 0314 	add.w	r3, r7, #20
 800508c:	4619      	mov	r1, r3
 800508e:	4804      	ldr	r0, [pc, #16]	; (80050a0 <MX_GPIO_Init+0x120>)
 8005090:	f7fd f8ae 	bl	80021f0 <HAL_GPIO_Init>

}
 8005094:	bf00      	nop
 8005096:	3728      	adds	r7, #40	; 0x28
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	40020000 	.word	0x40020000
 80050a4:	40020800 	.word	0x40020800
 80050a8:	40020400 	.word	0x40020400

080050ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //タイマー割り込みによって呼び出されるコールバック関数
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	static int phase_flag = 0;
	static float d1;
	static float d2;
	static float d3;

	if(htim->Instance == TIM2){ //割り込みするタイマーがtim2だった場合の処理
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050bc:	f040 80f6 	bne.w	80052ac <HAL_TIM_PeriodElapsedCallback+0x200>
		d1 = d2;
 80050c0:	4b81      	ldr	r3, [pc, #516]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a81      	ldr	r2, [pc, #516]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x220>)
 80050c6:	6013      	str	r3, [r2, #0]
		d2 = d3;
 80050c8:	4b81      	ldr	r3, [pc, #516]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a7e      	ldr	r2, [pc, #504]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80050ce:	6013      	str	r3, [r2, #0]
		d3 = (adcValue[0] - NormalizeParameter[0])/ NormalizeParameter[1]; //Z得点(平均50,標準偏差10の値域に変換したものつまり偏差値)
 80050d0:	4b80      	ldr	r3, [pc, #512]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	ee07 3a90 	vmov	s15, r3
 80050d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050dc:	4b7e      	ldr	r3, [pc, #504]	; (80052d8 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80050de:	edd3 7a00 	vldr	s15, [r3]
 80050e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80050e6:	4b7c      	ldr	r3, [pc, #496]	; (80052d8 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80050e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80050ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050f0:	4b77      	ldr	r3, [pc, #476]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80050f2:	edc3 7a00 	vstr	s15, [r3]

		if(d2 > threshold/100.0f && d1 < d2 && d2 > d3 && tim2_count > 100 && tim2_count > inactive_time && ((int)mode % 2) == 0){ //peak detect
 80050f6:	4b79      	ldr	r3, [pc, #484]	; (80052dc <HAL_TIM_PeriodElapsedCallback+0x230>)
 80050f8:	edd3 7a00 	vldr	s15, [r3]
 80050fc:	eddf 6a78 	vldr	s13, [pc, #480]	; 80052e0 <HAL_TIM_PeriodElapsedCallback+0x234>
 8005100:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005104:	4b70      	ldr	r3, [pc, #448]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005106:	edd3 7a00 	vldr	s15, [r3]
 800510a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005112:	d53c      	bpl.n	800518e <HAL_TIM_PeriodElapsedCallback+0xe2>
 8005114:	4b6d      	ldr	r3, [pc, #436]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x220>)
 8005116:	ed93 7a00 	vldr	s14, [r3]
 800511a:	4b6b      	ldr	r3, [pc, #428]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800511c:	edd3 7a00 	vldr	s15, [r3]
 8005120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	d531      	bpl.n	800518e <HAL_TIM_PeriodElapsedCallback+0xe2>
 800512a:	4b67      	ldr	r3, [pc, #412]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800512c:	ed93 7a00 	vldr	s14, [r3]
 8005130:	4b67      	ldr	r3, [pc, #412]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8005132:	edd3 7a00 	vldr	s15, [r3]
 8005136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800513a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513e:	dd26      	ble.n	800518e <HAL_TIM_PeriodElapsedCallback+0xe2>
 8005140:	4b68      	ldr	r3, [pc, #416]	; (80052e4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b64      	cmp	r3, #100	; 0x64
 8005146:	dd22      	ble.n	800518e <HAL_TIM_PeriodElapsedCallback+0xe2>
 8005148:	4b66      	ldr	r3, [pc, #408]	; (80052e4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005154:	4b64      	ldr	r3, [pc, #400]	; (80052e8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005156:	edd3 7a00 	vldr	s15, [r3]
 800515a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800515e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005162:	dd14      	ble.n	800518e <HAL_TIM_PeriodElapsedCallback+0xe2>
 8005164:	4b61      	ldr	r3, [pc, #388]	; (80052ec <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005166:	edd3 7a00 	vldr	s15, [r3]
 800516a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800516e:	ee17 3a90 	vmov	r3, s15
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <HAL_TIM_PeriodElapsedCallback+0xe2>
			//HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
			tim2_count = 0;
 800517a:	4b5a      	ldr	r3, [pc, #360]	; (80052e4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
			phase_flag = 1;
 8005180:	4b5b      	ldr	r3, [pc, #364]	; (80052f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]
			phase_tim = 0;
 8005186:	4b5b      	ldr	r3, [pc, #364]	; (80052f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	e04d      	b.n	800522a <HAL_TIM_PeriodElapsedCallback+0x17e>

		}else if(d2 < threshold/100.0f && d1 > d2 && d2 < d3 && tim2_count > 100 && tim2_count > inactive_time && ((int)mode % 2) == 1){ //trough detect
 800518e:	4b53      	ldr	r3, [pc, #332]	; (80052dc <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005190:	edd3 7a00 	vldr	s15, [r3]
 8005194:	eddf 6a52 	vldr	s13, [pc, #328]	; 80052e0 <HAL_TIM_PeriodElapsedCallback+0x234>
 8005198:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800519c:	4b4a      	ldr	r3, [pc, #296]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800519e:	edd3 7a00 	vldr	s15, [r3]
 80051a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051aa:	dd3e      	ble.n	800522a <HAL_TIM_PeriodElapsedCallback+0x17e>
 80051ac:	4b47      	ldr	r3, [pc, #284]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x220>)
 80051ae:	ed93 7a00 	vldr	s14, [r3]
 80051b2:	4b45      	ldr	r3, [pc, #276]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80051b4:	edd3 7a00 	vldr	s15, [r3]
 80051b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	dd33      	ble.n	800522a <HAL_TIM_PeriodElapsedCallback+0x17e>
 80051c2:	4b41      	ldr	r3, [pc, #260]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80051c4:	ed93 7a00 	vldr	s14, [r3]
 80051c8:	4b41      	ldr	r3, [pc, #260]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80051ca:	edd3 7a00 	vldr	s15, [r3]
 80051ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d6:	d528      	bpl.n	800522a <HAL_TIM_PeriodElapsedCallback+0x17e>
 80051d8:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b64      	cmp	r3, #100	; 0x64
 80051de:	dd24      	ble.n	800522a <HAL_TIM_PeriodElapsedCallback+0x17e>
 80051e0:	4b40      	ldr	r3, [pc, #256]	; (80052e4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	ee07 3a90 	vmov	s15, r3
 80051e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051ec:	4b3e      	ldr	r3, [pc, #248]	; (80052e8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80051ee:	edd3 7a00 	vldr	s15, [r3]
 80051f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fa:	dd16      	ble.n	800522a <HAL_TIM_PeriodElapsedCallback+0x17e>
 80051fc:	4b3b      	ldr	r3, [pc, #236]	; (80052ec <HAL_TIM_PeriodElapsedCallback+0x240>)
 80051fe:	edd3 7a00 	vldr	s15, [r3]
 8005202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005206:	ee17 3a90 	vmov	r3, s15
 800520a:	2b00      	cmp	r3, #0
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	bfb8      	it	lt
 8005212:	425b      	neglt	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d108      	bne.n	800522a <HAL_TIM_PeriodElapsedCallback+0x17e>
			//HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
			tim2_count = 0;
 8005218:	4b32      	ldr	r3, [pc, #200]	; (80052e4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
			phase_flag = 1;
 800521e:	4b34      	ldr	r3, [pc, #208]	; (80052f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005220:	2201      	movs	r2, #1
 8005222:	601a      	str	r2, [r3, #0]
			phase_tim = 0;
 8005224:	4b33      	ldr	r3, [pc, #204]	; (80052f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]

		}

		if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 0 && phase_flag == 1 && phase_tim > phase_ms){ //phase passed
 800522a:	2120      	movs	r1, #32
 800522c:	4832      	ldr	r0, [pc, #200]	; (80052f8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800522e:	f7fd f973 	bl	8002518 <HAL_GPIO_ReadPin>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d117      	bne.n	8005268 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8005238:	4b2d      	ldr	r3, [pc, #180]	; (80052f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d113      	bne.n	8005268 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8005240:	4b2c      	ldr	r3, [pc, #176]	; (80052f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800524c:	4b2b      	ldr	r3, [pc, #172]	; (80052fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 800524e:	edd3 7a00 	vldr	s15, [r3]
 8005252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800525a:	dd05      	ble.n	8005268 <HAL_TIM_PeriodElapsedCallback+0x1bc>
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 800525c:	2201      	movs	r2, #1
 800525e:	2120      	movs	r1, #32
 8005260:	4825      	ldr	r0, [pc, #148]	; (80052f8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005262:	f7fd f971 	bl	8002548 <HAL_GPIO_WritePin>
 8005266:	e021      	b.n	80052ac <HAL_TIM_PeriodElapsedCallback+0x200>
		}else if(phase_flag == 1 && phase_tim > phase_ms + duration){ //phase+duration passed
 8005268:	4b21      	ldr	r3, [pc, #132]	; (80052f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d11d      	bne.n	80052ac <HAL_TIM_PeriodElapsedCallback+0x200>
 8005270:	4b20      	ldr	r3, [pc, #128]	; (80052f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	ee07 3a90 	vmov	s15, r3
 8005278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800527c:	4b1f      	ldr	r3, [pc, #124]	; (80052fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 800527e:	edd3 6a00 	vldr	s13, [r3]
 8005282:	4b1f      	ldr	r3, [pc, #124]	; (8005300 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005284:	edd3 7a00 	vldr	s15, [r3]
 8005288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005294:	dd0a      	ble.n	80052ac <HAL_TIM_PeriodElapsedCallback+0x200>
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,RESET);
 8005296:	2200      	movs	r2, #0
 8005298:	2120      	movs	r1, #32
 800529a:	4817      	ldr	r0, [pc, #92]	; (80052f8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800529c:	f7fd f954 	bl	8002548 <HAL_GPIO_WritePin>
			phase_flag = 0;
 80052a0:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
			phase_tim = 0;
 80052a6:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
//		}

		/*ここまで玉井の試験用プログラム*/

	}
	tim2_count++;
 80052ac:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3301      	adds	r3, #1
 80052b2:	4a0c      	ldr	r2, [pc, #48]	; (80052e4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80052b4:	6013      	str	r3, [r2, #0]
	phase_tim++; //UserSetUpで事前に設定した位相遅らせ時間phaseとパルス幅durationの合計を超えるまでカウンターを回し続ける。
 80052b6:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3301      	adds	r3, #1
 80052bc:	4a0d      	ldr	r2, [pc, #52]	; (80052f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80052be:	6013      	str	r3, [r2, #0]
}
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000268 	.word	0x20000268
 80052cc:	2000026c 	.word	0x2000026c
 80052d0:	20000270 	.word	0x20000270
 80052d4:	2000022c 	.word	0x2000022c
 80052d8:	20000234 	.word	0x20000234
 80052dc:	20000010 	.word	0x20000010
 80052e0:	42c80000 	.word	0x42c80000
 80052e4:	20000230 	.word	0x20000230
 80052e8:	20000244 	.word	0x20000244
 80052ec:	20000018 	.word	0x20000018
 80052f0:	20000274 	.word	0x20000274
 80052f4:	20000278 	.word	0x20000278
 80052f8:	40020000 	.word	0x40020000
 80052fc:	20000240 	.word	0x20000240
 8005300:	20000014 	.word	0x20000014
 8005304:	00000000 	.word	0x00000000

08005308 <SetUpNormalizeParameter>:

void SetUpNormalizeParameter(float NormalizeParameter[2]){
 8005308:	b5b0      	push	{r4, r5, r7, lr}
 800530a:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	f107 0318 	add.w	r3, r7, #24
 8005316:	f843 0c14 	str.w	r0, [r3, #-20]
	float data[4096] = {0};
 800531a:	f107 0318 	add.w	r3, r7, #24
 800531e:	3b0c      	subs	r3, #12
 8005320:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f000 ff80 	bl	800622c <memset>
	long sum = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8005332:	f102 0214 	add.w	r2, r2, #20
 8005336:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 4096; i++){
 8005338:	2300      	movs	r3, #0
 800533a:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800533e:	f102 0210 	add.w	r2, r2, #16
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	e041      	b.n	80053ca <SetUpNormalizeParameter+0xc2>
		data[i] = adcValue[0];
 8005346:	4b76      	ldr	r3, [pc, #472]	; (8005520 <SetUpNormalizeParameter+0x218>)
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005352:	f107 0318 	add.w	r3, r7, #24
 8005356:	461a      	mov	r2, r3
 8005358:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800535c:	f103 0310 	add.w	r3, r3, #16
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	3b0c      	subs	r3, #12
 8005368:	edc3 7a00 	vstr	s15, [r3]
		sum += data[i];
 800536c:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8005370:	f103 0314 	add.w	r3, r3, #20
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800537e:	f107 0318 	add.w	r3, r7, #24
 8005382:	461a      	mov	r2, r3
 8005384:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8005388:	f103 0310 	add.w	r3, r3, #16
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	3b0c      	subs	r3, #12
 8005394:	edd3 7a00 	vldr	s15, [r3]
 8005398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800539c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053a0:	ee17 3a90 	vmov	r3, s15
 80053a4:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80053a8:	f102 0214 	add.w	r2, r2, #20
 80053ac:	6013      	str	r3, [r2, #0]
		HAL_Delay(1);/*こっから玉井の試験用プログラム*/
 80053ae:	2001      	movs	r0, #1
 80053b0:	f7fb fe56 	bl	8001060 <HAL_Delay>
	for(int i = 0; i < 4096; i++){
 80053b4:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80053b8:	f103 0310 	add.w	r3, r3, #16
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3301      	adds	r3, #1
 80053c0:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80053c4:	f102 0210 	add.w	r2, r2, #16
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80053ce:	f103 0310 	add.w	r3, r3, #16
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d8:	dbb5      	blt.n	8005346 <SetUpNormalizeParameter+0x3e>
	}
	NormalizeParameter[0] = sum/4096.0f; //adcのデータの平均値
 80053da:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80053de:	f103 0314 	add.w	r3, r3, #20
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053ec:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8005524 <SetUpNormalizeParameter+0x21c>
 80053f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053f4:	f107 0318 	add.w	r3, r7, #24
 80053f8:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80053fc:	edc3 7a00 	vstr	s15, [r3]
	sum = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8005406:	f102 0214 	add.w	r2, r2, #20
 800540a:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 4096; i++){
 800540c:	2300      	movs	r3, #0
 800540e:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8005412:	f102 020c 	add.w	r2, r2, #12
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	e046      	b.n	80054a8 <SetUpNormalizeParameter+0x1a0>
		sum += pow(data[i] - NormalizeParameter[0],2);
 800541a:	f107 0318 	add.w	r3, r7, #24
 800541e:	461a      	mov	r2, r3
 8005420:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8005424:	f103 030c 	add.w	r3, r3, #12
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	3b0c      	subs	r3, #12
 8005430:	ed93 7a00 	vldr	s14, [r3]
 8005434:	f107 0318 	add.w	r3, r7, #24
 8005438:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800543c:	edd3 7a00 	vldr	s15, [r3]
 8005440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005444:	ee17 0a90 	vmov	r0, s15
 8005448:	f7fb f896 	bl	8000578 <__aeabi_f2d>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8005510 <SetUpNormalizeParameter+0x208>
 8005454:	ec43 2b10 	vmov	d0, r2, r3
 8005458:	f001 fb5e 	bl	8006b18 <pow>
 800545c:	ec55 4b10 	vmov	r4, r5, d0
 8005460:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8005464:	f103 0314 	add.w	r3, r3, #20
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	f7fb f873 	bl	8000554 <__aeabi_i2d>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4620      	mov	r0, r4
 8005474:	4629      	mov	r1, r5
 8005476:	f7fa ff21 	bl	80002bc <__adddf3>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	f7fb fb81 	bl	8000b88 <__aeabi_d2iz>
 8005486:	4603      	mov	r3, r0
 8005488:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800548c:	f102 0214 	add.w	r2, r2, #20
 8005490:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 4096; i++){
 8005492:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8005496:	f103 030c 	add.w	r3, r3, #12
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80054a2:	f102 020c 	add.w	r2, r2, #12
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80054ac:	f103 030c 	add.w	r3, r3, #12
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b6:	dbb0      	blt.n	800541a <SetUpNormalizeParameter+0x112>
	}
	NormalizeParameter[1] = pow(sum/4096.0f,0.5); //adcのデータの標準偏差
 80054b8:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80054bc:	f103 0314 	add.w	r3, r3, #20
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ca:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005524 <SetUpNormalizeParameter+0x21c>
 80054ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80054d2:	ee16 0a90 	vmov	r0, s13
 80054d6:	f7fb f84f 	bl	8000578 <__aeabi_f2d>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8005518 <SetUpNormalizeParameter+0x210>
 80054e2:	ec43 2b10 	vmov	d0, r2, r3
 80054e6:	f001 fb17 	bl	8006b18 <pow>
 80054ea:	ec51 0b10 	vmov	r0, r1, d0
 80054ee:	f107 0318 	add.w	r3, r7, #24
 80054f2:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80054f6:	1d1c      	adds	r4, r3, #4
 80054f8:	f7fb fb6e 	bl	8000bd8 <__aeabi_d2f>
 80054fc:	4603      	mov	r3, r0
 80054fe:	6023      	str	r3, [r4, #0]
}
 8005500:	bf00      	nop
 8005502:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bdb0      	pop	{r4, r5, r7, pc}
 800550c:	f3af 8000 	nop.w
 8005510:	00000000 	.word	0x00000000
 8005514:	40000000 	.word	0x40000000
 8005518:	00000000 	.word	0x00000000
 800551c:	3fe00000 	.word	0x3fe00000
 8005520:	2000022c 	.word	0x2000022c
 8005524:	45800000 	.word	0x45800000

08005528 <DrawParameter>:

void DrawParameter(int count){
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	char buf[32] = {};
 8005530:	2300      	movs	r3, #0
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	f107 030c 	add.w	r3, r7, #12
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	609a      	str	r2, [r3, #8]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	611a      	str	r2, [r3, #16]
 8005544:	615a      	str	r2, [r3, #20]
 8005546:	619a      	str	r2, [r3, #24]

	ssd1306_Fill(White);
 8005548:	2001      	movs	r0, #1
 800554a:	f000 faaf 	bl	8005aac <ssd1306_Fill>

	ssd1306_SetCursor(0,0);
 800554e:	2100      	movs	r1, #0
 8005550:	2000      	movs	r0, #0
 8005552:	f000 fc05 	bl	8005d60 <ssd1306_SetCursor>
	sprintf(buf,"%sth=%d [%%]",count==0?"*":" ", (int)threshold);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <DrawParameter+0x38>
 800555c:	4a4c      	ldr	r2, [pc, #304]	; (8005690 <DrawParameter+0x168>)
 800555e:	e000      	b.n	8005562 <DrawParameter+0x3a>
 8005560:	4a4c      	ldr	r2, [pc, #304]	; (8005694 <DrawParameter+0x16c>)
 8005562:	4b4d      	ldr	r3, [pc, #308]	; (8005698 <DrawParameter+0x170>)
 8005564:	edd3 7a00 	vldr	s15, [r3]
 8005568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800556c:	f107 0008 	add.w	r0, r7, #8
 8005570:	ee17 3a90 	vmov	r3, s15
 8005574:	4949      	ldr	r1, [pc, #292]	; (800569c <DrawParameter+0x174>)
 8005576:	f000 fe61 	bl	800623c <siprintf>
	ssd1306_WriteString(buf,Font_7x10,Black);
 800557a:	4a49      	ldr	r2, [pc, #292]	; (80056a0 <DrawParameter+0x178>)
 800557c:	f107 0008 	add.w	r0, r7, #8
 8005580:	2300      	movs	r3, #0
 8005582:	ca06      	ldmia	r2, {r1, r2}
 8005584:	f000 fbc6 	bl	8005d14 <ssd1306_WriteString>

	ssd1306_SetCursor(0,12);
 8005588:	210c      	movs	r1, #12
 800558a:	2000      	movs	r0, #0
 800558c:	f000 fbe8 	bl	8005d60 <ssd1306_SetCursor>
	sprintf(buf,"%sdu=%d [ms]",count==1?"*":" ", (int)duration);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <DrawParameter+0x72>
 8005596:	4a3e      	ldr	r2, [pc, #248]	; (8005690 <DrawParameter+0x168>)
 8005598:	e000      	b.n	800559c <DrawParameter+0x74>
 800559a:	4a3e      	ldr	r2, [pc, #248]	; (8005694 <DrawParameter+0x16c>)
 800559c:	4b41      	ldr	r3, [pc, #260]	; (80056a4 <DrawParameter+0x17c>)
 800559e:	edd3 7a00 	vldr	s15, [r3]
 80055a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055a6:	f107 0008 	add.w	r0, r7, #8
 80055aa:	ee17 3a90 	vmov	r3, s15
 80055ae:	493e      	ldr	r1, [pc, #248]	; (80056a8 <DrawParameter+0x180>)
 80055b0:	f000 fe44 	bl	800623c <siprintf>
	ssd1306_WriteString(buf,Font_7x10,Black);
 80055b4:	4a3a      	ldr	r2, [pc, #232]	; (80056a0 <DrawParameter+0x178>)
 80055b6:	f107 0008 	add.w	r0, r7, #8
 80055ba:	2300      	movs	r3, #0
 80055bc:	ca06      	ldmia	r2, {r1, r2}
 80055be:	f000 fba9 	bl	8005d14 <ssd1306_WriteString>

	ssd1306_SetCursor(0,24);
 80055c2:	2118      	movs	r1, #24
 80055c4:	2000      	movs	r0, #0
 80055c6:	f000 fbcb 	bl	8005d60 <ssd1306_SetCursor>
	sprintf(buf,"%sph=%d [deg]",count==2?"*":" ", (int)phase);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d101      	bne.n	80055d4 <DrawParameter+0xac>
 80055d0:	4a2f      	ldr	r2, [pc, #188]	; (8005690 <DrawParameter+0x168>)
 80055d2:	e000      	b.n	80055d6 <DrawParameter+0xae>
 80055d4:	4a2f      	ldr	r2, [pc, #188]	; (8005694 <DrawParameter+0x16c>)
 80055d6:	4b35      	ldr	r3, [pc, #212]	; (80056ac <DrawParameter+0x184>)
 80055d8:	edd3 7a00 	vldr	s15, [r3]
 80055dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055e0:	f107 0008 	add.w	r0, r7, #8
 80055e4:	ee17 3a90 	vmov	r3, s15
 80055e8:	4931      	ldr	r1, [pc, #196]	; (80056b0 <DrawParameter+0x188>)
 80055ea:	f000 fe27 	bl	800623c <siprintf>
	ssd1306_WriteString(buf,Font_7x10,Black);
 80055ee:	4a2c      	ldr	r2, [pc, #176]	; (80056a0 <DrawParameter+0x178>)
 80055f0:	f107 0008 	add.w	r0, r7, #8
 80055f4:	2300      	movs	r3, #0
 80055f6:	ca06      	ldmia	r2, {r1, r2}
 80055f8:	f000 fb8c 	bl	8005d14 <ssd1306_WriteString>

	ssd1306_SetCursor(0,36);
 80055fc:	2124      	movs	r1, #36	; 0x24
 80055fe:	2000      	movs	r0, #0
 8005600:	f000 fbae 	bl	8005d60 <ssd1306_SetCursor>
	sprintf(buf,"%sinactive=%d [ms]",count==3?"*":" ", (int)inactive_time);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b03      	cmp	r3, #3
 8005608:	d101      	bne.n	800560e <DrawParameter+0xe6>
 800560a:	4a21      	ldr	r2, [pc, #132]	; (8005690 <DrawParameter+0x168>)
 800560c:	e000      	b.n	8005610 <DrawParameter+0xe8>
 800560e:	4a21      	ldr	r2, [pc, #132]	; (8005694 <DrawParameter+0x16c>)
 8005610:	4b28      	ldr	r3, [pc, #160]	; (80056b4 <DrawParameter+0x18c>)
 8005612:	edd3 7a00 	vldr	s15, [r3]
 8005616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800561a:	f107 0008 	add.w	r0, r7, #8
 800561e:	ee17 3a90 	vmov	r3, s15
 8005622:	4925      	ldr	r1, [pc, #148]	; (80056b8 <DrawParameter+0x190>)
 8005624:	f000 fe0a 	bl	800623c <siprintf>
	ssd1306_WriteString(buf,Font_7x10,Black);
 8005628:	4a1d      	ldr	r2, [pc, #116]	; (80056a0 <DrawParameter+0x178>)
 800562a:	f107 0008 	add.w	r0, r7, #8
 800562e:	2300      	movs	r3, #0
 8005630:	ca06      	ldmia	r2, {r1, r2}
 8005632:	f000 fb6f 	bl	8005d14 <ssd1306_WriteString>

	ssd1306_SetCursor(0,48);
 8005636:	2130      	movs	r1, #48	; 0x30
 8005638:	2000      	movs	r0, #0
 800563a:	f000 fb91 	bl	8005d60 <ssd1306_SetCursor>
	sprintf(buf,"%smode=%s ",count==4?"*":" ",  ((int)mode % 2) == 1 ? "trough":"peak");
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b04      	cmp	r3, #4
 8005642:	d101      	bne.n	8005648 <DrawParameter+0x120>
 8005644:	4a12      	ldr	r2, [pc, #72]	; (8005690 <DrawParameter+0x168>)
 8005646:	e000      	b.n	800564a <DrawParameter+0x122>
 8005648:	4a12      	ldr	r2, [pc, #72]	; (8005694 <DrawParameter+0x16c>)
 800564a:	4b1c      	ldr	r3, [pc, #112]	; (80056bc <DrawParameter+0x194>)
 800564c:	edd3 7a00 	vldr	s15, [r3]
 8005650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005654:	ee17 3a90 	vmov	r3, s15
 8005658:	2b00      	cmp	r3, #0
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	bfb8      	it	lt
 8005660:	425b      	neglt	r3, r3
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <DrawParameter+0x142>
 8005666:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <DrawParameter+0x198>)
 8005668:	e000      	b.n	800566c <DrawParameter+0x144>
 800566a:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <DrawParameter+0x19c>)
 800566c:	f107 0008 	add.w	r0, r7, #8
 8005670:	4915      	ldr	r1, [pc, #84]	; (80056c8 <DrawParameter+0x1a0>)
 8005672:	f000 fde3 	bl	800623c <siprintf>
	ssd1306_WriteString(buf,Font_7x10,Black);
 8005676:	4a0a      	ldr	r2, [pc, #40]	; (80056a0 <DrawParameter+0x178>)
 8005678:	f107 0008 	add.w	r0, r7, #8
 800567c:	2300      	movs	r3, #0
 800567e:	ca06      	ldmia	r2, {r1, r2}
 8005680:	f000 fb48 	bl	8005d14 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8005684:	f000 fa36 	bl	8005af4 <ssd1306_UpdateScreen>
}
 8005688:	bf00      	nop
 800568a:	3728      	adds	r7, #40	; 0x28
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	08007994 	.word	0x08007994
 8005694:	08007998 	.word	0x08007998
 8005698:	20000010 	.word	0x20000010
 800569c:	0800799c 	.word	0x0800799c
 80056a0:	20000008 	.word	0x20000008
 80056a4:	20000014 	.word	0x20000014
 80056a8:	080079ac 	.word	0x080079ac
 80056ac:	2000023c 	.word	0x2000023c
 80056b0:	080079bc 	.word	0x080079bc
 80056b4:	20000244 	.word	0x20000244
 80056b8:	080079cc 	.word	0x080079cc
 80056bc:	20000018 	.word	0x20000018
 80056c0:	080079e0 	.word	0x080079e0
 80056c4:	080079e8 	.word	0x080079e8
 80056c8:	080079f0 	.word	0x080079f0

080056cc <UserSetUp>:

void UserSetUp(void){ //計測開始前設定処理
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af00      	add	r7, sp, #0

	  char buf[32] = {};
 80056d2:	2300      	movs	r3, #0
 80056d4:	603b      	str	r3, [r7, #0]
 80056d6:	1d3b      	adds	r3, r7, #4
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	609a      	str	r2, [r3, #8]
 80056e0:	60da      	str	r2, [r3, #12]
 80056e2:	611a      	str	r2, [r3, #16]
 80056e4:	615a      	str	r2, [r3, #20]
 80056e6:	619a      	str	r2, [r3, #24]
	  int count = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
	  float *param_pointer;
	  param_pointer = &threshold;
 80056ec:	4b9a      	ldr	r3, [pc, #616]	; (8005958 <UserSetUp+0x28c>)
 80056ee:	623b      	str	r3, [r7, #32]

	  ssd1306_Fill(White);
 80056f0:	2001      	movs	r0, #1
 80056f2:	f000 f9db 	bl	8005aac <ssd1306_Fill>
	  ssd1306_UpdateScreen();
 80056f6:	f000 f9fd 	bl	8005af4 <ssd1306_UpdateScreen>
	  DrawParameter(0);
 80056fa:	2000      	movs	r0, #0
 80056fc:	f7ff ff14 	bl	8005528 <DrawParameter>

	  while(1){ //プッシュボタンによるモード・閾値設定
		if(HAL_GPIO_ReadPin(GPIOB, UP_B_Pin) == 0){ //UP button
 8005700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005704:	4895      	ldr	r0, [pc, #596]	; (800595c <UserSetUp+0x290>)
 8005706:	f7fc ff07 	bl	8002518 <HAL_GPIO_ReadPin>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d13c      	bne.n	800578a <UserSetUp+0xbe>
			switch(count){
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	2b03      	cmp	r3, #3
 8005714:	d01f      	beq.n	8005756 <UserSetUp+0x8a>
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	2b03      	cmp	r3, #3
 800571a:	dc27      	bgt.n	800576c <UserSetUp+0xa0>
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <UserSetUp+0x5e>
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	2b02      	cmp	r3, #2
 8005726:	d00b      	beq.n	8005740 <UserSetUp+0x74>
 8005728:	e020      	b.n	800576c <UserSetUp+0xa0>
				case 0:
					*param_pointer += 1.0f; //change value of destination of pointer
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	edd3 7a00 	vldr	s15, [r3]
 8005730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005734:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	edc3 7a00 	vstr	s15, [r3]
					break;
 800573e:	e020      	b.n	8005782 <UserSetUp+0xb6>
				case 2:
					*param_pointer += 10.0f;
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	edd3 7a00 	vldr	s15, [r3]
 8005746:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800574a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	edc3 7a00 	vstr	s15, [r3]
					break;
 8005754:	e015      	b.n	8005782 <UserSetUp+0xb6>
				case 3:
					*param_pointer += 100.0f;
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	edd3 7a00 	vldr	s15, [r3]
 800575c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8005960 <UserSetUp+0x294>
 8005760:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	edc3 7a00 	vstr	s15, [r3]
					break;
 800576a:	e00a      	b.n	8005782 <UserSetUp+0xb6>
				default:
					*param_pointer += 1.0f;
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	edd3 7a00 	vldr	s15, [r3]
 8005772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005776:	ee77 7a87 	vadd.f32	s15, s15, s14
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	edc3 7a00 	vstr	s15, [r3]
					break;
 8005780:	bf00      	nop
			}
			DrawParameter(count);
 8005782:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005784:	f7ff fed0 	bl	8005528 <DrawParameter>
 8005788:	e7ba      	b.n	8005700 <UserSetUp+0x34>

		}else if(HAL_GPIO_ReadPin(DOWN_B_GPIO_Port, DOWN_B_Pin) == 0){ //down button
 800578a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800578e:	4875      	ldr	r0, [pc, #468]	; (8005964 <UserSetUp+0x298>)
 8005790:	f7fc fec2 	bl	8002518 <HAL_GPIO_ReadPin>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d13c      	bne.n	8005814 <UserSetUp+0x148>
			switch(count){
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	2b03      	cmp	r3, #3
 800579e:	d01f      	beq.n	80057e0 <UserSetUp+0x114>
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	dc27      	bgt.n	80057f6 <UserSetUp+0x12a>
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <UserSetUp+0xe8>
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d00b      	beq.n	80057ca <UserSetUp+0xfe>
 80057b2:	e020      	b.n	80057f6 <UserSetUp+0x12a>
				case 0:
					*param_pointer -= 1.0f;
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	edd3 7a00 	vldr	s15, [r3]
 80057ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	edc3 7a00 	vstr	s15, [r3]
					break;
 80057c8:	e020      	b.n	800580c <UserSetUp+0x140>
				case 2:
					*param_pointer -= 10.0f;
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	edd3 7a00 	vldr	s15, [r3]
 80057d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80057d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	edc3 7a00 	vstr	s15, [r3]
					break;
 80057de:	e015      	b.n	800580c <UserSetUp+0x140>
				case 3:
					*param_pointer -= 100.0f;
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	edd3 7a00 	vldr	s15, [r3]
 80057e6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005960 <UserSetUp+0x294>
 80057ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	edc3 7a00 	vstr	s15, [r3]
					break;
 80057f4:	e00a      	b.n	800580c <UserSetUp+0x140>
				default:
					*param_pointer -= 1.0f;
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	edd3 7a00 	vldr	s15, [r3]
 80057fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005800:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	edc3 7a00 	vstr	s15, [r3]
					break;
 800580a:	bf00      	nop
			}
			DrawParameter(count);
 800580c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800580e:	f7ff fe8b 	bl	8005528 <DrawParameter>
 8005812:	e775      	b.n	8005700 <UserSetUp+0x34>

		}else if(HAL_GPIO_ReadPin(GPIOB, LEFT_B_Pin) == 0){ //left button pressed
 8005814:	2120      	movs	r1, #32
 8005816:	4851      	ldr	r0, [pc, #324]	; (800595c <UserSetUp+0x290>)
 8005818:	f7fc fe7e 	bl	8002518 <HAL_GPIO_ReadPin>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d13c      	bne.n	800589c <UserSetUp+0x1d0>
			count++;
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	3301      	adds	r3, #1
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
			switch(count){
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	2b04      	cmp	r3, #4
 800582c:	d82a      	bhi.n	8005884 <UserSetUp+0x1b8>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UserSetUp+0x168>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	08005849 	.word	0x08005849
 8005838:	08005855 	.word	0x08005855
 800583c:	08005861 	.word	0x08005861
 8005840:	0800586d 	.word	0x0800586d
 8005844:	08005879 	.word	0x08005879
				case 0:
					param_pointer = &threshold; //change pointer destination
 8005848:	4b43      	ldr	r3, [pc, #268]	; (8005958 <UserSetUp+0x28c>)
 800584a:	623b      	str	r3, [r7, #32]
					DrawParameter(count);
 800584c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800584e:	f7ff fe6b 	bl	8005528 <DrawParameter>
					break;
 8005852:	e01f      	b.n	8005894 <UserSetUp+0x1c8>
				case 1:
					param_pointer = &duration;
 8005854:	4b44      	ldr	r3, [pc, #272]	; (8005968 <UserSetUp+0x29c>)
 8005856:	623b      	str	r3, [r7, #32]
					DrawParameter(count);
 8005858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800585a:	f7ff fe65 	bl	8005528 <DrawParameter>
					break;
 800585e:	e019      	b.n	8005894 <UserSetUp+0x1c8>
				case 2:
					param_pointer = &phase;
 8005860:	4b42      	ldr	r3, [pc, #264]	; (800596c <UserSetUp+0x2a0>)
 8005862:	623b      	str	r3, [r7, #32]
					DrawParameter(count);
 8005864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005866:	f7ff fe5f 	bl	8005528 <DrawParameter>
					break;
 800586a:	e013      	b.n	8005894 <UserSetUp+0x1c8>
				case 3:
					param_pointer = &inactive_time;
 800586c:	4b40      	ldr	r3, [pc, #256]	; (8005970 <UserSetUp+0x2a4>)
 800586e:	623b      	str	r3, [r7, #32]
					DrawParameter(count);
 8005870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005872:	f7ff fe59 	bl	8005528 <DrawParameter>
					break;
 8005876:	e00d      	b.n	8005894 <UserSetUp+0x1c8>
				case 4:
					param_pointer = &mode;
 8005878:	4b3e      	ldr	r3, [pc, #248]	; (8005974 <UserSetUp+0x2a8>)
 800587a:	623b      	str	r3, [r7, #32]
					DrawParameter(count);
 800587c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800587e:	f7ff fe53 	bl	8005528 <DrawParameter>
					break;
 8005882:	e007      	b.n	8005894 <UserSetUp+0x1c8>
				default:
					param_pointer = &threshold;
 8005884:	4b34      	ldr	r3, [pc, #208]	; (8005958 <UserSetUp+0x28c>)
 8005886:	623b      	str	r3, [r7, #32]
					count = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
					DrawParameter(count);
 800588c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800588e:	f7ff fe4b 	bl	8005528 <DrawParameter>
					break;
 8005892:	bf00      	nop
			}
			HAL_Delay(100);
 8005894:	2064      	movs	r0, #100	; 0x64
 8005896:	f7fb fbe3 	bl	8001060 <HAL_Delay>
 800589a:	e731      	b.n	8005700 <UserSetUp+0x34>
		}else if(HAL_GPIO_ReadPin(GPIOB, RIGHT_B_Pin) == 0){
 800589c:	2110      	movs	r1, #16
 800589e:	482f      	ldr	r0, [pc, #188]	; (800595c <UserSetUp+0x290>)
 80058a0:	f7fc fe3a 	bl	8002518 <HAL_GPIO_ReadPin>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f47f af2a 	bne.w	8005700 <UserSetUp+0x34>
			sprintf(buf,"Setting Complete");
 80058ac:	463b      	mov	r3, r7
 80058ae:	4932      	ldr	r1, [pc, #200]	; (8005978 <UserSetUp+0x2ac>)
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fcc3 	bl	800623c <siprintf>
			ssd1306_Fill(White);
 80058b6:	2001      	movs	r0, #1
 80058b8:	f000 f8f8 	bl	8005aac <ssd1306_Fill>
			ssd1306_SetCursor(0,0);
 80058bc:	2100      	movs	r1, #0
 80058be:	2000      	movs	r0, #0
 80058c0:	f000 fa4e 	bl	8005d60 <ssd1306_SetCursor>
			ssd1306_WriteString(buf,Font_7x10,Black);
 80058c4:	4a2d      	ldr	r2, [pc, #180]	; (800597c <UserSetUp+0x2b0>)
 80058c6:	4638      	mov	r0, r7
 80058c8:	2300      	movs	r3, #0
 80058ca:	ca06      	ldmia	r2, {r1, r2}
 80058cc:	f000 fa22 	bl	8005d14 <ssd1306_WriteString>

			sprintf(buf,"Waiting for Learning");
 80058d0:	463b      	mov	r3, r7
 80058d2:	492b      	ldr	r1, [pc, #172]	; (8005980 <UserSetUp+0x2b4>)
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fcb1 	bl	800623c <siprintf>
			ssd1306_SetCursor(0,12);
 80058da:	210c      	movs	r1, #12
 80058dc:	2000      	movs	r0, #0
 80058de:	f000 fa3f 	bl	8005d60 <ssd1306_SetCursor>
			ssd1306_WriteString(buf,Font_7x10,Black);
 80058e2:	4a26      	ldr	r2, [pc, #152]	; (800597c <UserSetUp+0x2b0>)
 80058e4:	4638      	mov	r0, r7
 80058e6:	2300      	movs	r3, #0
 80058e8:	ca06      	ldmia	r2, {r1, r2}
 80058ea:	f000 fa13 	bl	8005d14 <ssd1306_WriteString>

			ssd1306_UpdateScreen();
 80058ee:	f000 f901 	bl	8005af4 <ssd1306_UpdateScreen>
			HAL_Delay(500);
 80058f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058f6:	f7fb fbb3 	bl	8001060 <HAL_Delay>
			break;
		}
	  }
	  while(1){
		  if(HAL_GPIO_ReadPin(GPIOB, RIGHT_B_Pin) == 0){
 80058fa:	2110      	movs	r1, #16
 80058fc:	4817      	ldr	r0, [pc, #92]	; (800595c <UserSetUp+0x290>)
 80058fe:	f7fc fe0b 	bl	8002518 <HAL_GPIO_ReadPin>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f8      	bne.n	80058fa <UserSetUp+0x22e>
			  sprintf(buf,"Learning...");
 8005908:	463b      	mov	r3, r7
 800590a:	491e      	ldr	r1, [pc, #120]	; (8005984 <UserSetUp+0x2b8>)
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fc95 	bl	800623c <siprintf>
			  ssd1306_Fill(White);
 8005912:	2001      	movs	r0, #1
 8005914:	f000 f8ca 	bl	8005aac <ssd1306_Fill>
			  ssd1306_SetCursor(0,0);
 8005918:	2100      	movs	r1, #0
 800591a:	2000      	movs	r0, #0
 800591c:	f000 fa20 	bl	8005d60 <ssd1306_SetCursor>
			  ssd1306_WriteString(buf,Font_7x10,Black);
 8005920:	4a16      	ldr	r2, [pc, #88]	; (800597c <UserSetUp+0x2b0>)
 8005922:	4638      	mov	r0, r7
 8005924:	2300      	movs	r3, #0
 8005926:	ca06      	ldmia	r2, {r1, r2}
 8005928:	f000 f9f4 	bl	8005d14 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 800592c:	f000 f8e2 	bl	8005af4 <ssd1306_UpdateScreen>
			  break;
 8005930:	bf00      	nop
		  }
	  }
	  phase_ms = (phase/360.0f)*142.0f;
 8005932:	4b0e      	ldr	r3, [pc, #56]	; (800596c <UserSetUp+0x2a0>)
 8005934:	ed93 7a00 	vldr	s14, [r3]
 8005938:	eddf 6a13 	vldr	s13, [pc, #76]	; 8005988 <UserSetUp+0x2bc>
 800593c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005940:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800598c <UserSetUp+0x2c0>
 8005944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005948:	4b11      	ldr	r3, [pc, #68]	; (8005990 <UserSetUp+0x2c4>)
 800594a:	edc3 7a00 	vstr	s15, [r3]
}
 800594e:	bf00      	nop
 8005950:	3728      	adds	r7, #40	; 0x28
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20000010 	.word	0x20000010
 800595c:	40020400 	.word	0x40020400
 8005960:	42c80000 	.word	0x42c80000
 8005964:	40020000 	.word	0x40020000
 8005968:	20000014 	.word	0x20000014
 800596c:	2000023c 	.word	0x2000023c
 8005970:	20000244 	.word	0x20000244
 8005974:	20000018 	.word	0x20000018
 8005978:	080079fc 	.word	0x080079fc
 800597c:	20000008 	.word	0x20000008
 8005980:	08007a10 	.word	0x08007a10
 8005984:	08007a28 	.word	0x08007a28
 8005988:	43b40000 	.word	0x43b40000
 800598c:	430e0000 	.word	0x430e0000
 8005990:	20000240 	.word	0x20000240

08005994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
	...

080059a4 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af04      	add	r7, sp, #16
 80059aa:	4603      	mov	r3, r0
 80059ac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80059ae:	230a      	movs	r3, #10
 80059b0:	9302      	str	r3, [sp, #8]
 80059b2:	2301      	movs	r3, #1
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	1dfb      	adds	r3, r7, #7
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	2301      	movs	r3, #1
 80059bc:	2200      	movs	r2, #0
 80059be:	2178      	movs	r1, #120	; 0x78
 80059c0:	4803      	ldr	r0, [pc, #12]	; (80059d0 <ssd1306_WriteCommand+0x2c>)
 80059c2:	f7fc ff1f 	bl	8002804 <HAL_I2C_Mem_Write>
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	2000014c 	.word	0x2000014c

080059d4 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80059d8:	2064      	movs	r0, #100	; 0x64
 80059da:	f7fb fb41 	bl	8001060 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80059de:	20ae      	movs	r0, #174	; 0xae
 80059e0:	f7ff ffe0 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80059e4:	2020      	movs	r0, #32
 80059e6:	f7ff ffdd 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80059ea:	2010      	movs	r0, #16
 80059ec:	f7ff ffda 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80059f0:	20b0      	movs	r0, #176	; 0xb0
 80059f2:	f7ff ffd7 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80059f6:	20c8      	movs	r0, #200	; 0xc8
 80059f8:	f7ff ffd4 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80059fc:	2000      	movs	r0, #0
 80059fe:	f7ff ffd1 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8005a02:	2010      	movs	r0, #16
 8005a04:	f7ff ffce 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8005a08:	2040      	movs	r0, #64	; 0x40
 8005a0a:	f7ff ffcb 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8005a0e:	2081      	movs	r0, #129	; 0x81
 8005a10:	f7ff ffc8 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8005a14:	20ff      	movs	r0, #255	; 0xff
 8005a16:	f7ff ffc5 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8005a1a:	20a1      	movs	r0, #161	; 0xa1
 8005a1c:	f7ff ffc2 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8005a20:	20a6      	movs	r0, #166	; 0xa6
 8005a22:	f7ff ffbf 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8005a26:	20a8      	movs	r0, #168	; 0xa8
 8005a28:	f7ff ffbc 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8005a2c:	203f      	movs	r0, #63	; 0x3f
 8005a2e:	f7ff ffb9 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005a32:	20a4      	movs	r0, #164	; 0xa4
 8005a34:	f7ff ffb6 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8005a38:	20d3      	movs	r0, #211	; 0xd3
 8005a3a:	f7ff ffb3 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8005a3e:	2000      	movs	r0, #0
 8005a40:	f7ff ffb0 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005a44:	20d5      	movs	r0, #213	; 0xd5
 8005a46:	f7ff ffad 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005a4a:	20f0      	movs	r0, #240	; 0xf0
 8005a4c:	f7ff ffaa 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005a50:	20d9      	movs	r0, #217	; 0xd9
 8005a52:	f7ff ffa7 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8005a56:	2022      	movs	r0, #34	; 0x22
 8005a58:	f7ff ffa4 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8005a5c:	20da      	movs	r0, #218	; 0xda
 8005a5e:	f7ff ffa1 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8005a62:	2012      	movs	r0, #18
 8005a64:	f7ff ff9e 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8005a68:	20db      	movs	r0, #219	; 0xdb
 8005a6a:	f7ff ff9b 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005a6e:	2020      	movs	r0, #32
 8005a70:	f7ff ff98 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005a74:	208d      	movs	r0, #141	; 0x8d
 8005a76:	f7ff ff95 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8005a7a:	2014      	movs	r0, #20
 8005a7c:	f7ff ff92 	bl	80059a4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8005a80:	20af      	movs	r0, #175	; 0xaf
 8005a82:	f7ff ff8f 	bl	80059a4 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8005a86:	2000      	movs	r0, #0
 8005a88:	f000 f810 	bl	8005aac <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8005a8c:	f000 f832 	bl	8005af4 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <ssd1306_Init+0xd4>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8005a96:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <ssd1306_Init+0xd4>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8005a9c:	4b02      	ldr	r3, [pc, #8]	; (8005aa8 <ssd1306_Init+0xd4>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8005aa2:	2301      	movs	r3, #1
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	2000067c 	.word	0x2000067c

08005aac <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	e00d      	b.n	8005ad8 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <ssd1306_Fill+0x1a>
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	e000      	b.n	8005ac8 <ssd1306_Fill+0x1c>
 8005ac6:	21ff      	movs	r1, #255	; 0xff
 8005ac8:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <ssd1306_Fill+0x44>)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4413      	add	r3, r2
 8005ace:	460a      	mov	r2, r1
 8005ad0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ade:	d3ed      	bcc.n	8005abc <ssd1306_Fill+0x10>
	}
}
 8005ae0:	bf00      	nop
 8005ae2:	bf00      	nop
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	2000027c 	.word	0x2000027c

08005af4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8005afa:	2300      	movs	r3, #0
 8005afc:	71fb      	strb	r3, [r7, #7]
 8005afe:	e01d      	b.n	8005b3c <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	3b50      	subs	r3, #80	; 0x50
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff ff4c 	bl	80059a4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	f7ff ff49 	bl	80059a4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8005b12:	2010      	movs	r0, #16
 8005b14:	f7ff ff46 	bl	80059a4 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	01db      	lsls	r3, r3, #7
 8005b1c:	4a0b      	ldr	r2, [pc, #44]	; (8005b4c <ssd1306_UpdateScreen+0x58>)
 8005b1e:	4413      	add	r3, r2
 8005b20:	2264      	movs	r2, #100	; 0x64
 8005b22:	9202      	str	r2, [sp, #8]
 8005b24:	2280      	movs	r2, #128	; 0x80
 8005b26:	9201      	str	r2, [sp, #4]
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	2240      	movs	r2, #64	; 0x40
 8005b2e:	2178      	movs	r1, #120	; 0x78
 8005b30:	4807      	ldr	r0, [pc, #28]	; (8005b50 <ssd1306_UpdateScreen+0x5c>)
 8005b32:	f7fc fe67 	bl	8002804 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	71fb      	strb	r3, [r7, #7]
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	2b07      	cmp	r3, #7
 8005b40:	d9de      	bls.n	8005b00 <ssd1306_UpdateScreen+0xc>
	}
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	2000027c 	.word	0x2000027c
 8005b50:	2000014c 	.word	0x2000014c

08005b54 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	71fb      	strb	r3, [r7, #7]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	71bb      	strb	r3, [r7, #6]
 8005b62:	4613      	mov	r3, r2
 8005b64:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8005b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	db48      	blt.n	8005c00 <ssd1306_DrawPixel+0xac>
 8005b6e:	79bb      	ldrb	r3, [r7, #6]
 8005b70:	2b3f      	cmp	r3, #63	; 0x3f
 8005b72:	d845      	bhi.n	8005c00 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 8005b74:	4b25      	ldr	r3, [pc, #148]	; (8005c0c <ssd1306_DrawPixel+0xb8>)
 8005b76:	791b      	ldrb	r3, [r3, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d006      	beq.n	8005b8a <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8005b7c:	797b      	ldrb	r3, [r7, #5]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bf0c      	ite	eq
 8005b82:	2301      	moveq	r3, #1
 8005b84:	2300      	movne	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 8005b8a:	797b      	ldrb	r3, [r7, #5]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d11a      	bne.n	8005bc6 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005b90:	79fa      	ldrb	r2, [r7, #7]
 8005b92:	79bb      	ldrb	r3, [r7, #6]
 8005b94:	08db      	lsrs	r3, r3, #3
 8005b96:	b2d8      	uxtb	r0, r3
 8005b98:	4603      	mov	r3, r0
 8005b9a:	01db      	lsls	r3, r3, #7
 8005b9c:	4413      	add	r3, r2
 8005b9e:	4a1c      	ldr	r2, [pc, #112]	; (8005c10 <ssd1306_DrawPixel+0xbc>)
 8005ba0:	5cd3      	ldrb	r3, [r2, r3]
 8005ba2:	b25a      	sxtb	r2, r3
 8005ba4:	79bb      	ldrb	r3, [r7, #6]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	2101      	movs	r1, #1
 8005bac:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb0:	b25b      	sxtb	r3, r3
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	b259      	sxtb	r1, r3
 8005bb6:	79fa      	ldrb	r2, [r7, #7]
 8005bb8:	4603      	mov	r3, r0
 8005bba:	01db      	lsls	r3, r3, #7
 8005bbc:	4413      	add	r3, r2
 8005bbe:	b2c9      	uxtb	r1, r1
 8005bc0:	4a13      	ldr	r2, [pc, #76]	; (8005c10 <ssd1306_DrawPixel+0xbc>)
 8005bc2:	54d1      	strb	r1, [r2, r3]
 8005bc4:	e01d      	b.n	8005c02 <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005bc6:	79fa      	ldrb	r2, [r7, #7]
 8005bc8:	79bb      	ldrb	r3, [r7, #6]
 8005bca:	08db      	lsrs	r3, r3, #3
 8005bcc:	b2d8      	uxtb	r0, r3
 8005bce:	4603      	mov	r3, r0
 8005bd0:	01db      	lsls	r3, r3, #7
 8005bd2:	4413      	add	r3, r2
 8005bd4:	4a0e      	ldr	r2, [pc, #56]	; (8005c10 <ssd1306_DrawPixel+0xbc>)
 8005bd6:	5cd3      	ldrb	r3, [r2, r3]
 8005bd8:	b25a      	sxtb	r2, r3
 8005bda:	79bb      	ldrb	r3, [r7, #6]
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	2101      	movs	r1, #1
 8005be2:	fa01 f303 	lsl.w	r3, r1, r3
 8005be6:	b25b      	sxtb	r3, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	b25b      	sxtb	r3, r3
 8005bec:	4013      	ands	r3, r2
 8005bee:	b259      	sxtb	r1, r3
 8005bf0:	79fa      	ldrb	r2, [r7, #7]
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	01db      	lsls	r3, r3, #7
 8005bf6:	4413      	add	r3, r2
 8005bf8:	b2c9      	uxtb	r1, r1
 8005bfa:	4a05      	ldr	r2, [pc, #20]	; (8005c10 <ssd1306_DrawPixel+0xbc>)
 8005bfc:	54d1      	strb	r1, [r2, r3]
 8005bfe:	e000      	b.n	8005c02 <ssd1306_DrawPixel+0xae>
		return;
 8005c00:	bf00      	nop
	}
}
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	2000067c 	.word	0x2000067c
 8005c10:	2000027c 	.word	0x2000027c

08005c14 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8005c14:	b590      	push	{r4, r7, lr}
 8005c16:	b089      	sub	sp, #36	; 0x24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	1d38      	adds	r0, r7, #4
 8005c1e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005c22:	461a      	mov	r2, r3
 8005c24:	4623      	mov	r3, r4
 8005c26:	73fb      	strb	r3, [r7, #15]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005c2c:	4b38      	ldr	r3, [pc, #224]	; (8005d10 <ssd1306_WriteChar+0xfc>)
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	793b      	ldrb	r3, [r7, #4]
 8005c34:	4413      	add	r3, r2
 8005c36:	2b7f      	cmp	r3, #127	; 0x7f
 8005c38:	dc06      	bgt.n	8005c48 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8005c3a:	4b35      	ldr	r3, [pc, #212]	; (8005d10 <ssd1306_WriteChar+0xfc>)
 8005c3c:	885b      	ldrh	r3, [r3, #2]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	797b      	ldrb	r3, [r7, #5]
 8005c42:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005c44:	2b3f      	cmp	r3, #63	; 0x3f
 8005c46:	dd01      	ble.n	8005c4c <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e05d      	b.n	8005d08 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	e04c      	b.n	8005cec <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	3b20      	subs	r3, #32
 8005c58:	7979      	ldrb	r1, [r7, #5]
 8005c5a:	fb01 f303 	mul.w	r3, r1, r3
 8005c5e:	4619      	mov	r1, r3
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	440b      	add	r3, r1
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	e034      	b.n	8005cdc <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d012      	beq.n	8005ca8 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005c82:	4b23      	ldr	r3, [pc, #140]	; (8005d10 <ssd1306_WriteChar+0xfc>)
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	4413      	add	r3, r2
 8005c8e:	b2d8      	uxtb	r0, r3
 8005c90:	4b1f      	ldr	r3, [pc, #124]	; (8005d10 <ssd1306_WriteChar+0xfc>)
 8005c92:	885b      	ldrh	r3, [r3, #2]
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	7bba      	ldrb	r2, [r7, #14]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	f7ff ff57 	bl	8005b54 <ssd1306_DrawPixel>
 8005ca6:	e016      	b.n	8005cd6 <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005ca8:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <ssd1306_WriteChar+0xfc>)
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	4413      	add	r3, r2
 8005cb4:	b2d8      	uxtb	r0, r3
 8005cb6:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <ssd1306_WriteChar+0xfc>)
 8005cb8:	885b      	ldrh	r3, [r3, #2]
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	b2d9      	uxtb	r1, r3
 8005cc4:	7bbb      	ldrb	r3, [r7, #14]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bf0c      	ite	eq
 8005cca:	2301      	moveq	r3, #1
 8005ccc:	2300      	movne	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f7ff ff3f 	bl	8005b54 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	793b      	ldrb	r3, [r7, #4]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d3c5      	bcc.n	8005c72 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	797b      	ldrb	r3, [r7, #5]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d3ad      	bcc.n	8005c52 <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8005cf6:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <ssd1306_WriteChar+0xfc>)
 8005cf8:	881a      	ldrh	r2, [r3, #0]
 8005cfa:	793b      	ldrb	r3, [r7, #4]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	4b03      	ldr	r3, [pc, #12]	; (8005d10 <ssd1306_WriteChar+0xfc>)
 8005d04:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3724      	adds	r7, #36	; 0x24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd90      	pop	{r4, r7, pc}
 8005d10:	2000067c 	.word	0x2000067c

08005d14 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	1d38      	adds	r0, r7, #4
 8005d1e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005d22:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 8005d24:	e012      	b.n	8005d4c <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	7818      	ldrb	r0, [r3, #0]
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	1d3a      	adds	r2, r7, #4
 8005d2e:	ca06      	ldmia	r2, {r1, r2}
 8005d30:	f7ff ff70 	bl	8005c14 <ssd1306_WriteChar>
 8005d34:	4603      	mov	r3, r0
 8005d36:	461a      	mov	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d002      	beq.n	8005d46 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	e008      	b.n	8005d58 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e8      	bne.n	8005d26 <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	781b      	ldrb	r3, [r3, #0]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	460a      	mov	r2, r1
 8005d6a:	71fb      	strb	r3, [r7, #7]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <ssd1306_SetCursor+0x2c>)
 8005d76:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8005d78:	79bb      	ldrb	r3, [r7, #6]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	4b03      	ldr	r3, [pc, #12]	; (8005d8c <ssd1306_SetCursor+0x2c>)
 8005d7e:	805a      	strh	r2, [r3, #2]
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	2000067c 	.word	0x2000067c

08005d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d96:	2300      	movs	r3, #0
 8005d98:	607b      	str	r3, [r7, #4]
 8005d9a:	4b10      	ldr	r3, [pc, #64]	; (8005ddc <HAL_MspInit+0x4c>)
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	4a0f      	ldr	r2, [pc, #60]	; (8005ddc <HAL_MspInit+0x4c>)
 8005da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005da4:	6453      	str	r3, [r2, #68]	; 0x44
 8005da6:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <HAL_MspInit+0x4c>)
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dae:	607b      	str	r3, [r7, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005db2:	2300      	movs	r3, #0
 8005db4:	603b      	str	r3, [r7, #0]
 8005db6:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <HAL_MspInit+0x4c>)
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	4a08      	ldr	r2, [pc, #32]	; (8005ddc <HAL_MspInit+0x4c>)
 8005dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005dc2:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <HAL_MspInit+0x4c>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005dce:	2007      	movs	r0, #7
 8005dd0:	f7fb fe5c 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dd4:	bf00      	nop
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40023800 	.word	0x40023800

08005de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005de8:	f107 0314 	add.w	r3, r7, #20
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	605a      	str	r2, [r3, #4]
 8005df2:	609a      	str	r2, [r3, #8]
 8005df4:	60da      	str	r2, [r3, #12]
 8005df6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a2f      	ldr	r2, [pc, #188]	; (8005ebc <HAL_ADC_MspInit+0xdc>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d157      	bne.n	8005eb2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005e02:	2300      	movs	r3, #0
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	4b2e      	ldr	r3, [pc, #184]	; (8005ec0 <HAL_ADC_MspInit+0xe0>)
 8005e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0a:	4a2d      	ldr	r2, [pc, #180]	; (8005ec0 <HAL_ADC_MspInit+0xe0>)
 8005e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e10:	6453      	str	r3, [r2, #68]	; 0x44
 8005e12:	4b2b      	ldr	r3, [pc, #172]	; (8005ec0 <HAL_ADC_MspInit+0xe0>)
 8005e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	4b27      	ldr	r3, [pc, #156]	; (8005ec0 <HAL_ADC_MspInit+0xe0>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	4a26      	ldr	r2, [pc, #152]	; (8005ec0 <HAL_ADC_MspInit+0xe0>)
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e2e:	4b24      	ldr	r3, [pc, #144]	; (8005ec0 <HAL_ADC_MspInit+0xe0>)
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e46:	f107 0314 	add.w	r3, r7, #20
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	481d      	ldr	r0, [pc, #116]	; (8005ec4 <HAL_ADC_MspInit+0xe4>)
 8005e4e:	f7fc f9cf 	bl	80021f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005e52:	4b1d      	ldr	r3, [pc, #116]	; (8005ec8 <HAL_ADC_MspInit+0xe8>)
 8005e54:	4a1d      	ldr	r2, [pc, #116]	; (8005ecc <HAL_ADC_MspInit+0xec>)
 8005e56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005e58:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <HAL_ADC_MspInit+0xe8>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e5e:	4b1a      	ldr	r3, [pc, #104]	; (8005ec8 <HAL_ADC_MspInit+0xe8>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e64:	4b18      	ldr	r3, [pc, #96]	; (8005ec8 <HAL_ADC_MspInit+0xe8>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005e6a:	4b17      	ldr	r3, [pc, #92]	; (8005ec8 <HAL_ADC_MspInit+0xe8>)
 8005e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e72:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <HAL_ADC_MspInit+0xe8>)
 8005e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e7a:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <HAL_ADC_MspInit+0xe8>)
 8005e7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005e82:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <HAL_ADC_MspInit+0xe8>)
 8005e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005e8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <HAL_ADC_MspInit+0xe8>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e90:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <HAL_ADC_MspInit+0xe8>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e96:	480c      	ldr	r0, [pc, #48]	; (8005ec8 <HAL_ADC_MspInit+0xe8>)
 8005e98:	f7fb fe3a 	bl	8001b10 <HAL_DMA_Init>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005ea2:	f7ff fd77 	bl	8005994 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a07      	ldr	r2, [pc, #28]	; (8005ec8 <HAL_ADC_MspInit+0xe8>)
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38
 8005eac:	4a06      	ldr	r2, [pc, #24]	; (8005ec8 <HAL_ADC_MspInit+0xe8>)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005eb2:	bf00      	nop
 8005eb4:	3728      	adds	r7, #40	; 0x28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40012000 	.word	0x40012000
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	40020000 	.word	0x40020000
 8005ec8:	200000ec 	.word	0x200000ec
 8005ecc:	40026410 	.word	0x40026410

08005ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08a      	sub	sp, #40	; 0x28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ed8:	f107 0314 	add.w	r3, r7, #20
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	605a      	str	r2, [r3, #4]
 8005ee2:	609a      	str	r2, [r3, #8]
 8005ee4:	60da      	str	r2, [r3, #12]
 8005ee6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a19      	ldr	r2, [pc, #100]	; (8005f54 <HAL_I2C_MspInit+0x84>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d12c      	bne.n	8005f4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	4b18      	ldr	r3, [pc, #96]	; (8005f58 <HAL_I2C_MspInit+0x88>)
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <HAL_I2C_MspInit+0x88>)
 8005efc:	f043 0302 	orr.w	r3, r3, #2
 8005f00:	6313      	str	r3, [r2, #48]	; 0x30
 8005f02:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <HAL_I2C_MspInit+0x88>)
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	613b      	str	r3, [r7, #16]
 8005f0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005f0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f14:	2312      	movs	r3, #18
 8005f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f20:	2304      	movs	r3, #4
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f24:	f107 0314 	add.w	r3, r7, #20
 8005f28:	4619      	mov	r1, r3
 8005f2a:	480c      	ldr	r0, [pc, #48]	; (8005f5c <HAL_I2C_MspInit+0x8c>)
 8005f2c:	f7fc f960 	bl	80021f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <HAL_I2C_MspInit+0x88>)
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	4a07      	ldr	r2, [pc, #28]	; (8005f58 <HAL_I2C_MspInit+0x88>)
 8005f3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <HAL_I2C_MspInit+0x88>)
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005f4c:	bf00      	nop
 8005f4e:	3728      	adds	r7, #40	; 0x28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40005400 	.word	0x40005400
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	40020400 	.word	0x40020400

08005f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f70:	d115      	bne.n	8005f9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <HAL_TIM_Base_MspInit+0x48>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	4a0b      	ldr	r2, [pc, #44]	; (8005fa8 <HAL_TIM_Base_MspInit+0x48>)
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	6413      	str	r3, [r2, #64]	; 0x40
 8005f82:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <HAL_TIM_Base_MspInit+0x48>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2100      	movs	r1, #0
 8005f92:	201c      	movs	r0, #28
 8005f94:	f7fb fd85 	bl	8001aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005f98:	201c      	movs	r0, #28
 8005f9a:	f7fb fd9e 	bl	8001ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005f9e:	bf00      	nop
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40023800 	.word	0x40023800

08005fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	; 0x28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb4:	f107 0314 	add.w	r3, r7, #20
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	605a      	str	r2, [r3, #4]
 8005fbe:	609a      	str	r2, [r3, #8]
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a19      	ldr	r2, [pc, #100]	; (8006030 <HAL_UART_MspInit+0x84>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d12b      	bne.n	8006026 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	4b18      	ldr	r3, [pc, #96]	; (8006034 <HAL_UART_MspInit+0x88>)
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	4a17      	ldr	r2, [pc, #92]	; (8006034 <HAL_UART_MspInit+0x88>)
 8005fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8005fde:	4b15      	ldr	r3, [pc, #84]	; (8006034 <HAL_UART_MspInit+0x88>)
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe6:	613b      	str	r3, [r7, #16]
 8005fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	4b11      	ldr	r3, [pc, #68]	; (8006034 <HAL_UART_MspInit+0x88>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	4a10      	ldr	r2, [pc, #64]	; (8006034 <HAL_UART_MspInit+0x88>)
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8005ffa:	4b0e      	ldr	r3, [pc, #56]	; (8006034 <HAL_UART_MspInit+0x88>)
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006006:	230c      	movs	r3, #12
 8006008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800600a:	2302      	movs	r3, #2
 800600c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800600e:	2300      	movs	r3, #0
 8006010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006012:	2303      	movs	r3, #3
 8006014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006016:	2307      	movs	r3, #7
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800601a:	f107 0314 	add.w	r3, r7, #20
 800601e:	4619      	mov	r1, r3
 8006020:	4805      	ldr	r0, [pc, #20]	; (8006038 <HAL_UART_MspInit+0x8c>)
 8006022:	f7fc f8e5 	bl	80021f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006026:	bf00      	nop
 8006028:	3728      	adds	r7, #40	; 0x28
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40004400 	.word	0x40004400
 8006034:	40023800 	.word	0x40023800
 8006038:	40020000 	.word	0x40020000

0800603c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006040:	bf00      	nop
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800604a:	b480      	push	{r7}
 800604c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800604e:	e7fe      	b.n	800604e <HardFault_Handler+0x4>

08006050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006050:	b480      	push	{r7}
 8006052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006054:	e7fe      	b.n	8006054 <MemManage_Handler+0x4>

08006056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006056:	b480      	push	{r7}
 8006058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800605a:	e7fe      	b.n	800605a <BusFault_Handler+0x4>

0800605c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006060:	e7fe      	b.n	8006060 <UsageFault_Handler+0x4>

08006062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006062:	b480      	push	{r7}
 8006064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006066:	bf00      	nop
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006074:	bf00      	nop
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800607e:	b480      	push	{r7}
 8006080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006082:	bf00      	nop
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006090:	f7fa ffc6 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006094:	bf00      	nop
 8006096:	bd80      	pop	{r7, pc}

08006098 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800609c:	4802      	ldr	r0, [pc, #8]	; (80060a8 <TIM2_IRQHandler+0x10>)
 800609e:	f7fd fda0 	bl	8003be2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80060a2:	bf00      	nop
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	200001a0 	.word	0x200001a0

080060ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80060b0:	4802      	ldr	r0, [pc, #8]	; (80060bc <DMA2_Stream0_IRQHandler+0x10>)
 80060b2:	f7fb fe33 	bl	8001d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80060b6:	bf00      	nop
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	200000ec 	.word	0x200000ec

080060c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80060c8:	4b11      	ldr	r3, [pc, #68]	; (8006110 <_sbrk+0x50>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <_sbrk+0x16>
		heap_end = &end;
 80060d0:	4b0f      	ldr	r3, [pc, #60]	; (8006110 <_sbrk+0x50>)
 80060d2:	4a10      	ldr	r2, [pc, #64]	; (8006114 <_sbrk+0x54>)
 80060d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80060d6:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <_sbrk+0x50>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80060dc:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <_sbrk+0x50>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4413      	add	r3, r2
 80060e4:	466a      	mov	r2, sp
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d907      	bls.n	80060fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80060ea:	f000 f875 	bl	80061d8 <__errno>
 80060ee:	4603      	mov	r3, r0
 80060f0:	220c      	movs	r2, #12
 80060f2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80060f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060f8:	e006      	b.n	8006108 <_sbrk+0x48>
	}

	heap_end += incr;
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <_sbrk+0x50>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4413      	add	r3, r2
 8006102:	4a03      	ldr	r2, [pc, #12]	; (8006110 <_sbrk+0x50>)
 8006104:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006106:	68fb      	ldr	r3, [r7, #12]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000684 	.word	0x20000684
 8006114:	20000698 	.word	0x20000698

08006118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800611c:	4b16      	ldr	r3, [pc, #88]	; (8006178 <SystemInit+0x60>)
 800611e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006122:	4a15      	ldr	r2, [pc, #84]	; (8006178 <SystemInit+0x60>)
 8006124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800612c:	4b13      	ldr	r3, [pc, #76]	; (800617c <SystemInit+0x64>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a12      	ldr	r2, [pc, #72]	; (800617c <SystemInit+0x64>)
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006138:	4b10      	ldr	r3, [pc, #64]	; (800617c <SystemInit+0x64>)
 800613a:	2200      	movs	r2, #0
 800613c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800613e:	4b0f      	ldr	r3, [pc, #60]	; (800617c <SystemInit+0x64>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a0e      	ldr	r2, [pc, #56]	; (800617c <SystemInit+0x64>)
 8006144:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800614c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800614e:	4b0b      	ldr	r3, [pc, #44]	; (800617c <SystemInit+0x64>)
 8006150:	4a0b      	ldr	r2, [pc, #44]	; (8006180 <SystemInit+0x68>)
 8006152:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006154:	4b09      	ldr	r3, [pc, #36]	; (800617c <SystemInit+0x64>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a08      	ldr	r2, [pc, #32]	; (800617c <SystemInit+0x64>)
 800615a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800615e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006160:	4b06      	ldr	r3, [pc, #24]	; (800617c <SystemInit+0x64>)
 8006162:	2200      	movs	r2, #0
 8006164:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006166:	4b04      	ldr	r3, [pc, #16]	; (8006178 <SystemInit+0x60>)
 8006168:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800616c:	609a      	str	r2, [r3, #8]
#endif
}
 800616e:	bf00      	nop
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	e000ed00 	.word	0xe000ed00
 800617c:	40023800 	.word	0x40023800
 8006180:	24003010 	.word	0x24003010

08006184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006188:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800618a:	e003      	b.n	8006194 <LoopCopyDataInit>

0800618c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800618e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006190:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006192:	3104      	adds	r1, #4

08006194 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006194:	480b      	ldr	r0, [pc, #44]	; (80061c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006196:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006198:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800619a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800619c:	d3f6      	bcc.n	800618c <CopyDataInit>
  ldr  r2, =_sbss
 800619e:	4a0b      	ldr	r2, [pc, #44]	; (80061cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80061a0:	e002      	b.n	80061a8 <LoopFillZerobss>

080061a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80061a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80061a4:	f842 3b04 	str.w	r3, [r2], #4

080061a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80061a8:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80061aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80061ac:	d3f9      	bcc.n	80061a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80061ae:	f7ff ffb3 	bl	8006118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061b2:	f000 f817 	bl	80061e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061b6:	f7fe fc97 	bl	8004ae8 <main>
  bx  lr    
 80061ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80061bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80061c0:	08008238 	.word	0x08008238
  ldr  r0, =_sdata
 80061c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80061c8:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80061cc:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80061d0:	20000698 	.word	0x20000698

080061d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80061d4:	e7fe      	b.n	80061d4 <ADC_IRQHandler>
	...

080061d8 <__errno>:
 80061d8:	4b01      	ldr	r3, [pc, #4]	; (80061e0 <__errno+0x8>)
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20000020 	.word	0x20000020

080061e4 <__libc_init_array>:
 80061e4:	b570      	push	{r4, r5, r6, lr}
 80061e6:	4d0d      	ldr	r5, [pc, #52]	; (800621c <__libc_init_array+0x38>)
 80061e8:	4c0d      	ldr	r4, [pc, #52]	; (8006220 <__libc_init_array+0x3c>)
 80061ea:	1b64      	subs	r4, r4, r5
 80061ec:	10a4      	asrs	r4, r4, #2
 80061ee:	2600      	movs	r6, #0
 80061f0:	42a6      	cmp	r6, r4
 80061f2:	d109      	bne.n	8006208 <__libc_init_array+0x24>
 80061f4:	4d0b      	ldr	r5, [pc, #44]	; (8006224 <__libc_init_array+0x40>)
 80061f6:	4c0c      	ldr	r4, [pc, #48]	; (8006228 <__libc_init_array+0x44>)
 80061f8:	f001 fba8 	bl	800794c <_init>
 80061fc:	1b64      	subs	r4, r4, r5
 80061fe:	10a4      	asrs	r4, r4, #2
 8006200:	2600      	movs	r6, #0
 8006202:	42a6      	cmp	r6, r4
 8006204:	d105      	bne.n	8006212 <__libc_init_array+0x2e>
 8006206:	bd70      	pop	{r4, r5, r6, pc}
 8006208:	f855 3b04 	ldr.w	r3, [r5], #4
 800620c:	4798      	blx	r3
 800620e:	3601      	adds	r6, #1
 8006210:	e7ee      	b.n	80061f0 <__libc_init_array+0xc>
 8006212:	f855 3b04 	ldr.w	r3, [r5], #4
 8006216:	4798      	blx	r3
 8006218:	3601      	adds	r6, #1
 800621a:	e7f2      	b.n	8006202 <__libc_init_array+0x1e>
 800621c:	08008230 	.word	0x08008230
 8006220:	08008230 	.word	0x08008230
 8006224:	08008230 	.word	0x08008230
 8006228:	08008234 	.word	0x08008234

0800622c <memset>:
 800622c:	4402      	add	r2, r0
 800622e:	4603      	mov	r3, r0
 8006230:	4293      	cmp	r3, r2
 8006232:	d100      	bne.n	8006236 <memset+0xa>
 8006234:	4770      	bx	lr
 8006236:	f803 1b01 	strb.w	r1, [r3], #1
 800623a:	e7f9      	b.n	8006230 <memset+0x4>

0800623c <siprintf>:
 800623c:	b40e      	push	{r1, r2, r3}
 800623e:	b500      	push	{lr}
 8006240:	b09c      	sub	sp, #112	; 0x70
 8006242:	ab1d      	add	r3, sp, #116	; 0x74
 8006244:	9002      	str	r0, [sp, #8]
 8006246:	9006      	str	r0, [sp, #24]
 8006248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800624c:	4809      	ldr	r0, [pc, #36]	; (8006274 <siprintf+0x38>)
 800624e:	9107      	str	r1, [sp, #28]
 8006250:	9104      	str	r1, [sp, #16]
 8006252:	4909      	ldr	r1, [pc, #36]	; (8006278 <siprintf+0x3c>)
 8006254:	f853 2b04 	ldr.w	r2, [r3], #4
 8006258:	9105      	str	r1, [sp, #20]
 800625a:	6800      	ldr	r0, [r0, #0]
 800625c:	9301      	str	r3, [sp, #4]
 800625e:	a902      	add	r1, sp, #8
 8006260:	f000 f868 	bl	8006334 <_svfiprintf_r>
 8006264:	9b02      	ldr	r3, [sp, #8]
 8006266:	2200      	movs	r2, #0
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	b01c      	add	sp, #112	; 0x70
 800626c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006270:	b003      	add	sp, #12
 8006272:	4770      	bx	lr
 8006274:	20000020 	.word	0x20000020
 8006278:	ffff0208 	.word	0xffff0208

0800627c <__ssputs_r>:
 800627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006280:	688e      	ldr	r6, [r1, #8]
 8006282:	429e      	cmp	r6, r3
 8006284:	4682      	mov	sl, r0
 8006286:	460c      	mov	r4, r1
 8006288:	4690      	mov	r8, r2
 800628a:	461f      	mov	r7, r3
 800628c:	d838      	bhi.n	8006300 <__ssputs_r+0x84>
 800628e:	898a      	ldrh	r2, [r1, #12]
 8006290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006294:	d032      	beq.n	80062fc <__ssputs_r+0x80>
 8006296:	6825      	ldr	r5, [r4, #0]
 8006298:	6909      	ldr	r1, [r1, #16]
 800629a:	eba5 0901 	sub.w	r9, r5, r1
 800629e:	6965      	ldr	r5, [r4, #20]
 80062a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062a8:	3301      	adds	r3, #1
 80062aa:	444b      	add	r3, r9
 80062ac:	106d      	asrs	r5, r5, #1
 80062ae:	429d      	cmp	r5, r3
 80062b0:	bf38      	it	cc
 80062b2:	461d      	movcc	r5, r3
 80062b4:	0553      	lsls	r3, r2, #21
 80062b6:	d531      	bpl.n	800631c <__ssputs_r+0xa0>
 80062b8:	4629      	mov	r1, r5
 80062ba:	f000 fb63 	bl	8006984 <_malloc_r>
 80062be:	4606      	mov	r6, r0
 80062c0:	b950      	cbnz	r0, 80062d8 <__ssputs_r+0x5c>
 80062c2:	230c      	movs	r3, #12
 80062c4:	f8ca 3000 	str.w	r3, [sl]
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ce:	81a3      	strh	r3, [r4, #12]
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d8:	6921      	ldr	r1, [r4, #16]
 80062da:	464a      	mov	r2, r9
 80062dc:	f000 fabe 	bl	800685c <memcpy>
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ea:	81a3      	strh	r3, [r4, #12]
 80062ec:	6126      	str	r6, [r4, #16]
 80062ee:	6165      	str	r5, [r4, #20]
 80062f0:	444e      	add	r6, r9
 80062f2:	eba5 0509 	sub.w	r5, r5, r9
 80062f6:	6026      	str	r6, [r4, #0]
 80062f8:	60a5      	str	r5, [r4, #8]
 80062fa:	463e      	mov	r6, r7
 80062fc:	42be      	cmp	r6, r7
 80062fe:	d900      	bls.n	8006302 <__ssputs_r+0x86>
 8006300:	463e      	mov	r6, r7
 8006302:	6820      	ldr	r0, [r4, #0]
 8006304:	4632      	mov	r2, r6
 8006306:	4641      	mov	r1, r8
 8006308:	f000 fab6 	bl	8006878 <memmove>
 800630c:	68a3      	ldr	r3, [r4, #8]
 800630e:	1b9b      	subs	r3, r3, r6
 8006310:	60a3      	str	r3, [r4, #8]
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	4433      	add	r3, r6
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	2000      	movs	r0, #0
 800631a:	e7db      	b.n	80062d4 <__ssputs_r+0x58>
 800631c:	462a      	mov	r2, r5
 800631e:	f000 fba5 	bl	8006a6c <_realloc_r>
 8006322:	4606      	mov	r6, r0
 8006324:	2800      	cmp	r0, #0
 8006326:	d1e1      	bne.n	80062ec <__ssputs_r+0x70>
 8006328:	6921      	ldr	r1, [r4, #16]
 800632a:	4650      	mov	r0, sl
 800632c:	f000 fabe 	bl	80068ac <_free_r>
 8006330:	e7c7      	b.n	80062c2 <__ssputs_r+0x46>
	...

08006334 <_svfiprintf_r>:
 8006334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	4698      	mov	r8, r3
 800633a:	898b      	ldrh	r3, [r1, #12]
 800633c:	061b      	lsls	r3, r3, #24
 800633e:	b09d      	sub	sp, #116	; 0x74
 8006340:	4607      	mov	r7, r0
 8006342:	460d      	mov	r5, r1
 8006344:	4614      	mov	r4, r2
 8006346:	d50e      	bpl.n	8006366 <_svfiprintf_r+0x32>
 8006348:	690b      	ldr	r3, [r1, #16]
 800634a:	b963      	cbnz	r3, 8006366 <_svfiprintf_r+0x32>
 800634c:	2140      	movs	r1, #64	; 0x40
 800634e:	f000 fb19 	bl	8006984 <_malloc_r>
 8006352:	6028      	str	r0, [r5, #0]
 8006354:	6128      	str	r0, [r5, #16]
 8006356:	b920      	cbnz	r0, 8006362 <_svfiprintf_r+0x2e>
 8006358:	230c      	movs	r3, #12
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006360:	e0d1      	b.n	8006506 <_svfiprintf_r+0x1d2>
 8006362:	2340      	movs	r3, #64	; 0x40
 8006364:	616b      	str	r3, [r5, #20]
 8006366:	2300      	movs	r3, #0
 8006368:	9309      	str	r3, [sp, #36]	; 0x24
 800636a:	2320      	movs	r3, #32
 800636c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006370:	f8cd 800c 	str.w	r8, [sp, #12]
 8006374:	2330      	movs	r3, #48	; 0x30
 8006376:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006520 <_svfiprintf_r+0x1ec>
 800637a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800637e:	f04f 0901 	mov.w	r9, #1
 8006382:	4623      	mov	r3, r4
 8006384:	469a      	mov	sl, r3
 8006386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800638a:	b10a      	cbz	r2, 8006390 <_svfiprintf_r+0x5c>
 800638c:	2a25      	cmp	r2, #37	; 0x25
 800638e:	d1f9      	bne.n	8006384 <_svfiprintf_r+0x50>
 8006390:	ebba 0b04 	subs.w	fp, sl, r4
 8006394:	d00b      	beq.n	80063ae <_svfiprintf_r+0x7a>
 8006396:	465b      	mov	r3, fp
 8006398:	4622      	mov	r2, r4
 800639a:	4629      	mov	r1, r5
 800639c:	4638      	mov	r0, r7
 800639e:	f7ff ff6d 	bl	800627c <__ssputs_r>
 80063a2:	3001      	adds	r0, #1
 80063a4:	f000 80aa 	beq.w	80064fc <_svfiprintf_r+0x1c8>
 80063a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063aa:	445a      	add	r2, fp
 80063ac:	9209      	str	r2, [sp, #36]	; 0x24
 80063ae:	f89a 3000 	ldrb.w	r3, [sl]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 80a2 	beq.w	80064fc <_svfiprintf_r+0x1c8>
 80063b8:	2300      	movs	r3, #0
 80063ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063c2:	f10a 0a01 	add.w	sl, sl, #1
 80063c6:	9304      	str	r3, [sp, #16]
 80063c8:	9307      	str	r3, [sp, #28]
 80063ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063ce:	931a      	str	r3, [sp, #104]	; 0x68
 80063d0:	4654      	mov	r4, sl
 80063d2:	2205      	movs	r2, #5
 80063d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d8:	4851      	ldr	r0, [pc, #324]	; (8006520 <_svfiprintf_r+0x1ec>)
 80063da:	f7f9 ff19 	bl	8000210 <memchr>
 80063de:	9a04      	ldr	r2, [sp, #16]
 80063e0:	b9d8      	cbnz	r0, 800641a <_svfiprintf_r+0xe6>
 80063e2:	06d0      	lsls	r0, r2, #27
 80063e4:	bf44      	itt	mi
 80063e6:	2320      	movmi	r3, #32
 80063e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ec:	0711      	lsls	r1, r2, #28
 80063ee:	bf44      	itt	mi
 80063f0:	232b      	movmi	r3, #43	; 0x2b
 80063f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063f6:	f89a 3000 	ldrb.w	r3, [sl]
 80063fa:	2b2a      	cmp	r3, #42	; 0x2a
 80063fc:	d015      	beq.n	800642a <_svfiprintf_r+0xf6>
 80063fe:	9a07      	ldr	r2, [sp, #28]
 8006400:	4654      	mov	r4, sl
 8006402:	2000      	movs	r0, #0
 8006404:	f04f 0c0a 	mov.w	ip, #10
 8006408:	4621      	mov	r1, r4
 800640a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800640e:	3b30      	subs	r3, #48	; 0x30
 8006410:	2b09      	cmp	r3, #9
 8006412:	d94e      	bls.n	80064b2 <_svfiprintf_r+0x17e>
 8006414:	b1b0      	cbz	r0, 8006444 <_svfiprintf_r+0x110>
 8006416:	9207      	str	r2, [sp, #28]
 8006418:	e014      	b.n	8006444 <_svfiprintf_r+0x110>
 800641a:	eba0 0308 	sub.w	r3, r0, r8
 800641e:	fa09 f303 	lsl.w	r3, r9, r3
 8006422:	4313      	orrs	r3, r2
 8006424:	9304      	str	r3, [sp, #16]
 8006426:	46a2      	mov	sl, r4
 8006428:	e7d2      	b.n	80063d0 <_svfiprintf_r+0x9c>
 800642a:	9b03      	ldr	r3, [sp, #12]
 800642c:	1d19      	adds	r1, r3, #4
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	9103      	str	r1, [sp, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	bfbb      	ittet	lt
 8006436:	425b      	neglt	r3, r3
 8006438:	f042 0202 	orrlt.w	r2, r2, #2
 800643c:	9307      	strge	r3, [sp, #28]
 800643e:	9307      	strlt	r3, [sp, #28]
 8006440:	bfb8      	it	lt
 8006442:	9204      	strlt	r2, [sp, #16]
 8006444:	7823      	ldrb	r3, [r4, #0]
 8006446:	2b2e      	cmp	r3, #46	; 0x2e
 8006448:	d10c      	bne.n	8006464 <_svfiprintf_r+0x130>
 800644a:	7863      	ldrb	r3, [r4, #1]
 800644c:	2b2a      	cmp	r3, #42	; 0x2a
 800644e:	d135      	bne.n	80064bc <_svfiprintf_r+0x188>
 8006450:	9b03      	ldr	r3, [sp, #12]
 8006452:	1d1a      	adds	r2, r3, #4
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	9203      	str	r2, [sp, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	bfb8      	it	lt
 800645c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006460:	3402      	adds	r4, #2
 8006462:	9305      	str	r3, [sp, #20]
 8006464:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006530 <_svfiprintf_r+0x1fc>
 8006468:	7821      	ldrb	r1, [r4, #0]
 800646a:	2203      	movs	r2, #3
 800646c:	4650      	mov	r0, sl
 800646e:	f7f9 fecf 	bl	8000210 <memchr>
 8006472:	b140      	cbz	r0, 8006486 <_svfiprintf_r+0x152>
 8006474:	2340      	movs	r3, #64	; 0x40
 8006476:	eba0 000a 	sub.w	r0, r0, sl
 800647a:	fa03 f000 	lsl.w	r0, r3, r0
 800647e:	9b04      	ldr	r3, [sp, #16]
 8006480:	4303      	orrs	r3, r0
 8006482:	3401      	adds	r4, #1
 8006484:	9304      	str	r3, [sp, #16]
 8006486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800648a:	4826      	ldr	r0, [pc, #152]	; (8006524 <_svfiprintf_r+0x1f0>)
 800648c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006490:	2206      	movs	r2, #6
 8006492:	f7f9 febd 	bl	8000210 <memchr>
 8006496:	2800      	cmp	r0, #0
 8006498:	d038      	beq.n	800650c <_svfiprintf_r+0x1d8>
 800649a:	4b23      	ldr	r3, [pc, #140]	; (8006528 <_svfiprintf_r+0x1f4>)
 800649c:	bb1b      	cbnz	r3, 80064e6 <_svfiprintf_r+0x1b2>
 800649e:	9b03      	ldr	r3, [sp, #12]
 80064a0:	3307      	adds	r3, #7
 80064a2:	f023 0307 	bic.w	r3, r3, #7
 80064a6:	3308      	adds	r3, #8
 80064a8:	9303      	str	r3, [sp, #12]
 80064aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ac:	4433      	add	r3, r6
 80064ae:	9309      	str	r3, [sp, #36]	; 0x24
 80064b0:	e767      	b.n	8006382 <_svfiprintf_r+0x4e>
 80064b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80064b6:	460c      	mov	r4, r1
 80064b8:	2001      	movs	r0, #1
 80064ba:	e7a5      	b.n	8006408 <_svfiprintf_r+0xd4>
 80064bc:	2300      	movs	r3, #0
 80064be:	3401      	adds	r4, #1
 80064c0:	9305      	str	r3, [sp, #20]
 80064c2:	4619      	mov	r1, r3
 80064c4:	f04f 0c0a 	mov.w	ip, #10
 80064c8:	4620      	mov	r0, r4
 80064ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064ce:	3a30      	subs	r2, #48	; 0x30
 80064d0:	2a09      	cmp	r2, #9
 80064d2:	d903      	bls.n	80064dc <_svfiprintf_r+0x1a8>
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0c5      	beq.n	8006464 <_svfiprintf_r+0x130>
 80064d8:	9105      	str	r1, [sp, #20]
 80064da:	e7c3      	b.n	8006464 <_svfiprintf_r+0x130>
 80064dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80064e0:	4604      	mov	r4, r0
 80064e2:	2301      	movs	r3, #1
 80064e4:	e7f0      	b.n	80064c8 <_svfiprintf_r+0x194>
 80064e6:	ab03      	add	r3, sp, #12
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	462a      	mov	r2, r5
 80064ec:	4b0f      	ldr	r3, [pc, #60]	; (800652c <_svfiprintf_r+0x1f8>)
 80064ee:	a904      	add	r1, sp, #16
 80064f0:	4638      	mov	r0, r7
 80064f2:	f3af 8000 	nop.w
 80064f6:	1c42      	adds	r2, r0, #1
 80064f8:	4606      	mov	r6, r0
 80064fa:	d1d6      	bne.n	80064aa <_svfiprintf_r+0x176>
 80064fc:	89ab      	ldrh	r3, [r5, #12]
 80064fe:	065b      	lsls	r3, r3, #25
 8006500:	f53f af2c 	bmi.w	800635c <_svfiprintf_r+0x28>
 8006504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006506:	b01d      	add	sp, #116	; 0x74
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	ab03      	add	r3, sp, #12
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	462a      	mov	r2, r5
 8006512:	4b06      	ldr	r3, [pc, #24]	; (800652c <_svfiprintf_r+0x1f8>)
 8006514:	a904      	add	r1, sp, #16
 8006516:	4638      	mov	r0, r7
 8006518:	f000 f87a 	bl	8006610 <_printf_i>
 800651c:	e7eb      	b.n	80064f6 <_svfiprintf_r+0x1c2>
 800651e:	bf00      	nop
 8006520:	080081c0 	.word	0x080081c0
 8006524:	080081ca 	.word	0x080081ca
 8006528:	00000000 	.word	0x00000000
 800652c:	0800627d 	.word	0x0800627d
 8006530:	080081c6 	.word	0x080081c6

08006534 <_printf_common>:
 8006534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006538:	4616      	mov	r6, r2
 800653a:	4699      	mov	r9, r3
 800653c:	688a      	ldr	r2, [r1, #8]
 800653e:	690b      	ldr	r3, [r1, #16]
 8006540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006544:	4293      	cmp	r3, r2
 8006546:	bfb8      	it	lt
 8006548:	4613      	movlt	r3, r2
 800654a:	6033      	str	r3, [r6, #0]
 800654c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006550:	4607      	mov	r7, r0
 8006552:	460c      	mov	r4, r1
 8006554:	b10a      	cbz	r2, 800655a <_printf_common+0x26>
 8006556:	3301      	adds	r3, #1
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	0699      	lsls	r1, r3, #26
 800655e:	bf42      	ittt	mi
 8006560:	6833      	ldrmi	r3, [r6, #0]
 8006562:	3302      	addmi	r3, #2
 8006564:	6033      	strmi	r3, [r6, #0]
 8006566:	6825      	ldr	r5, [r4, #0]
 8006568:	f015 0506 	ands.w	r5, r5, #6
 800656c:	d106      	bne.n	800657c <_printf_common+0x48>
 800656e:	f104 0a19 	add.w	sl, r4, #25
 8006572:	68e3      	ldr	r3, [r4, #12]
 8006574:	6832      	ldr	r2, [r6, #0]
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	42ab      	cmp	r3, r5
 800657a:	dc26      	bgt.n	80065ca <_printf_common+0x96>
 800657c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006580:	1e13      	subs	r3, r2, #0
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	bf18      	it	ne
 8006586:	2301      	movne	r3, #1
 8006588:	0692      	lsls	r2, r2, #26
 800658a:	d42b      	bmi.n	80065e4 <_printf_common+0xb0>
 800658c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006590:	4649      	mov	r1, r9
 8006592:	4638      	mov	r0, r7
 8006594:	47c0      	blx	r8
 8006596:	3001      	adds	r0, #1
 8006598:	d01e      	beq.n	80065d8 <_printf_common+0xa4>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	68e5      	ldr	r5, [r4, #12]
 800659e:	6832      	ldr	r2, [r6, #0]
 80065a0:	f003 0306 	and.w	r3, r3, #6
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	bf08      	it	eq
 80065a8:	1aad      	subeq	r5, r5, r2
 80065aa:	68a3      	ldr	r3, [r4, #8]
 80065ac:	6922      	ldr	r2, [r4, #16]
 80065ae:	bf0c      	ite	eq
 80065b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b4:	2500      	movne	r5, #0
 80065b6:	4293      	cmp	r3, r2
 80065b8:	bfc4      	itt	gt
 80065ba:	1a9b      	subgt	r3, r3, r2
 80065bc:	18ed      	addgt	r5, r5, r3
 80065be:	2600      	movs	r6, #0
 80065c0:	341a      	adds	r4, #26
 80065c2:	42b5      	cmp	r5, r6
 80065c4:	d11a      	bne.n	80065fc <_printf_common+0xc8>
 80065c6:	2000      	movs	r0, #0
 80065c8:	e008      	b.n	80065dc <_printf_common+0xa8>
 80065ca:	2301      	movs	r3, #1
 80065cc:	4652      	mov	r2, sl
 80065ce:	4649      	mov	r1, r9
 80065d0:	4638      	mov	r0, r7
 80065d2:	47c0      	blx	r8
 80065d4:	3001      	adds	r0, #1
 80065d6:	d103      	bne.n	80065e0 <_printf_common+0xac>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e0:	3501      	adds	r5, #1
 80065e2:	e7c6      	b.n	8006572 <_printf_common+0x3e>
 80065e4:	18e1      	adds	r1, r4, r3
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	2030      	movs	r0, #48	; 0x30
 80065ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ee:	4422      	add	r2, r4
 80065f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065f8:	3302      	adds	r3, #2
 80065fa:	e7c7      	b.n	800658c <_printf_common+0x58>
 80065fc:	2301      	movs	r3, #1
 80065fe:	4622      	mov	r2, r4
 8006600:	4649      	mov	r1, r9
 8006602:	4638      	mov	r0, r7
 8006604:	47c0      	blx	r8
 8006606:	3001      	adds	r0, #1
 8006608:	d0e6      	beq.n	80065d8 <_printf_common+0xa4>
 800660a:	3601      	adds	r6, #1
 800660c:	e7d9      	b.n	80065c2 <_printf_common+0x8e>
	...

08006610 <_printf_i>:
 8006610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	7e0f      	ldrb	r7, [r1, #24]
 8006616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006618:	2f78      	cmp	r7, #120	; 0x78
 800661a:	4691      	mov	r9, r2
 800661c:	4680      	mov	r8, r0
 800661e:	460c      	mov	r4, r1
 8006620:	469a      	mov	sl, r3
 8006622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006626:	d807      	bhi.n	8006638 <_printf_i+0x28>
 8006628:	2f62      	cmp	r7, #98	; 0x62
 800662a:	d80a      	bhi.n	8006642 <_printf_i+0x32>
 800662c:	2f00      	cmp	r7, #0
 800662e:	f000 80d8 	beq.w	80067e2 <_printf_i+0x1d2>
 8006632:	2f58      	cmp	r7, #88	; 0x58
 8006634:	f000 80a3 	beq.w	800677e <_printf_i+0x16e>
 8006638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800663c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006640:	e03a      	b.n	80066b8 <_printf_i+0xa8>
 8006642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006646:	2b15      	cmp	r3, #21
 8006648:	d8f6      	bhi.n	8006638 <_printf_i+0x28>
 800664a:	a101      	add	r1, pc, #4	; (adr r1, 8006650 <_printf_i+0x40>)
 800664c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006650:	080066a9 	.word	0x080066a9
 8006654:	080066bd 	.word	0x080066bd
 8006658:	08006639 	.word	0x08006639
 800665c:	08006639 	.word	0x08006639
 8006660:	08006639 	.word	0x08006639
 8006664:	08006639 	.word	0x08006639
 8006668:	080066bd 	.word	0x080066bd
 800666c:	08006639 	.word	0x08006639
 8006670:	08006639 	.word	0x08006639
 8006674:	08006639 	.word	0x08006639
 8006678:	08006639 	.word	0x08006639
 800667c:	080067c9 	.word	0x080067c9
 8006680:	080066ed 	.word	0x080066ed
 8006684:	080067ab 	.word	0x080067ab
 8006688:	08006639 	.word	0x08006639
 800668c:	08006639 	.word	0x08006639
 8006690:	080067eb 	.word	0x080067eb
 8006694:	08006639 	.word	0x08006639
 8006698:	080066ed 	.word	0x080066ed
 800669c:	08006639 	.word	0x08006639
 80066a0:	08006639 	.word	0x08006639
 80066a4:	080067b3 	.word	0x080067b3
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	1d1a      	adds	r2, r3, #4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	602a      	str	r2, [r5, #0]
 80066b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066b8:	2301      	movs	r3, #1
 80066ba:	e0a3      	b.n	8006804 <_printf_i+0x1f4>
 80066bc:	6820      	ldr	r0, [r4, #0]
 80066be:	6829      	ldr	r1, [r5, #0]
 80066c0:	0606      	lsls	r6, r0, #24
 80066c2:	f101 0304 	add.w	r3, r1, #4
 80066c6:	d50a      	bpl.n	80066de <_printf_i+0xce>
 80066c8:	680e      	ldr	r6, [r1, #0]
 80066ca:	602b      	str	r3, [r5, #0]
 80066cc:	2e00      	cmp	r6, #0
 80066ce:	da03      	bge.n	80066d8 <_printf_i+0xc8>
 80066d0:	232d      	movs	r3, #45	; 0x2d
 80066d2:	4276      	negs	r6, r6
 80066d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d8:	485e      	ldr	r0, [pc, #376]	; (8006854 <_printf_i+0x244>)
 80066da:	230a      	movs	r3, #10
 80066dc:	e019      	b.n	8006712 <_printf_i+0x102>
 80066de:	680e      	ldr	r6, [r1, #0]
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066e6:	bf18      	it	ne
 80066e8:	b236      	sxthne	r6, r6
 80066ea:	e7ef      	b.n	80066cc <_printf_i+0xbc>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	6820      	ldr	r0, [r4, #0]
 80066f0:	1d19      	adds	r1, r3, #4
 80066f2:	6029      	str	r1, [r5, #0]
 80066f4:	0601      	lsls	r1, r0, #24
 80066f6:	d501      	bpl.n	80066fc <_printf_i+0xec>
 80066f8:	681e      	ldr	r6, [r3, #0]
 80066fa:	e002      	b.n	8006702 <_printf_i+0xf2>
 80066fc:	0646      	lsls	r6, r0, #25
 80066fe:	d5fb      	bpl.n	80066f8 <_printf_i+0xe8>
 8006700:	881e      	ldrh	r6, [r3, #0]
 8006702:	4854      	ldr	r0, [pc, #336]	; (8006854 <_printf_i+0x244>)
 8006704:	2f6f      	cmp	r7, #111	; 0x6f
 8006706:	bf0c      	ite	eq
 8006708:	2308      	moveq	r3, #8
 800670a:	230a      	movne	r3, #10
 800670c:	2100      	movs	r1, #0
 800670e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006712:	6865      	ldr	r5, [r4, #4]
 8006714:	60a5      	str	r5, [r4, #8]
 8006716:	2d00      	cmp	r5, #0
 8006718:	bfa2      	ittt	ge
 800671a:	6821      	ldrge	r1, [r4, #0]
 800671c:	f021 0104 	bicge.w	r1, r1, #4
 8006720:	6021      	strge	r1, [r4, #0]
 8006722:	b90e      	cbnz	r6, 8006728 <_printf_i+0x118>
 8006724:	2d00      	cmp	r5, #0
 8006726:	d04d      	beq.n	80067c4 <_printf_i+0x1b4>
 8006728:	4615      	mov	r5, r2
 800672a:	fbb6 f1f3 	udiv	r1, r6, r3
 800672e:	fb03 6711 	mls	r7, r3, r1, r6
 8006732:	5dc7      	ldrb	r7, [r0, r7]
 8006734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006738:	4637      	mov	r7, r6
 800673a:	42bb      	cmp	r3, r7
 800673c:	460e      	mov	r6, r1
 800673e:	d9f4      	bls.n	800672a <_printf_i+0x11a>
 8006740:	2b08      	cmp	r3, #8
 8006742:	d10b      	bne.n	800675c <_printf_i+0x14c>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	07de      	lsls	r6, r3, #31
 8006748:	d508      	bpl.n	800675c <_printf_i+0x14c>
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	6861      	ldr	r1, [r4, #4]
 800674e:	4299      	cmp	r1, r3
 8006750:	bfde      	ittt	le
 8006752:	2330      	movle	r3, #48	; 0x30
 8006754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006758:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800675c:	1b52      	subs	r2, r2, r5
 800675e:	6122      	str	r2, [r4, #16]
 8006760:	f8cd a000 	str.w	sl, [sp]
 8006764:	464b      	mov	r3, r9
 8006766:	aa03      	add	r2, sp, #12
 8006768:	4621      	mov	r1, r4
 800676a:	4640      	mov	r0, r8
 800676c:	f7ff fee2 	bl	8006534 <_printf_common>
 8006770:	3001      	adds	r0, #1
 8006772:	d14c      	bne.n	800680e <_printf_i+0x1fe>
 8006774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006778:	b004      	add	sp, #16
 800677a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677e:	4835      	ldr	r0, [pc, #212]	; (8006854 <_printf_i+0x244>)
 8006780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006784:	6829      	ldr	r1, [r5, #0]
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	f851 6b04 	ldr.w	r6, [r1], #4
 800678c:	6029      	str	r1, [r5, #0]
 800678e:	061d      	lsls	r5, r3, #24
 8006790:	d514      	bpl.n	80067bc <_printf_i+0x1ac>
 8006792:	07df      	lsls	r7, r3, #31
 8006794:	bf44      	itt	mi
 8006796:	f043 0320 	orrmi.w	r3, r3, #32
 800679a:	6023      	strmi	r3, [r4, #0]
 800679c:	b91e      	cbnz	r6, 80067a6 <_printf_i+0x196>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	f023 0320 	bic.w	r3, r3, #32
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	2310      	movs	r3, #16
 80067a8:	e7b0      	b.n	800670c <_printf_i+0xfc>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	f043 0320 	orr.w	r3, r3, #32
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	2378      	movs	r3, #120	; 0x78
 80067b4:	4828      	ldr	r0, [pc, #160]	; (8006858 <_printf_i+0x248>)
 80067b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067ba:	e7e3      	b.n	8006784 <_printf_i+0x174>
 80067bc:	0659      	lsls	r1, r3, #25
 80067be:	bf48      	it	mi
 80067c0:	b2b6      	uxthmi	r6, r6
 80067c2:	e7e6      	b.n	8006792 <_printf_i+0x182>
 80067c4:	4615      	mov	r5, r2
 80067c6:	e7bb      	b.n	8006740 <_printf_i+0x130>
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	6826      	ldr	r6, [r4, #0]
 80067cc:	6961      	ldr	r1, [r4, #20]
 80067ce:	1d18      	adds	r0, r3, #4
 80067d0:	6028      	str	r0, [r5, #0]
 80067d2:	0635      	lsls	r5, r6, #24
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	d501      	bpl.n	80067dc <_printf_i+0x1cc>
 80067d8:	6019      	str	r1, [r3, #0]
 80067da:	e002      	b.n	80067e2 <_printf_i+0x1d2>
 80067dc:	0670      	lsls	r0, r6, #25
 80067de:	d5fb      	bpl.n	80067d8 <_printf_i+0x1c8>
 80067e0:	8019      	strh	r1, [r3, #0]
 80067e2:	2300      	movs	r3, #0
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	4615      	mov	r5, r2
 80067e8:	e7ba      	b.n	8006760 <_printf_i+0x150>
 80067ea:	682b      	ldr	r3, [r5, #0]
 80067ec:	1d1a      	adds	r2, r3, #4
 80067ee:	602a      	str	r2, [r5, #0]
 80067f0:	681d      	ldr	r5, [r3, #0]
 80067f2:	6862      	ldr	r2, [r4, #4]
 80067f4:	2100      	movs	r1, #0
 80067f6:	4628      	mov	r0, r5
 80067f8:	f7f9 fd0a 	bl	8000210 <memchr>
 80067fc:	b108      	cbz	r0, 8006802 <_printf_i+0x1f2>
 80067fe:	1b40      	subs	r0, r0, r5
 8006800:	6060      	str	r0, [r4, #4]
 8006802:	6863      	ldr	r3, [r4, #4]
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	2300      	movs	r3, #0
 8006808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800680c:	e7a8      	b.n	8006760 <_printf_i+0x150>
 800680e:	6923      	ldr	r3, [r4, #16]
 8006810:	462a      	mov	r2, r5
 8006812:	4649      	mov	r1, r9
 8006814:	4640      	mov	r0, r8
 8006816:	47d0      	blx	sl
 8006818:	3001      	adds	r0, #1
 800681a:	d0ab      	beq.n	8006774 <_printf_i+0x164>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	079b      	lsls	r3, r3, #30
 8006820:	d413      	bmi.n	800684a <_printf_i+0x23a>
 8006822:	68e0      	ldr	r0, [r4, #12]
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	4298      	cmp	r0, r3
 8006828:	bfb8      	it	lt
 800682a:	4618      	movlt	r0, r3
 800682c:	e7a4      	b.n	8006778 <_printf_i+0x168>
 800682e:	2301      	movs	r3, #1
 8006830:	4632      	mov	r2, r6
 8006832:	4649      	mov	r1, r9
 8006834:	4640      	mov	r0, r8
 8006836:	47d0      	blx	sl
 8006838:	3001      	adds	r0, #1
 800683a:	d09b      	beq.n	8006774 <_printf_i+0x164>
 800683c:	3501      	adds	r5, #1
 800683e:	68e3      	ldr	r3, [r4, #12]
 8006840:	9903      	ldr	r1, [sp, #12]
 8006842:	1a5b      	subs	r3, r3, r1
 8006844:	42ab      	cmp	r3, r5
 8006846:	dcf2      	bgt.n	800682e <_printf_i+0x21e>
 8006848:	e7eb      	b.n	8006822 <_printf_i+0x212>
 800684a:	2500      	movs	r5, #0
 800684c:	f104 0619 	add.w	r6, r4, #25
 8006850:	e7f5      	b.n	800683e <_printf_i+0x22e>
 8006852:	bf00      	nop
 8006854:	080081d1 	.word	0x080081d1
 8006858:	080081e2 	.word	0x080081e2

0800685c <memcpy>:
 800685c:	440a      	add	r2, r1
 800685e:	4291      	cmp	r1, r2
 8006860:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006864:	d100      	bne.n	8006868 <memcpy+0xc>
 8006866:	4770      	bx	lr
 8006868:	b510      	push	{r4, lr}
 800686a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800686e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006872:	4291      	cmp	r1, r2
 8006874:	d1f9      	bne.n	800686a <memcpy+0xe>
 8006876:	bd10      	pop	{r4, pc}

08006878 <memmove>:
 8006878:	4288      	cmp	r0, r1
 800687a:	b510      	push	{r4, lr}
 800687c:	eb01 0402 	add.w	r4, r1, r2
 8006880:	d902      	bls.n	8006888 <memmove+0x10>
 8006882:	4284      	cmp	r4, r0
 8006884:	4623      	mov	r3, r4
 8006886:	d807      	bhi.n	8006898 <memmove+0x20>
 8006888:	1e43      	subs	r3, r0, #1
 800688a:	42a1      	cmp	r1, r4
 800688c:	d008      	beq.n	80068a0 <memmove+0x28>
 800688e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006896:	e7f8      	b.n	800688a <memmove+0x12>
 8006898:	4402      	add	r2, r0
 800689a:	4601      	mov	r1, r0
 800689c:	428a      	cmp	r2, r1
 800689e:	d100      	bne.n	80068a2 <memmove+0x2a>
 80068a0:	bd10      	pop	{r4, pc}
 80068a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068aa:	e7f7      	b.n	800689c <memmove+0x24>

080068ac <_free_r>:
 80068ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068ae:	2900      	cmp	r1, #0
 80068b0:	d044      	beq.n	800693c <_free_r+0x90>
 80068b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068b6:	9001      	str	r0, [sp, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f1a1 0404 	sub.w	r4, r1, #4
 80068be:	bfb8      	it	lt
 80068c0:	18e4      	addlt	r4, r4, r3
 80068c2:	f000 f913 	bl	8006aec <__malloc_lock>
 80068c6:	4a1e      	ldr	r2, [pc, #120]	; (8006940 <_free_r+0x94>)
 80068c8:	9801      	ldr	r0, [sp, #4]
 80068ca:	6813      	ldr	r3, [r2, #0]
 80068cc:	b933      	cbnz	r3, 80068dc <_free_r+0x30>
 80068ce:	6063      	str	r3, [r4, #4]
 80068d0:	6014      	str	r4, [r2, #0]
 80068d2:	b003      	add	sp, #12
 80068d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068d8:	f000 b90e 	b.w	8006af8 <__malloc_unlock>
 80068dc:	42a3      	cmp	r3, r4
 80068de:	d908      	bls.n	80068f2 <_free_r+0x46>
 80068e0:	6825      	ldr	r5, [r4, #0]
 80068e2:	1961      	adds	r1, r4, r5
 80068e4:	428b      	cmp	r3, r1
 80068e6:	bf01      	itttt	eq
 80068e8:	6819      	ldreq	r1, [r3, #0]
 80068ea:	685b      	ldreq	r3, [r3, #4]
 80068ec:	1949      	addeq	r1, r1, r5
 80068ee:	6021      	streq	r1, [r4, #0]
 80068f0:	e7ed      	b.n	80068ce <_free_r+0x22>
 80068f2:	461a      	mov	r2, r3
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	b10b      	cbz	r3, 80068fc <_free_r+0x50>
 80068f8:	42a3      	cmp	r3, r4
 80068fa:	d9fa      	bls.n	80068f2 <_free_r+0x46>
 80068fc:	6811      	ldr	r1, [r2, #0]
 80068fe:	1855      	adds	r5, r2, r1
 8006900:	42a5      	cmp	r5, r4
 8006902:	d10b      	bne.n	800691c <_free_r+0x70>
 8006904:	6824      	ldr	r4, [r4, #0]
 8006906:	4421      	add	r1, r4
 8006908:	1854      	adds	r4, r2, r1
 800690a:	42a3      	cmp	r3, r4
 800690c:	6011      	str	r1, [r2, #0]
 800690e:	d1e0      	bne.n	80068d2 <_free_r+0x26>
 8006910:	681c      	ldr	r4, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	6053      	str	r3, [r2, #4]
 8006916:	4421      	add	r1, r4
 8006918:	6011      	str	r1, [r2, #0]
 800691a:	e7da      	b.n	80068d2 <_free_r+0x26>
 800691c:	d902      	bls.n	8006924 <_free_r+0x78>
 800691e:	230c      	movs	r3, #12
 8006920:	6003      	str	r3, [r0, #0]
 8006922:	e7d6      	b.n	80068d2 <_free_r+0x26>
 8006924:	6825      	ldr	r5, [r4, #0]
 8006926:	1961      	adds	r1, r4, r5
 8006928:	428b      	cmp	r3, r1
 800692a:	bf04      	itt	eq
 800692c:	6819      	ldreq	r1, [r3, #0]
 800692e:	685b      	ldreq	r3, [r3, #4]
 8006930:	6063      	str	r3, [r4, #4]
 8006932:	bf04      	itt	eq
 8006934:	1949      	addeq	r1, r1, r5
 8006936:	6021      	streq	r1, [r4, #0]
 8006938:	6054      	str	r4, [r2, #4]
 800693a:	e7ca      	b.n	80068d2 <_free_r+0x26>
 800693c:	b003      	add	sp, #12
 800693e:	bd30      	pop	{r4, r5, pc}
 8006940:	20000688 	.word	0x20000688

08006944 <sbrk_aligned>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	4e0e      	ldr	r6, [pc, #56]	; (8006980 <sbrk_aligned+0x3c>)
 8006948:	460c      	mov	r4, r1
 800694a:	6831      	ldr	r1, [r6, #0]
 800694c:	4605      	mov	r5, r0
 800694e:	b911      	cbnz	r1, 8006956 <sbrk_aligned+0x12>
 8006950:	f000 f8bc 	bl	8006acc <_sbrk_r>
 8006954:	6030      	str	r0, [r6, #0]
 8006956:	4621      	mov	r1, r4
 8006958:	4628      	mov	r0, r5
 800695a:	f000 f8b7 	bl	8006acc <_sbrk_r>
 800695e:	1c43      	adds	r3, r0, #1
 8006960:	d00a      	beq.n	8006978 <sbrk_aligned+0x34>
 8006962:	1cc4      	adds	r4, r0, #3
 8006964:	f024 0403 	bic.w	r4, r4, #3
 8006968:	42a0      	cmp	r0, r4
 800696a:	d007      	beq.n	800697c <sbrk_aligned+0x38>
 800696c:	1a21      	subs	r1, r4, r0
 800696e:	4628      	mov	r0, r5
 8006970:	f000 f8ac 	bl	8006acc <_sbrk_r>
 8006974:	3001      	adds	r0, #1
 8006976:	d101      	bne.n	800697c <sbrk_aligned+0x38>
 8006978:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800697c:	4620      	mov	r0, r4
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	2000068c 	.word	0x2000068c

08006984 <_malloc_r>:
 8006984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006988:	1ccd      	adds	r5, r1, #3
 800698a:	f025 0503 	bic.w	r5, r5, #3
 800698e:	3508      	adds	r5, #8
 8006990:	2d0c      	cmp	r5, #12
 8006992:	bf38      	it	cc
 8006994:	250c      	movcc	r5, #12
 8006996:	2d00      	cmp	r5, #0
 8006998:	4607      	mov	r7, r0
 800699a:	db01      	blt.n	80069a0 <_malloc_r+0x1c>
 800699c:	42a9      	cmp	r1, r5
 800699e:	d905      	bls.n	80069ac <_malloc_r+0x28>
 80069a0:	230c      	movs	r3, #12
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	2600      	movs	r6, #0
 80069a6:	4630      	mov	r0, r6
 80069a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069ac:	4e2e      	ldr	r6, [pc, #184]	; (8006a68 <_malloc_r+0xe4>)
 80069ae:	f000 f89d 	bl	8006aec <__malloc_lock>
 80069b2:	6833      	ldr	r3, [r6, #0]
 80069b4:	461c      	mov	r4, r3
 80069b6:	bb34      	cbnz	r4, 8006a06 <_malloc_r+0x82>
 80069b8:	4629      	mov	r1, r5
 80069ba:	4638      	mov	r0, r7
 80069bc:	f7ff ffc2 	bl	8006944 <sbrk_aligned>
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	4604      	mov	r4, r0
 80069c4:	d14d      	bne.n	8006a62 <_malloc_r+0xde>
 80069c6:	6834      	ldr	r4, [r6, #0]
 80069c8:	4626      	mov	r6, r4
 80069ca:	2e00      	cmp	r6, #0
 80069cc:	d140      	bne.n	8006a50 <_malloc_r+0xcc>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	4631      	mov	r1, r6
 80069d2:	4638      	mov	r0, r7
 80069d4:	eb04 0803 	add.w	r8, r4, r3
 80069d8:	f000 f878 	bl	8006acc <_sbrk_r>
 80069dc:	4580      	cmp	r8, r0
 80069de:	d13a      	bne.n	8006a56 <_malloc_r+0xd2>
 80069e0:	6821      	ldr	r1, [r4, #0]
 80069e2:	3503      	adds	r5, #3
 80069e4:	1a6d      	subs	r5, r5, r1
 80069e6:	f025 0503 	bic.w	r5, r5, #3
 80069ea:	3508      	adds	r5, #8
 80069ec:	2d0c      	cmp	r5, #12
 80069ee:	bf38      	it	cc
 80069f0:	250c      	movcc	r5, #12
 80069f2:	4629      	mov	r1, r5
 80069f4:	4638      	mov	r0, r7
 80069f6:	f7ff ffa5 	bl	8006944 <sbrk_aligned>
 80069fa:	3001      	adds	r0, #1
 80069fc:	d02b      	beq.n	8006a56 <_malloc_r+0xd2>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	442b      	add	r3, r5
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	e00e      	b.n	8006a24 <_malloc_r+0xa0>
 8006a06:	6822      	ldr	r2, [r4, #0]
 8006a08:	1b52      	subs	r2, r2, r5
 8006a0a:	d41e      	bmi.n	8006a4a <_malloc_r+0xc6>
 8006a0c:	2a0b      	cmp	r2, #11
 8006a0e:	d916      	bls.n	8006a3e <_malloc_r+0xba>
 8006a10:	1961      	adds	r1, r4, r5
 8006a12:	42a3      	cmp	r3, r4
 8006a14:	6025      	str	r5, [r4, #0]
 8006a16:	bf18      	it	ne
 8006a18:	6059      	strne	r1, [r3, #4]
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	bf08      	it	eq
 8006a1e:	6031      	streq	r1, [r6, #0]
 8006a20:	5162      	str	r2, [r4, r5]
 8006a22:	604b      	str	r3, [r1, #4]
 8006a24:	4638      	mov	r0, r7
 8006a26:	f104 060b 	add.w	r6, r4, #11
 8006a2a:	f000 f865 	bl	8006af8 <__malloc_unlock>
 8006a2e:	f026 0607 	bic.w	r6, r6, #7
 8006a32:	1d23      	adds	r3, r4, #4
 8006a34:	1af2      	subs	r2, r6, r3
 8006a36:	d0b6      	beq.n	80069a6 <_malloc_r+0x22>
 8006a38:	1b9b      	subs	r3, r3, r6
 8006a3a:	50a3      	str	r3, [r4, r2]
 8006a3c:	e7b3      	b.n	80069a6 <_malloc_r+0x22>
 8006a3e:	6862      	ldr	r2, [r4, #4]
 8006a40:	42a3      	cmp	r3, r4
 8006a42:	bf0c      	ite	eq
 8006a44:	6032      	streq	r2, [r6, #0]
 8006a46:	605a      	strne	r2, [r3, #4]
 8006a48:	e7ec      	b.n	8006a24 <_malloc_r+0xa0>
 8006a4a:	4623      	mov	r3, r4
 8006a4c:	6864      	ldr	r4, [r4, #4]
 8006a4e:	e7b2      	b.n	80069b6 <_malloc_r+0x32>
 8006a50:	4634      	mov	r4, r6
 8006a52:	6876      	ldr	r6, [r6, #4]
 8006a54:	e7b9      	b.n	80069ca <_malloc_r+0x46>
 8006a56:	230c      	movs	r3, #12
 8006a58:	603b      	str	r3, [r7, #0]
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	f000 f84c 	bl	8006af8 <__malloc_unlock>
 8006a60:	e7a1      	b.n	80069a6 <_malloc_r+0x22>
 8006a62:	6025      	str	r5, [r4, #0]
 8006a64:	e7de      	b.n	8006a24 <_malloc_r+0xa0>
 8006a66:	bf00      	nop
 8006a68:	20000688 	.word	0x20000688

08006a6c <_realloc_r>:
 8006a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a70:	4680      	mov	r8, r0
 8006a72:	4614      	mov	r4, r2
 8006a74:	460e      	mov	r6, r1
 8006a76:	b921      	cbnz	r1, 8006a82 <_realloc_r+0x16>
 8006a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	f7ff bf81 	b.w	8006984 <_malloc_r>
 8006a82:	b92a      	cbnz	r2, 8006a90 <_realloc_r+0x24>
 8006a84:	f7ff ff12 	bl	80068ac <_free_r>
 8006a88:	4625      	mov	r5, r4
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a90:	f000 f838 	bl	8006b04 <_malloc_usable_size_r>
 8006a94:	4284      	cmp	r4, r0
 8006a96:	4607      	mov	r7, r0
 8006a98:	d802      	bhi.n	8006aa0 <_realloc_r+0x34>
 8006a9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a9e:	d812      	bhi.n	8006ac6 <_realloc_r+0x5a>
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	f7ff ff6e 	bl	8006984 <_malloc_r>
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d0ed      	beq.n	8006a8a <_realloc_r+0x1e>
 8006aae:	42bc      	cmp	r4, r7
 8006ab0:	4622      	mov	r2, r4
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	bf28      	it	cs
 8006ab6:	463a      	movcs	r2, r7
 8006ab8:	f7ff fed0 	bl	800685c <memcpy>
 8006abc:	4631      	mov	r1, r6
 8006abe:	4640      	mov	r0, r8
 8006ac0:	f7ff fef4 	bl	80068ac <_free_r>
 8006ac4:	e7e1      	b.n	8006a8a <_realloc_r+0x1e>
 8006ac6:	4635      	mov	r5, r6
 8006ac8:	e7df      	b.n	8006a8a <_realloc_r+0x1e>
	...

08006acc <_sbrk_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4d06      	ldr	r5, [pc, #24]	; (8006ae8 <_sbrk_r+0x1c>)
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	602b      	str	r3, [r5, #0]
 8006ad8:	f7ff faf2 	bl	80060c0 <_sbrk>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_sbrk_r+0x1a>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_sbrk_r+0x1a>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	20000690 	.word	0x20000690

08006aec <__malloc_lock>:
 8006aec:	4801      	ldr	r0, [pc, #4]	; (8006af4 <__malloc_lock+0x8>)
 8006aee:	f000 b811 	b.w	8006b14 <__retarget_lock_acquire_recursive>
 8006af2:	bf00      	nop
 8006af4:	20000694 	.word	0x20000694

08006af8 <__malloc_unlock>:
 8006af8:	4801      	ldr	r0, [pc, #4]	; (8006b00 <__malloc_unlock+0x8>)
 8006afa:	f000 b80c 	b.w	8006b16 <__retarget_lock_release_recursive>
 8006afe:	bf00      	nop
 8006b00:	20000694 	.word	0x20000694

08006b04 <_malloc_usable_size_r>:
 8006b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b08:	1f18      	subs	r0, r3, #4
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bfbc      	itt	lt
 8006b0e:	580b      	ldrlt	r3, [r1, r0]
 8006b10:	18c0      	addlt	r0, r0, r3
 8006b12:	4770      	bx	lr

08006b14 <__retarget_lock_acquire_recursive>:
 8006b14:	4770      	bx	lr

08006b16 <__retarget_lock_release_recursive>:
 8006b16:	4770      	bx	lr

08006b18 <pow>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	ed2d 8b02 	vpush	{d8}
 8006b1e:	eeb0 8a40 	vmov.f32	s16, s0
 8006b22:	eef0 8a60 	vmov.f32	s17, s1
 8006b26:	ec55 4b11 	vmov	r4, r5, d1
 8006b2a:	f000 f865 	bl	8006bf8 <__ieee754_pow>
 8006b2e:	4622      	mov	r2, r4
 8006b30:	462b      	mov	r3, r5
 8006b32:	4620      	mov	r0, r4
 8006b34:	4629      	mov	r1, r5
 8006b36:	ec57 6b10 	vmov	r6, r7, d0
 8006b3a:	f7fa f80f 	bl	8000b5c <__aeabi_dcmpun>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d13b      	bne.n	8006bba <pow+0xa2>
 8006b42:	ec51 0b18 	vmov	r0, r1, d8
 8006b46:	2200      	movs	r2, #0
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f7f9 ffd5 	bl	8000af8 <__aeabi_dcmpeq>
 8006b4e:	b1b8      	cbz	r0, 8006b80 <pow+0x68>
 8006b50:	2200      	movs	r2, #0
 8006b52:	2300      	movs	r3, #0
 8006b54:	4620      	mov	r0, r4
 8006b56:	4629      	mov	r1, r5
 8006b58:	f7f9 ffce 	bl	8000af8 <__aeabi_dcmpeq>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d146      	bne.n	8006bee <pow+0xd6>
 8006b60:	ec45 4b10 	vmov	d0, r4, r5
 8006b64:	f000 fe61 	bl	800782a <finite>
 8006b68:	b338      	cbz	r0, 8006bba <pow+0xa2>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4620      	mov	r0, r4
 8006b70:	4629      	mov	r1, r5
 8006b72:	f7f9 ffcb 	bl	8000b0c <__aeabi_dcmplt>
 8006b76:	b300      	cbz	r0, 8006bba <pow+0xa2>
 8006b78:	f7ff fb2e 	bl	80061d8 <__errno>
 8006b7c:	2322      	movs	r3, #34	; 0x22
 8006b7e:	e01b      	b.n	8006bb8 <pow+0xa0>
 8006b80:	ec47 6b10 	vmov	d0, r6, r7
 8006b84:	f000 fe51 	bl	800782a <finite>
 8006b88:	b9e0      	cbnz	r0, 8006bc4 <pow+0xac>
 8006b8a:	eeb0 0a48 	vmov.f32	s0, s16
 8006b8e:	eef0 0a68 	vmov.f32	s1, s17
 8006b92:	f000 fe4a 	bl	800782a <finite>
 8006b96:	b1a8      	cbz	r0, 8006bc4 <pow+0xac>
 8006b98:	ec45 4b10 	vmov	d0, r4, r5
 8006b9c:	f000 fe45 	bl	800782a <finite>
 8006ba0:	b180      	cbz	r0, 8006bc4 <pow+0xac>
 8006ba2:	4632      	mov	r2, r6
 8006ba4:	463b      	mov	r3, r7
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	4639      	mov	r1, r7
 8006baa:	f7f9 ffd7 	bl	8000b5c <__aeabi_dcmpun>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d0e2      	beq.n	8006b78 <pow+0x60>
 8006bb2:	f7ff fb11 	bl	80061d8 <__errno>
 8006bb6:	2321      	movs	r3, #33	; 0x21
 8006bb8:	6003      	str	r3, [r0, #0]
 8006bba:	ecbd 8b02 	vpop	{d8}
 8006bbe:	ec47 6b10 	vmov	d0, r6, r7
 8006bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4630      	mov	r0, r6
 8006bca:	4639      	mov	r1, r7
 8006bcc:	f7f9 ff94 	bl	8000af8 <__aeabi_dcmpeq>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d0f2      	beq.n	8006bba <pow+0xa2>
 8006bd4:	eeb0 0a48 	vmov.f32	s0, s16
 8006bd8:	eef0 0a68 	vmov.f32	s1, s17
 8006bdc:	f000 fe25 	bl	800782a <finite>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d0ea      	beq.n	8006bba <pow+0xa2>
 8006be4:	ec45 4b10 	vmov	d0, r4, r5
 8006be8:	f000 fe1f 	bl	800782a <finite>
 8006bec:	e7c3      	b.n	8006b76 <pow+0x5e>
 8006bee:	4f01      	ldr	r7, [pc, #4]	; (8006bf4 <pow+0xdc>)
 8006bf0:	2600      	movs	r6, #0
 8006bf2:	e7e2      	b.n	8006bba <pow+0xa2>
 8006bf4:	3ff00000 	.word	0x3ff00000

08006bf8 <__ieee754_pow>:
 8006bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	ed2d 8b06 	vpush	{d8-d10}
 8006c00:	b089      	sub	sp, #36	; 0x24
 8006c02:	ed8d 1b00 	vstr	d1, [sp]
 8006c06:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006c0a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006c0e:	ea58 0102 	orrs.w	r1, r8, r2
 8006c12:	ec57 6b10 	vmov	r6, r7, d0
 8006c16:	d115      	bne.n	8006c44 <__ieee754_pow+0x4c>
 8006c18:	19b3      	adds	r3, r6, r6
 8006c1a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006c1e:	4152      	adcs	r2, r2
 8006c20:	4299      	cmp	r1, r3
 8006c22:	4b89      	ldr	r3, [pc, #548]	; (8006e48 <__ieee754_pow+0x250>)
 8006c24:	4193      	sbcs	r3, r2
 8006c26:	f080 84d2 	bcs.w	80075ce <__ieee754_pow+0x9d6>
 8006c2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c2e:	4630      	mov	r0, r6
 8006c30:	4639      	mov	r1, r7
 8006c32:	f7f9 fb43 	bl	80002bc <__adddf3>
 8006c36:	ec41 0b10 	vmov	d0, r0, r1
 8006c3a:	b009      	add	sp, #36	; 0x24
 8006c3c:	ecbd 8b06 	vpop	{d8-d10}
 8006c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c44:	4b81      	ldr	r3, [pc, #516]	; (8006e4c <__ieee754_pow+0x254>)
 8006c46:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006c4a:	429c      	cmp	r4, r3
 8006c4c:	ee10 aa10 	vmov	sl, s0
 8006c50:	463d      	mov	r5, r7
 8006c52:	dc06      	bgt.n	8006c62 <__ieee754_pow+0x6a>
 8006c54:	d101      	bne.n	8006c5a <__ieee754_pow+0x62>
 8006c56:	2e00      	cmp	r6, #0
 8006c58:	d1e7      	bne.n	8006c2a <__ieee754_pow+0x32>
 8006c5a:	4598      	cmp	r8, r3
 8006c5c:	dc01      	bgt.n	8006c62 <__ieee754_pow+0x6a>
 8006c5e:	d10f      	bne.n	8006c80 <__ieee754_pow+0x88>
 8006c60:	b172      	cbz	r2, 8006c80 <__ieee754_pow+0x88>
 8006c62:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006c66:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006c6a:	ea55 050a 	orrs.w	r5, r5, sl
 8006c6e:	d1dc      	bne.n	8006c2a <__ieee754_pow+0x32>
 8006c70:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006c74:	18db      	adds	r3, r3, r3
 8006c76:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006c7a:	4152      	adcs	r2, r2
 8006c7c:	429d      	cmp	r5, r3
 8006c7e:	e7d0      	b.n	8006c22 <__ieee754_pow+0x2a>
 8006c80:	2d00      	cmp	r5, #0
 8006c82:	da3b      	bge.n	8006cfc <__ieee754_pow+0x104>
 8006c84:	4b72      	ldr	r3, [pc, #456]	; (8006e50 <__ieee754_pow+0x258>)
 8006c86:	4598      	cmp	r8, r3
 8006c88:	dc51      	bgt.n	8006d2e <__ieee754_pow+0x136>
 8006c8a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006c8e:	4598      	cmp	r8, r3
 8006c90:	f340 84ac 	ble.w	80075ec <__ieee754_pow+0x9f4>
 8006c94:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006c98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006c9c:	2b14      	cmp	r3, #20
 8006c9e:	dd0f      	ble.n	8006cc0 <__ieee754_pow+0xc8>
 8006ca0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006ca4:	fa22 f103 	lsr.w	r1, r2, r3
 8006ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cac:	4293      	cmp	r3, r2
 8006cae:	f040 849d 	bne.w	80075ec <__ieee754_pow+0x9f4>
 8006cb2:	f001 0101 	and.w	r1, r1, #1
 8006cb6:	f1c1 0302 	rsb	r3, r1, #2
 8006cba:	9304      	str	r3, [sp, #16]
 8006cbc:	b182      	cbz	r2, 8006ce0 <__ieee754_pow+0xe8>
 8006cbe:	e05f      	b.n	8006d80 <__ieee754_pow+0x188>
 8006cc0:	2a00      	cmp	r2, #0
 8006cc2:	d15b      	bne.n	8006d7c <__ieee754_pow+0x184>
 8006cc4:	f1c3 0314 	rsb	r3, r3, #20
 8006cc8:	fa48 f103 	asr.w	r1, r8, r3
 8006ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd0:	4543      	cmp	r3, r8
 8006cd2:	f040 8488 	bne.w	80075e6 <__ieee754_pow+0x9ee>
 8006cd6:	f001 0101 	and.w	r1, r1, #1
 8006cda:	f1c1 0302 	rsb	r3, r1, #2
 8006cde:	9304      	str	r3, [sp, #16]
 8006ce0:	4b5c      	ldr	r3, [pc, #368]	; (8006e54 <__ieee754_pow+0x25c>)
 8006ce2:	4598      	cmp	r8, r3
 8006ce4:	d132      	bne.n	8006d4c <__ieee754_pow+0x154>
 8006ce6:	f1b9 0f00 	cmp.w	r9, #0
 8006cea:	f280 8478 	bge.w	80075de <__ieee754_pow+0x9e6>
 8006cee:	4959      	ldr	r1, [pc, #356]	; (8006e54 <__ieee754_pow+0x25c>)
 8006cf0:	4632      	mov	r2, r6
 8006cf2:	463b      	mov	r3, r7
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	f7f9 fdc1 	bl	800087c <__aeabi_ddiv>
 8006cfa:	e79c      	b.n	8006c36 <__ieee754_pow+0x3e>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	9304      	str	r3, [sp, #16]
 8006d00:	2a00      	cmp	r2, #0
 8006d02:	d13d      	bne.n	8006d80 <__ieee754_pow+0x188>
 8006d04:	4b51      	ldr	r3, [pc, #324]	; (8006e4c <__ieee754_pow+0x254>)
 8006d06:	4598      	cmp	r8, r3
 8006d08:	d1ea      	bne.n	8006ce0 <__ieee754_pow+0xe8>
 8006d0a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006d0e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006d12:	ea53 030a 	orrs.w	r3, r3, sl
 8006d16:	f000 845a 	beq.w	80075ce <__ieee754_pow+0x9d6>
 8006d1a:	4b4f      	ldr	r3, [pc, #316]	; (8006e58 <__ieee754_pow+0x260>)
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	dd08      	ble.n	8006d32 <__ieee754_pow+0x13a>
 8006d20:	f1b9 0f00 	cmp.w	r9, #0
 8006d24:	f2c0 8457 	blt.w	80075d6 <__ieee754_pow+0x9de>
 8006d28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d2c:	e783      	b.n	8006c36 <__ieee754_pow+0x3e>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e7e5      	b.n	8006cfe <__ieee754_pow+0x106>
 8006d32:	f1b9 0f00 	cmp.w	r9, #0
 8006d36:	f04f 0000 	mov.w	r0, #0
 8006d3a:	f04f 0100 	mov.w	r1, #0
 8006d3e:	f6bf af7a 	bge.w	8006c36 <__ieee754_pow+0x3e>
 8006d42:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006d46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006d4a:	e774      	b.n	8006c36 <__ieee754_pow+0x3e>
 8006d4c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006d50:	d106      	bne.n	8006d60 <__ieee754_pow+0x168>
 8006d52:	4632      	mov	r2, r6
 8006d54:	463b      	mov	r3, r7
 8006d56:	4630      	mov	r0, r6
 8006d58:	4639      	mov	r1, r7
 8006d5a:	f7f9 fc65 	bl	8000628 <__aeabi_dmul>
 8006d5e:	e76a      	b.n	8006c36 <__ieee754_pow+0x3e>
 8006d60:	4b3e      	ldr	r3, [pc, #248]	; (8006e5c <__ieee754_pow+0x264>)
 8006d62:	4599      	cmp	r9, r3
 8006d64:	d10c      	bne.n	8006d80 <__ieee754_pow+0x188>
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	db0a      	blt.n	8006d80 <__ieee754_pow+0x188>
 8006d6a:	ec47 6b10 	vmov	d0, r6, r7
 8006d6e:	b009      	add	sp, #36	; 0x24
 8006d70:	ecbd 8b06 	vpop	{d8-d10}
 8006d74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	f000 bc6c 	b.w	8007654 <__ieee754_sqrt>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	9304      	str	r3, [sp, #16]
 8006d80:	ec47 6b10 	vmov	d0, r6, r7
 8006d84:	f000 fd48 	bl	8007818 <fabs>
 8006d88:	ec51 0b10 	vmov	r0, r1, d0
 8006d8c:	f1ba 0f00 	cmp.w	sl, #0
 8006d90:	d129      	bne.n	8006de6 <__ieee754_pow+0x1ee>
 8006d92:	b124      	cbz	r4, 8006d9e <__ieee754_pow+0x1a6>
 8006d94:	4b2f      	ldr	r3, [pc, #188]	; (8006e54 <__ieee754_pow+0x25c>)
 8006d96:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d123      	bne.n	8006de6 <__ieee754_pow+0x1ee>
 8006d9e:	f1b9 0f00 	cmp.w	r9, #0
 8006da2:	da05      	bge.n	8006db0 <__ieee754_pow+0x1b8>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	2000      	movs	r0, #0
 8006daa:	492a      	ldr	r1, [pc, #168]	; (8006e54 <__ieee754_pow+0x25c>)
 8006dac:	f7f9 fd66 	bl	800087c <__aeabi_ddiv>
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	f6bf af40 	bge.w	8006c36 <__ieee754_pow+0x3e>
 8006db6:	9b04      	ldr	r3, [sp, #16]
 8006db8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006dbc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006dc0:	4323      	orrs	r3, r4
 8006dc2:	d108      	bne.n	8006dd6 <__ieee754_pow+0x1de>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4619      	mov	r1, r3
 8006dcc:	f7f9 fa74 	bl	80002b8 <__aeabi_dsub>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	e78f      	b.n	8006cf6 <__ieee754_pow+0xfe>
 8006dd6:	9b04      	ldr	r3, [sp, #16]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	f47f af2c 	bne.w	8006c36 <__ieee754_pow+0x3e>
 8006dde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006de2:	4619      	mov	r1, r3
 8006de4:	e727      	b.n	8006c36 <__ieee754_pow+0x3e>
 8006de6:	0feb      	lsrs	r3, r5, #31
 8006de8:	3b01      	subs	r3, #1
 8006dea:	9306      	str	r3, [sp, #24]
 8006dec:	9a06      	ldr	r2, [sp, #24]
 8006dee:	9b04      	ldr	r3, [sp, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	d102      	bne.n	8006dfa <__ieee754_pow+0x202>
 8006df4:	4632      	mov	r2, r6
 8006df6:	463b      	mov	r3, r7
 8006df8:	e7e6      	b.n	8006dc8 <__ieee754_pow+0x1d0>
 8006dfa:	4b19      	ldr	r3, [pc, #100]	; (8006e60 <__ieee754_pow+0x268>)
 8006dfc:	4598      	cmp	r8, r3
 8006dfe:	f340 80fb 	ble.w	8006ff8 <__ieee754_pow+0x400>
 8006e02:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006e06:	4598      	cmp	r8, r3
 8006e08:	4b13      	ldr	r3, [pc, #76]	; (8006e58 <__ieee754_pow+0x260>)
 8006e0a:	dd0c      	ble.n	8006e26 <__ieee754_pow+0x22e>
 8006e0c:	429c      	cmp	r4, r3
 8006e0e:	dc0f      	bgt.n	8006e30 <__ieee754_pow+0x238>
 8006e10:	f1b9 0f00 	cmp.w	r9, #0
 8006e14:	da0f      	bge.n	8006e36 <__ieee754_pow+0x23e>
 8006e16:	2000      	movs	r0, #0
 8006e18:	b009      	add	sp, #36	; 0x24
 8006e1a:	ecbd 8b06 	vpop	{d8-d10}
 8006e1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e22:	f000 bcf0 	b.w	8007806 <__math_oflow>
 8006e26:	429c      	cmp	r4, r3
 8006e28:	dbf2      	blt.n	8006e10 <__ieee754_pow+0x218>
 8006e2a:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <__ieee754_pow+0x25c>)
 8006e2c:	429c      	cmp	r4, r3
 8006e2e:	dd19      	ble.n	8006e64 <__ieee754_pow+0x26c>
 8006e30:	f1b9 0f00 	cmp.w	r9, #0
 8006e34:	dcef      	bgt.n	8006e16 <__ieee754_pow+0x21e>
 8006e36:	2000      	movs	r0, #0
 8006e38:	b009      	add	sp, #36	; 0x24
 8006e3a:	ecbd 8b06 	vpop	{d8-d10}
 8006e3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e42:	f000 bcd7 	b.w	80077f4 <__math_uflow>
 8006e46:	bf00      	nop
 8006e48:	fff00000 	.word	0xfff00000
 8006e4c:	7ff00000 	.word	0x7ff00000
 8006e50:	433fffff 	.word	0x433fffff
 8006e54:	3ff00000 	.word	0x3ff00000
 8006e58:	3fefffff 	.word	0x3fefffff
 8006e5c:	3fe00000 	.word	0x3fe00000
 8006e60:	41e00000 	.word	0x41e00000
 8006e64:	4b60      	ldr	r3, [pc, #384]	; (8006fe8 <__ieee754_pow+0x3f0>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	f7f9 fa26 	bl	80002b8 <__aeabi_dsub>
 8006e6c:	a354      	add	r3, pc, #336	; (adr r3, 8006fc0 <__ieee754_pow+0x3c8>)
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	4604      	mov	r4, r0
 8006e74:	460d      	mov	r5, r1
 8006e76:	f7f9 fbd7 	bl	8000628 <__aeabi_dmul>
 8006e7a:	a353      	add	r3, pc, #332	; (adr r3, 8006fc8 <__ieee754_pow+0x3d0>)
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	4606      	mov	r6, r0
 8006e82:	460f      	mov	r7, r1
 8006e84:	4620      	mov	r0, r4
 8006e86:	4629      	mov	r1, r5
 8006e88:	f7f9 fbce 	bl	8000628 <__aeabi_dmul>
 8006e8c:	4b57      	ldr	r3, [pc, #348]	; (8006fec <__ieee754_pow+0x3f4>)
 8006e8e:	4682      	mov	sl, r0
 8006e90:	468b      	mov	fp, r1
 8006e92:	2200      	movs	r2, #0
 8006e94:	4620      	mov	r0, r4
 8006e96:	4629      	mov	r1, r5
 8006e98:	f7f9 fbc6 	bl	8000628 <__aeabi_dmul>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	a14b      	add	r1, pc, #300	; (adr r1, 8006fd0 <__ieee754_pow+0x3d8>)
 8006ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ea6:	f7f9 fa07 	bl	80002b8 <__aeabi_dsub>
 8006eaa:	4622      	mov	r2, r4
 8006eac:	462b      	mov	r3, r5
 8006eae:	f7f9 fbbb 	bl	8000628 <__aeabi_dmul>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	494d      	ldr	r1, [pc, #308]	; (8006ff0 <__ieee754_pow+0x3f8>)
 8006eba:	f7f9 f9fd 	bl	80002b8 <__aeabi_dsub>
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	4680      	mov	r8, r0
 8006ec2:	4689      	mov	r9, r1
 8006ec4:	462b      	mov	r3, r5
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	4629      	mov	r1, r5
 8006eca:	f7f9 fbad 	bl	8000628 <__aeabi_dmul>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	f7f9 fba7 	bl	8000628 <__aeabi_dmul>
 8006eda:	a33f      	add	r3, pc, #252	; (adr r3, 8006fd8 <__ieee754_pow+0x3e0>)
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	f7f9 fba2 	bl	8000628 <__aeabi_dmul>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4650      	mov	r0, sl
 8006eea:	4659      	mov	r1, fp
 8006eec:	f7f9 f9e4 	bl	80002b8 <__aeabi_dsub>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4680      	mov	r8, r0
 8006ef6:	4689      	mov	r9, r1
 8006ef8:	4630      	mov	r0, r6
 8006efa:	4639      	mov	r1, r7
 8006efc:	f7f9 f9de 	bl	80002bc <__adddf3>
 8006f00:	2000      	movs	r0, #0
 8006f02:	4632      	mov	r2, r6
 8006f04:	463b      	mov	r3, r7
 8006f06:	4604      	mov	r4, r0
 8006f08:	460d      	mov	r5, r1
 8006f0a:	f7f9 f9d5 	bl	80002b8 <__aeabi_dsub>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4640      	mov	r0, r8
 8006f14:	4649      	mov	r1, r9
 8006f16:	f7f9 f9cf 	bl	80002b8 <__aeabi_dsub>
 8006f1a:	9b04      	ldr	r3, [sp, #16]
 8006f1c:	9a06      	ldr	r2, [sp, #24]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	4313      	orrs	r3, r2
 8006f22:	4682      	mov	sl, r0
 8006f24:	468b      	mov	fp, r1
 8006f26:	f040 81e7 	bne.w	80072f8 <__ieee754_pow+0x700>
 8006f2a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006fe0 <__ieee754_pow+0x3e8>
 8006f2e:	eeb0 8a47 	vmov.f32	s16, s14
 8006f32:	eef0 8a67 	vmov.f32	s17, s15
 8006f36:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006f3a:	2600      	movs	r6, #0
 8006f3c:	4632      	mov	r2, r6
 8006f3e:	463b      	mov	r3, r7
 8006f40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f44:	f7f9 f9b8 	bl	80002b8 <__aeabi_dsub>
 8006f48:	4622      	mov	r2, r4
 8006f4a:	462b      	mov	r3, r5
 8006f4c:	f7f9 fb6c 	bl	8000628 <__aeabi_dmul>
 8006f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f54:	4680      	mov	r8, r0
 8006f56:	4689      	mov	r9, r1
 8006f58:	4650      	mov	r0, sl
 8006f5a:	4659      	mov	r1, fp
 8006f5c:	f7f9 fb64 	bl	8000628 <__aeabi_dmul>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4640      	mov	r0, r8
 8006f66:	4649      	mov	r1, r9
 8006f68:	f7f9 f9a8 	bl	80002bc <__adddf3>
 8006f6c:	4632      	mov	r2, r6
 8006f6e:	463b      	mov	r3, r7
 8006f70:	4680      	mov	r8, r0
 8006f72:	4689      	mov	r9, r1
 8006f74:	4620      	mov	r0, r4
 8006f76:	4629      	mov	r1, r5
 8006f78:	f7f9 fb56 	bl	8000628 <__aeabi_dmul>
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4604      	mov	r4, r0
 8006f80:	460d      	mov	r5, r1
 8006f82:	4602      	mov	r2, r0
 8006f84:	4649      	mov	r1, r9
 8006f86:	4640      	mov	r0, r8
 8006f88:	f7f9 f998 	bl	80002bc <__adddf3>
 8006f8c:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <__ieee754_pow+0x3fc>)
 8006f8e:	4299      	cmp	r1, r3
 8006f90:	ec45 4b19 	vmov	d9, r4, r5
 8006f94:	4606      	mov	r6, r0
 8006f96:	460f      	mov	r7, r1
 8006f98:	468b      	mov	fp, r1
 8006f9a:	f340 82f1 	ble.w	8007580 <__ieee754_pow+0x988>
 8006f9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006fa2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006fa6:	4303      	orrs	r3, r0
 8006fa8:	f000 81e4 	beq.w	8007374 <__ieee754_pow+0x77c>
 8006fac:	ec51 0b18 	vmov	r0, r1, d8
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	f7f9 fdaa 	bl	8000b0c <__aeabi_dcmplt>
 8006fb8:	3800      	subs	r0, #0
 8006fba:	bf18      	it	ne
 8006fbc:	2001      	movne	r0, #1
 8006fbe:	e72b      	b.n	8006e18 <__ieee754_pow+0x220>
 8006fc0:	60000000 	.word	0x60000000
 8006fc4:	3ff71547 	.word	0x3ff71547
 8006fc8:	f85ddf44 	.word	0xf85ddf44
 8006fcc:	3e54ae0b 	.word	0x3e54ae0b
 8006fd0:	55555555 	.word	0x55555555
 8006fd4:	3fd55555 	.word	0x3fd55555
 8006fd8:	652b82fe 	.word	0x652b82fe
 8006fdc:	3ff71547 	.word	0x3ff71547
 8006fe0:	00000000 	.word	0x00000000
 8006fe4:	bff00000 	.word	0xbff00000
 8006fe8:	3ff00000 	.word	0x3ff00000
 8006fec:	3fd00000 	.word	0x3fd00000
 8006ff0:	3fe00000 	.word	0x3fe00000
 8006ff4:	408fffff 	.word	0x408fffff
 8006ff8:	4bd5      	ldr	r3, [pc, #852]	; (8007350 <__ieee754_pow+0x758>)
 8006ffa:	402b      	ands	r3, r5
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	b92b      	cbnz	r3, 800700c <__ieee754_pow+0x414>
 8007000:	4bd4      	ldr	r3, [pc, #848]	; (8007354 <__ieee754_pow+0x75c>)
 8007002:	f7f9 fb11 	bl	8000628 <__aeabi_dmul>
 8007006:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800700a:	460c      	mov	r4, r1
 800700c:	1523      	asrs	r3, r4, #20
 800700e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007012:	4413      	add	r3, r2
 8007014:	9305      	str	r3, [sp, #20]
 8007016:	4bd0      	ldr	r3, [pc, #832]	; (8007358 <__ieee754_pow+0x760>)
 8007018:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800701c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007020:	429c      	cmp	r4, r3
 8007022:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007026:	dd08      	ble.n	800703a <__ieee754_pow+0x442>
 8007028:	4bcc      	ldr	r3, [pc, #816]	; (800735c <__ieee754_pow+0x764>)
 800702a:	429c      	cmp	r4, r3
 800702c:	f340 8162 	ble.w	80072f4 <__ieee754_pow+0x6fc>
 8007030:	9b05      	ldr	r3, [sp, #20]
 8007032:	3301      	adds	r3, #1
 8007034:	9305      	str	r3, [sp, #20]
 8007036:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800703a:	2400      	movs	r4, #0
 800703c:	00e3      	lsls	r3, r4, #3
 800703e:	9307      	str	r3, [sp, #28]
 8007040:	4bc7      	ldr	r3, [pc, #796]	; (8007360 <__ieee754_pow+0x768>)
 8007042:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007046:	ed93 7b00 	vldr	d7, [r3]
 800704a:	4629      	mov	r1, r5
 800704c:	ec53 2b17 	vmov	r2, r3, d7
 8007050:	eeb0 9a47 	vmov.f32	s18, s14
 8007054:	eef0 9a67 	vmov.f32	s19, s15
 8007058:	4682      	mov	sl, r0
 800705a:	f7f9 f92d 	bl	80002b8 <__aeabi_dsub>
 800705e:	4652      	mov	r2, sl
 8007060:	4606      	mov	r6, r0
 8007062:	460f      	mov	r7, r1
 8007064:	462b      	mov	r3, r5
 8007066:	ec51 0b19 	vmov	r0, r1, d9
 800706a:	f7f9 f927 	bl	80002bc <__adddf3>
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	2000      	movs	r0, #0
 8007074:	49bb      	ldr	r1, [pc, #748]	; (8007364 <__ieee754_pow+0x76c>)
 8007076:	f7f9 fc01 	bl	800087c <__aeabi_ddiv>
 800707a:	ec41 0b1a 	vmov	d10, r0, r1
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	4630      	mov	r0, r6
 8007084:	4639      	mov	r1, r7
 8007086:	f7f9 facf 	bl	8000628 <__aeabi_dmul>
 800708a:	2300      	movs	r3, #0
 800708c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007090:	9302      	str	r3, [sp, #8]
 8007092:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007096:	46ab      	mov	fp, r5
 8007098:	106d      	asrs	r5, r5, #1
 800709a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800709e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80070a2:	ec41 0b18 	vmov	d8, r0, r1
 80070a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80070aa:	2200      	movs	r2, #0
 80070ac:	4640      	mov	r0, r8
 80070ae:	4649      	mov	r1, r9
 80070b0:	4614      	mov	r4, r2
 80070b2:	461d      	mov	r5, r3
 80070b4:	f7f9 fab8 	bl	8000628 <__aeabi_dmul>
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4630      	mov	r0, r6
 80070be:	4639      	mov	r1, r7
 80070c0:	f7f9 f8fa 	bl	80002b8 <__aeabi_dsub>
 80070c4:	ec53 2b19 	vmov	r2, r3, d9
 80070c8:	4606      	mov	r6, r0
 80070ca:	460f      	mov	r7, r1
 80070cc:	4620      	mov	r0, r4
 80070ce:	4629      	mov	r1, r5
 80070d0:	f7f9 f8f2 	bl	80002b8 <__aeabi_dsub>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4650      	mov	r0, sl
 80070da:	4659      	mov	r1, fp
 80070dc:	f7f9 f8ec 	bl	80002b8 <__aeabi_dsub>
 80070e0:	4642      	mov	r2, r8
 80070e2:	464b      	mov	r3, r9
 80070e4:	f7f9 faa0 	bl	8000628 <__aeabi_dmul>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4630      	mov	r0, r6
 80070ee:	4639      	mov	r1, r7
 80070f0:	f7f9 f8e2 	bl	80002b8 <__aeabi_dsub>
 80070f4:	ec53 2b1a 	vmov	r2, r3, d10
 80070f8:	f7f9 fa96 	bl	8000628 <__aeabi_dmul>
 80070fc:	ec53 2b18 	vmov	r2, r3, d8
 8007100:	ec41 0b19 	vmov	d9, r0, r1
 8007104:	ec51 0b18 	vmov	r0, r1, d8
 8007108:	f7f9 fa8e 	bl	8000628 <__aeabi_dmul>
 800710c:	a37c      	add	r3, pc, #496	; (adr r3, 8007300 <__ieee754_pow+0x708>)
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	4604      	mov	r4, r0
 8007114:	460d      	mov	r5, r1
 8007116:	f7f9 fa87 	bl	8000628 <__aeabi_dmul>
 800711a:	a37b      	add	r3, pc, #492	; (adr r3, 8007308 <__ieee754_pow+0x710>)
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	f7f9 f8cc 	bl	80002bc <__adddf3>
 8007124:	4622      	mov	r2, r4
 8007126:	462b      	mov	r3, r5
 8007128:	f7f9 fa7e 	bl	8000628 <__aeabi_dmul>
 800712c:	a378      	add	r3, pc, #480	; (adr r3, 8007310 <__ieee754_pow+0x718>)
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f7f9 f8c3 	bl	80002bc <__adddf3>
 8007136:	4622      	mov	r2, r4
 8007138:	462b      	mov	r3, r5
 800713a:	f7f9 fa75 	bl	8000628 <__aeabi_dmul>
 800713e:	a376      	add	r3, pc, #472	; (adr r3, 8007318 <__ieee754_pow+0x720>)
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	f7f9 f8ba 	bl	80002bc <__adddf3>
 8007148:	4622      	mov	r2, r4
 800714a:	462b      	mov	r3, r5
 800714c:	f7f9 fa6c 	bl	8000628 <__aeabi_dmul>
 8007150:	a373      	add	r3, pc, #460	; (adr r3, 8007320 <__ieee754_pow+0x728>)
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	f7f9 f8b1 	bl	80002bc <__adddf3>
 800715a:	4622      	mov	r2, r4
 800715c:	462b      	mov	r3, r5
 800715e:	f7f9 fa63 	bl	8000628 <__aeabi_dmul>
 8007162:	a371      	add	r3, pc, #452	; (adr r3, 8007328 <__ieee754_pow+0x730>)
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f7f9 f8a8 	bl	80002bc <__adddf3>
 800716c:	4622      	mov	r2, r4
 800716e:	4606      	mov	r6, r0
 8007170:	460f      	mov	r7, r1
 8007172:	462b      	mov	r3, r5
 8007174:	4620      	mov	r0, r4
 8007176:	4629      	mov	r1, r5
 8007178:	f7f9 fa56 	bl	8000628 <__aeabi_dmul>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4630      	mov	r0, r6
 8007182:	4639      	mov	r1, r7
 8007184:	f7f9 fa50 	bl	8000628 <__aeabi_dmul>
 8007188:	4642      	mov	r2, r8
 800718a:	4604      	mov	r4, r0
 800718c:	460d      	mov	r5, r1
 800718e:	464b      	mov	r3, r9
 8007190:	ec51 0b18 	vmov	r0, r1, d8
 8007194:	f7f9 f892 	bl	80002bc <__adddf3>
 8007198:	ec53 2b19 	vmov	r2, r3, d9
 800719c:	f7f9 fa44 	bl	8000628 <__aeabi_dmul>
 80071a0:	4622      	mov	r2, r4
 80071a2:	462b      	mov	r3, r5
 80071a4:	f7f9 f88a 	bl	80002bc <__adddf3>
 80071a8:	4642      	mov	r2, r8
 80071aa:	4682      	mov	sl, r0
 80071ac:	468b      	mov	fp, r1
 80071ae:	464b      	mov	r3, r9
 80071b0:	4640      	mov	r0, r8
 80071b2:	4649      	mov	r1, r9
 80071b4:	f7f9 fa38 	bl	8000628 <__aeabi_dmul>
 80071b8:	4b6b      	ldr	r3, [pc, #428]	; (8007368 <__ieee754_pow+0x770>)
 80071ba:	2200      	movs	r2, #0
 80071bc:	4606      	mov	r6, r0
 80071be:	460f      	mov	r7, r1
 80071c0:	f7f9 f87c 	bl	80002bc <__adddf3>
 80071c4:	4652      	mov	r2, sl
 80071c6:	465b      	mov	r3, fp
 80071c8:	f7f9 f878 	bl	80002bc <__adddf3>
 80071cc:	2000      	movs	r0, #0
 80071ce:	4604      	mov	r4, r0
 80071d0:	460d      	mov	r5, r1
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4640      	mov	r0, r8
 80071d8:	4649      	mov	r1, r9
 80071da:	f7f9 fa25 	bl	8000628 <__aeabi_dmul>
 80071de:	4b62      	ldr	r3, [pc, #392]	; (8007368 <__ieee754_pow+0x770>)
 80071e0:	4680      	mov	r8, r0
 80071e2:	4689      	mov	r9, r1
 80071e4:	2200      	movs	r2, #0
 80071e6:	4620      	mov	r0, r4
 80071e8:	4629      	mov	r1, r5
 80071ea:	f7f9 f865 	bl	80002b8 <__aeabi_dsub>
 80071ee:	4632      	mov	r2, r6
 80071f0:	463b      	mov	r3, r7
 80071f2:	f7f9 f861 	bl	80002b8 <__aeabi_dsub>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	4650      	mov	r0, sl
 80071fc:	4659      	mov	r1, fp
 80071fe:	f7f9 f85b 	bl	80002b8 <__aeabi_dsub>
 8007202:	ec53 2b18 	vmov	r2, r3, d8
 8007206:	f7f9 fa0f 	bl	8000628 <__aeabi_dmul>
 800720a:	4622      	mov	r2, r4
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
 8007210:	462b      	mov	r3, r5
 8007212:	ec51 0b19 	vmov	r0, r1, d9
 8007216:	f7f9 fa07 	bl	8000628 <__aeabi_dmul>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4630      	mov	r0, r6
 8007220:	4639      	mov	r1, r7
 8007222:	f7f9 f84b 	bl	80002bc <__adddf3>
 8007226:	4606      	mov	r6, r0
 8007228:	460f      	mov	r7, r1
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4640      	mov	r0, r8
 8007230:	4649      	mov	r1, r9
 8007232:	f7f9 f843 	bl	80002bc <__adddf3>
 8007236:	a33e      	add	r3, pc, #248	; (adr r3, 8007330 <__ieee754_pow+0x738>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	2000      	movs	r0, #0
 800723e:	4604      	mov	r4, r0
 8007240:	460d      	mov	r5, r1
 8007242:	f7f9 f9f1 	bl	8000628 <__aeabi_dmul>
 8007246:	4642      	mov	r2, r8
 8007248:	ec41 0b18 	vmov	d8, r0, r1
 800724c:	464b      	mov	r3, r9
 800724e:	4620      	mov	r0, r4
 8007250:	4629      	mov	r1, r5
 8007252:	f7f9 f831 	bl	80002b8 <__aeabi_dsub>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	4630      	mov	r0, r6
 800725c:	4639      	mov	r1, r7
 800725e:	f7f9 f82b 	bl	80002b8 <__aeabi_dsub>
 8007262:	a335      	add	r3, pc, #212	; (adr r3, 8007338 <__ieee754_pow+0x740>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	f7f9 f9de 	bl	8000628 <__aeabi_dmul>
 800726c:	a334      	add	r3, pc, #208	; (adr r3, 8007340 <__ieee754_pow+0x748>)
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	4606      	mov	r6, r0
 8007274:	460f      	mov	r7, r1
 8007276:	4620      	mov	r0, r4
 8007278:	4629      	mov	r1, r5
 800727a:	f7f9 f9d5 	bl	8000628 <__aeabi_dmul>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4630      	mov	r0, r6
 8007284:	4639      	mov	r1, r7
 8007286:	f7f9 f819 	bl	80002bc <__adddf3>
 800728a:	9a07      	ldr	r2, [sp, #28]
 800728c:	4b37      	ldr	r3, [pc, #220]	; (800736c <__ieee754_pow+0x774>)
 800728e:	4413      	add	r3, r2
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	f7f9 f812 	bl	80002bc <__adddf3>
 8007298:	4682      	mov	sl, r0
 800729a:	9805      	ldr	r0, [sp, #20]
 800729c:	468b      	mov	fp, r1
 800729e:	f7f9 f959 	bl	8000554 <__aeabi_i2d>
 80072a2:	9a07      	ldr	r2, [sp, #28]
 80072a4:	4b32      	ldr	r3, [pc, #200]	; (8007370 <__ieee754_pow+0x778>)
 80072a6:	4413      	add	r3, r2
 80072a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072ac:	4606      	mov	r6, r0
 80072ae:	460f      	mov	r7, r1
 80072b0:	4652      	mov	r2, sl
 80072b2:	465b      	mov	r3, fp
 80072b4:	ec51 0b18 	vmov	r0, r1, d8
 80072b8:	f7f9 f800 	bl	80002bc <__adddf3>
 80072bc:	4642      	mov	r2, r8
 80072be:	464b      	mov	r3, r9
 80072c0:	f7f8 fffc 	bl	80002bc <__adddf3>
 80072c4:	4632      	mov	r2, r6
 80072c6:	463b      	mov	r3, r7
 80072c8:	f7f8 fff8 	bl	80002bc <__adddf3>
 80072cc:	2000      	movs	r0, #0
 80072ce:	4632      	mov	r2, r6
 80072d0:	463b      	mov	r3, r7
 80072d2:	4604      	mov	r4, r0
 80072d4:	460d      	mov	r5, r1
 80072d6:	f7f8 ffef 	bl	80002b8 <__aeabi_dsub>
 80072da:	4642      	mov	r2, r8
 80072dc:	464b      	mov	r3, r9
 80072de:	f7f8 ffeb 	bl	80002b8 <__aeabi_dsub>
 80072e2:	ec53 2b18 	vmov	r2, r3, d8
 80072e6:	f7f8 ffe7 	bl	80002b8 <__aeabi_dsub>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4650      	mov	r0, sl
 80072f0:	4659      	mov	r1, fp
 80072f2:	e610      	b.n	8006f16 <__ieee754_pow+0x31e>
 80072f4:	2401      	movs	r4, #1
 80072f6:	e6a1      	b.n	800703c <__ieee754_pow+0x444>
 80072f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007348 <__ieee754_pow+0x750>
 80072fc:	e617      	b.n	8006f2e <__ieee754_pow+0x336>
 80072fe:	bf00      	nop
 8007300:	4a454eef 	.word	0x4a454eef
 8007304:	3fca7e28 	.word	0x3fca7e28
 8007308:	93c9db65 	.word	0x93c9db65
 800730c:	3fcd864a 	.word	0x3fcd864a
 8007310:	a91d4101 	.word	0xa91d4101
 8007314:	3fd17460 	.word	0x3fd17460
 8007318:	518f264d 	.word	0x518f264d
 800731c:	3fd55555 	.word	0x3fd55555
 8007320:	db6fabff 	.word	0xdb6fabff
 8007324:	3fdb6db6 	.word	0x3fdb6db6
 8007328:	33333303 	.word	0x33333303
 800732c:	3fe33333 	.word	0x3fe33333
 8007330:	e0000000 	.word	0xe0000000
 8007334:	3feec709 	.word	0x3feec709
 8007338:	dc3a03fd 	.word	0xdc3a03fd
 800733c:	3feec709 	.word	0x3feec709
 8007340:	145b01f5 	.word	0x145b01f5
 8007344:	be3e2fe0 	.word	0xbe3e2fe0
 8007348:	00000000 	.word	0x00000000
 800734c:	3ff00000 	.word	0x3ff00000
 8007350:	7ff00000 	.word	0x7ff00000
 8007354:	43400000 	.word	0x43400000
 8007358:	0003988e 	.word	0x0003988e
 800735c:	000bb679 	.word	0x000bb679
 8007360:	080081f8 	.word	0x080081f8
 8007364:	3ff00000 	.word	0x3ff00000
 8007368:	40080000 	.word	0x40080000
 800736c:	08008218 	.word	0x08008218
 8007370:	08008208 	.word	0x08008208
 8007374:	a3b5      	add	r3, pc, #724	; (adr r3, 800764c <__ieee754_pow+0xa54>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	4640      	mov	r0, r8
 800737c:	4649      	mov	r1, r9
 800737e:	f7f8 ff9d 	bl	80002bc <__adddf3>
 8007382:	4622      	mov	r2, r4
 8007384:	ec41 0b1a 	vmov	d10, r0, r1
 8007388:	462b      	mov	r3, r5
 800738a:	4630      	mov	r0, r6
 800738c:	4639      	mov	r1, r7
 800738e:	f7f8 ff93 	bl	80002b8 <__aeabi_dsub>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	ec51 0b1a 	vmov	r0, r1, d10
 800739a:	f7f9 fbd5 	bl	8000b48 <__aeabi_dcmpgt>
 800739e:	2800      	cmp	r0, #0
 80073a0:	f47f ae04 	bne.w	8006fac <__ieee754_pow+0x3b4>
 80073a4:	4aa4      	ldr	r2, [pc, #656]	; (8007638 <__ieee754_pow+0xa40>)
 80073a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073aa:	4293      	cmp	r3, r2
 80073ac:	f340 8108 	ble.w	80075c0 <__ieee754_pow+0x9c8>
 80073b0:	151b      	asrs	r3, r3, #20
 80073b2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80073b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80073ba:	fa4a f303 	asr.w	r3, sl, r3
 80073be:	445b      	add	r3, fp
 80073c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80073c4:	4e9d      	ldr	r6, [pc, #628]	; (800763c <__ieee754_pow+0xa44>)
 80073c6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80073ca:	4116      	asrs	r6, r2
 80073cc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80073d0:	2000      	movs	r0, #0
 80073d2:	ea23 0106 	bic.w	r1, r3, r6
 80073d6:	f1c2 0214 	rsb	r2, r2, #20
 80073da:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80073de:	fa4a fa02 	asr.w	sl, sl, r2
 80073e2:	f1bb 0f00 	cmp.w	fp, #0
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4620      	mov	r0, r4
 80073ec:	4629      	mov	r1, r5
 80073ee:	bfb8      	it	lt
 80073f0:	f1ca 0a00 	rsblt	sl, sl, #0
 80073f4:	f7f8 ff60 	bl	80002b8 <__aeabi_dsub>
 80073f8:	ec41 0b19 	vmov	d9, r0, r1
 80073fc:	4642      	mov	r2, r8
 80073fe:	464b      	mov	r3, r9
 8007400:	ec51 0b19 	vmov	r0, r1, d9
 8007404:	f7f8 ff5a 	bl	80002bc <__adddf3>
 8007408:	a37b      	add	r3, pc, #492	; (adr r3, 80075f8 <__ieee754_pow+0xa00>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	2000      	movs	r0, #0
 8007410:	4604      	mov	r4, r0
 8007412:	460d      	mov	r5, r1
 8007414:	f7f9 f908 	bl	8000628 <__aeabi_dmul>
 8007418:	ec53 2b19 	vmov	r2, r3, d9
 800741c:	4606      	mov	r6, r0
 800741e:	460f      	mov	r7, r1
 8007420:	4620      	mov	r0, r4
 8007422:	4629      	mov	r1, r5
 8007424:	f7f8 ff48 	bl	80002b8 <__aeabi_dsub>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4640      	mov	r0, r8
 800742e:	4649      	mov	r1, r9
 8007430:	f7f8 ff42 	bl	80002b8 <__aeabi_dsub>
 8007434:	a372      	add	r3, pc, #456	; (adr r3, 8007600 <__ieee754_pow+0xa08>)
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	f7f9 f8f5 	bl	8000628 <__aeabi_dmul>
 800743e:	a372      	add	r3, pc, #456	; (adr r3, 8007608 <__ieee754_pow+0xa10>)
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	4680      	mov	r8, r0
 8007446:	4689      	mov	r9, r1
 8007448:	4620      	mov	r0, r4
 800744a:	4629      	mov	r1, r5
 800744c:	f7f9 f8ec 	bl	8000628 <__aeabi_dmul>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4640      	mov	r0, r8
 8007456:	4649      	mov	r1, r9
 8007458:	f7f8 ff30 	bl	80002bc <__adddf3>
 800745c:	4604      	mov	r4, r0
 800745e:	460d      	mov	r5, r1
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4630      	mov	r0, r6
 8007466:	4639      	mov	r1, r7
 8007468:	f7f8 ff28 	bl	80002bc <__adddf3>
 800746c:	4632      	mov	r2, r6
 800746e:	463b      	mov	r3, r7
 8007470:	4680      	mov	r8, r0
 8007472:	4689      	mov	r9, r1
 8007474:	f7f8 ff20 	bl	80002b8 <__aeabi_dsub>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4620      	mov	r0, r4
 800747e:	4629      	mov	r1, r5
 8007480:	f7f8 ff1a 	bl	80002b8 <__aeabi_dsub>
 8007484:	4642      	mov	r2, r8
 8007486:	4606      	mov	r6, r0
 8007488:	460f      	mov	r7, r1
 800748a:	464b      	mov	r3, r9
 800748c:	4640      	mov	r0, r8
 800748e:	4649      	mov	r1, r9
 8007490:	f7f9 f8ca 	bl	8000628 <__aeabi_dmul>
 8007494:	a35e      	add	r3, pc, #376	; (adr r3, 8007610 <__ieee754_pow+0xa18>)
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	4604      	mov	r4, r0
 800749c:	460d      	mov	r5, r1
 800749e:	f7f9 f8c3 	bl	8000628 <__aeabi_dmul>
 80074a2:	a35d      	add	r3, pc, #372	; (adr r3, 8007618 <__ieee754_pow+0xa20>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f7f8 ff06 	bl	80002b8 <__aeabi_dsub>
 80074ac:	4622      	mov	r2, r4
 80074ae:	462b      	mov	r3, r5
 80074b0:	f7f9 f8ba 	bl	8000628 <__aeabi_dmul>
 80074b4:	a35a      	add	r3, pc, #360	; (adr r3, 8007620 <__ieee754_pow+0xa28>)
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f7f8 feff 	bl	80002bc <__adddf3>
 80074be:	4622      	mov	r2, r4
 80074c0:	462b      	mov	r3, r5
 80074c2:	f7f9 f8b1 	bl	8000628 <__aeabi_dmul>
 80074c6:	a358      	add	r3, pc, #352	; (adr r3, 8007628 <__ieee754_pow+0xa30>)
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	f7f8 fef4 	bl	80002b8 <__aeabi_dsub>
 80074d0:	4622      	mov	r2, r4
 80074d2:	462b      	mov	r3, r5
 80074d4:	f7f9 f8a8 	bl	8000628 <__aeabi_dmul>
 80074d8:	a355      	add	r3, pc, #340	; (adr r3, 8007630 <__ieee754_pow+0xa38>)
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	f7f8 feed 	bl	80002bc <__adddf3>
 80074e2:	4622      	mov	r2, r4
 80074e4:	462b      	mov	r3, r5
 80074e6:	f7f9 f89f 	bl	8000628 <__aeabi_dmul>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4640      	mov	r0, r8
 80074f0:	4649      	mov	r1, r9
 80074f2:	f7f8 fee1 	bl	80002b8 <__aeabi_dsub>
 80074f6:	4604      	mov	r4, r0
 80074f8:	460d      	mov	r5, r1
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4640      	mov	r0, r8
 8007500:	4649      	mov	r1, r9
 8007502:	f7f9 f891 	bl	8000628 <__aeabi_dmul>
 8007506:	2200      	movs	r2, #0
 8007508:	ec41 0b19 	vmov	d9, r0, r1
 800750c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007510:	4620      	mov	r0, r4
 8007512:	4629      	mov	r1, r5
 8007514:	f7f8 fed0 	bl	80002b8 <__aeabi_dsub>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	ec51 0b19 	vmov	r0, r1, d9
 8007520:	f7f9 f9ac 	bl	800087c <__aeabi_ddiv>
 8007524:	4632      	mov	r2, r6
 8007526:	4604      	mov	r4, r0
 8007528:	460d      	mov	r5, r1
 800752a:	463b      	mov	r3, r7
 800752c:	4640      	mov	r0, r8
 800752e:	4649      	mov	r1, r9
 8007530:	f7f9 f87a 	bl	8000628 <__aeabi_dmul>
 8007534:	4632      	mov	r2, r6
 8007536:	463b      	mov	r3, r7
 8007538:	f7f8 fec0 	bl	80002bc <__adddf3>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4620      	mov	r0, r4
 8007542:	4629      	mov	r1, r5
 8007544:	f7f8 feb8 	bl	80002b8 <__aeabi_dsub>
 8007548:	4642      	mov	r2, r8
 800754a:	464b      	mov	r3, r9
 800754c:	f7f8 feb4 	bl	80002b8 <__aeabi_dsub>
 8007550:	460b      	mov	r3, r1
 8007552:	4602      	mov	r2, r0
 8007554:	493a      	ldr	r1, [pc, #232]	; (8007640 <__ieee754_pow+0xa48>)
 8007556:	2000      	movs	r0, #0
 8007558:	f7f8 feae 	bl	80002b8 <__aeabi_dsub>
 800755c:	ec41 0b10 	vmov	d0, r0, r1
 8007560:	ee10 3a90 	vmov	r3, s1
 8007564:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800756c:	da2b      	bge.n	80075c6 <__ieee754_pow+0x9ce>
 800756e:	4650      	mov	r0, sl
 8007570:	f000 f966 	bl	8007840 <scalbn>
 8007574:	ec51 0b10 	vmov	r0, r1, d0
 8007578:	ec53 2b18 	vmov	r2, r3, d8
 800757c:	f7ff bbed 	b.w	8006d5a <__ieee754_pow+0x162>
 8007580:	4b30      	ldr	r3, [pc, #192]	; (8007644 <__ieee754_pow+0xa4c>)
 8007582:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007586:	429e      	cmp	r6, r3
 8007588:	f77f af0c 	ble.w	80073a4 <__ieee754_pow+0x7ac>
 800758c:	4b2e      	ldr	r3, [pc, #184]	; (8007648 <__ieee754_pow+0xa50>)
 800758e:	440b      	add	r3, r1
 8007590:	4303      	orrs	r3, r0
 8007592:	d009      	beq.n	80075a8 <__ieee754_pow+0x9b0>
 8007594:	ec51 0b18 	vmov	r0, r1, d8
 8007598:	2200      	movs	r2, #0
 800759a:	2300      	movs	r3, #0
 800759c:	f7f9 fab6 	bl	8000b0c <__aeabi_dcmplt>
 80075a0:	3800      	subs	r0, #0
 80075a2:	bf18      	it	ne
 80075a4:	2001      	movne	r0, #1
 80075a6:	e447      	b.n	8006e38 <__ieee754_pow+0x240>
 80075a8:	4622      	mov	r2, r4
 80075aa:	462b      	mov	r3, r5
 80075ac:	f7f8 fe84 	bl	80002b8 <__aeabi_dsub>
 80075b0:	4642      	mov	r2, r8
 80075b2:	464b      	mov	r3, r9
 80075b4:	f7f9 fabe 	bl	8000b34 <__aeabi_dcmpge>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	f43f aef3 	beq.w	80073a4 <__ieee754_pow+0x7ac>
 80075be:	e7e9      	b.n	8007594 <__ieee754_pow+0x99c>
 80075c0:	f04f 0a00 	mov.w	sl, #0
 80075c4:	e71a      	b.n	80073fc <__ieee754_pow+0x804>
 80075c6:	ec51 0b10 	vmov	r0, r1, d0
 80075ca:	4619      	mov	r1, r3
 80075cc:	e7d4      	b.n	8007578 <__ieee754_pow+0x980>
 80075ce:	491c      	ldr	r1, [pc, #112]	; (8007640 <__ieee754_pow+0xa48>)
 80075d0:	2000      	movs	r0, #0
 80075d2:	f7ff bb30 	b.w	8006c36 <__ieee754_pow+0x3e>
 80075d6:	2000      	movs	r0, #0
 80075d8:	2100      	movs	r1, #0
 80075da:	f7ff bb2c 	b.w	8006c36 <__ieee754_pow+0x3e>
 80075de:	4630      	mov	r0, r6
 80075e0:	4639      	mov	r1, r7
 80075e2:	f7ff bb28 	b.w	8006c36 <__ieee754_pow+0x3e>
 80075e6:	9204      	str	r2, [sp, #16]
 80075e8:	f7ff bb7a 	b.w	8006ce0 <__ieee754_pow+0xe8>
 80075ec:	2300      	movs	r3, #0
 80075ee:	f7ff bb64 	b.w	8006cba <__ieee754_pow+0xc2>
 80075f2:	bf00      	nop
 80075f4:	f3af 8000 	nop.w
 80075f8:	00000000 	.word	0x00000000
 80075fc:	3fe62e43 	.word	0x3fe62e43
 8007600:	fefa39ef 	.word	0xfefa39ef
 8007604:	3fe62e42 	.word	0x3fe62e42
 8007608:	0ca86c39 	.word	0x0ca86c39
 800760c:	be205c61 	.word	0xbe205c61
 8007610:	72bea4d0 	.word	0x72bea4d0
 8007614:	3e663769 	.word	0x3e663769
 8007618:	c5d26bf1 	.word	0xc5d26bf1
 800761c:	3ebbbd41 	.word	0x3ebbbd41
 8007620:	af25de2c 	.word	0xaf25de2c
 8007624:	3f11566a 	.word	0x3f11566a
 8007628:	16bebd93 	.word	0x16bebd93
 800762c:	3f66c16c 	.word	0x3f66c16c
 8007630:	5555553e 	.word	0x5555553e
 8007634:	3fc55555 	.word	0x3fc55555
 8007638:	3fe00000 	.word	0x3fe00000
 800763c:	000fffff 	.word	0x000fffff
 8007640:	3ff00000 	.word	0x3ff00000
 8007644:	4090cbff 	.word	0x4090cbff
 8007648:	3f6f3400 	.word	0x3f6f3400
 800764c:	652b82fe 	.word	0x652b82fe
 8007650:	3c971547 	.word	0x3c971547

08007654 <__ieee754_sqrt>:
 8007654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007658:	ec55 4b10 	vmov	r4, r5, d0
 800765c:	4e55      	ldr	r6, [pc, #340]	; (80077b4 <__ieee754_sqrt+0x160>)
 800765e:	43ae      	bics	r6, r5
 8007660:	ee10 0a10 	vmov	r0, s0
 8007664:	ee10 3a10 	vmov	r3, s0
 8007668:	462a      	mov	r2, r5
 800766a:	4629      	mov	r1, r5
 800766c:	d110      	bne.n	8007690 <__ieee754_sqrt+0x3c>
 800766e:	ee10 2a10 	vmov	r2, s0
 8007672:	462b      	mov	r3, r5
 8007674:	f7f8 ffd8 	bl	8000628 <__aeabi_dmul>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4620      	mov	r0, r4
 800767e:	4629      	mov	r1, r5
 8007680:	f7f8 fe1c 	bl	80002bc <__adddf3>
 8007684:	4604      	mov	r4, r0
 8007686:	460d      	mov	r5, r1
 8007688:	ec45 4b10 	vmov	d0, r4, r5
 800768c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007690:	2d00      	cmp	r5, #0
 8007692:	dc10      	bgt.n	80076b6 <__ieee754_sqrt+0x62>
 8007694:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007698:	4330      	orrs	r0, r6
 800769a:	d0f5      	beq.n	8007688 <__ieee754_sqrt+0x34>
 800769c:	b15d      	cbz	r5, 80076b6 <__ieee754_sqrt+0x62>
 800769e:	ee10 2a10 	vmov	r2, s0
 80076a2:	462b      	mov	r3, r5
 80076a4:	ee10 0a10 	vmov	r0, s0
 80076a8:	f7f8 fe06 	bl	80002b8 <__aeabi_dsub>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	f7f9 f8e4 	bl	800087c <__aeabi_ddiv>
 80076b4:	e7e6      	b.n	8007684 <__ieee754_sqrt+0x30>
 80076b6:	1512      	asrs	r2, r2, #20
 80076b8:	d074      	beq.n	80077a4 <__ieee754_sqrt+0x150>
 80076ba:	07d4      	lsls	r4, r2, #31
 80076bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80076c0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80076c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80076c8:	bf5e      	ittt	pl
 80076ca:	0fda      	lsrpl	r2, r3, #31
 80076cc:	005b      	lslpl	r3, r3, #1
 80076ce:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80076d2:	2400      	movs	r4, #0
 80076d4:	0fda      	lsrs	r2, r3, #31
 80076d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80076da:	107f      	asrs	r7, r7, #1
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	2516      	movs	r5, #22
 80076e0:	4620      	mov	r0, r4
 80076e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80076e6:	1886      	adds	r6, r0, r2
 80076e8:	428e      	cmp	r6, r1
 80076ea:	bfde      	ittt	le
 80076ec:	1b89      	suble	r1, r1, r6
 80076ee:	18b0      	addle	r0, r6, r2
 80076f0:	18a4      	addle	r4, r4, r2
 80076f2:	0049      	lsls	r1, r1, #1
 80076f4:	3d01      	subs	r5, #1
 80076f6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80076fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80076fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007702:	d1f0      	bne.n	80076e6 <__ieee754_sqrt+0x92>
 8007704:	462a      	mov	r2, r5
 8007706:	f04f 0e20 	mov.w	lr, #32
 800770a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800770e:	4281      	cmp	r1, r0
 8007710:	eb06 0c05 	add.w	ip, r6, r5
 8007714:	dc02      	bgt.n	800771c <__ieee754_sqrt+0xc8>
 8007716:	d113      	bne.n	8007740 <__ieee754_sqrt+0xec>
 8007718:	459c      	cmp	ip, r3
 800771a:	d811      	bhi.n	8007740 <__ieee754_sqrt+0xec>
 800771c:	f1bc 0f00 	cmp.w	ip, #0
 8007720:	eb0c 0506 	add.w	r5, ip, r6
 8007724:	da43      	bge.n	80077ae <__ieee754_sqrt+0x15a>
 8007726:	2d00      	cmp	r5, #0
 8007728:	db41      	blt.n	80077ae <__ieee754_sqrt+0x15a>
 800772a:	f100 0801 	add.w	r8, r0, #1
 800772e:	1a09      	subs	r1, r1, r0
 8007730:	459c      	cmp	ip, r3
 8007732:	bf88      	it	hi
 8007734:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8007738:	eba3 030c 	sub.w	r3, r3, ip
 800773c:	4432      	add	r2, r6
 800773e:	4640      	mov	r0, r8
 8007740:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007744:	f1be 0e01 	subs.w	lr, lr, #1
 8007748:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800774c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007750:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007754:	d1db      	bne.n	800770e <__ieee754_sqrt+0xba>
 8007756:	430b      	orrs	r3, r1
 8007758:	d006      	beq.n	8007768 <__ieee754_sqrt+0x114>
 800775a:	1c50      	adds	r0, r2, #1
 800775c:	bf13      	iteet	ne
 800775e:	3201      	addne	r2, #1
 8007760:	3401      	addeq	r4, #1
 8007762:	4672      	moveq	r2, lr
 8007764:	f022 0201 	bicne.w	r2, r2, #1
 8007768:	1063      	asrs	r3, r4, #1
 800776a:	0852      	lsrs	r2, r2, #1
 800776c:	07e1      	lsls	r1, r4, #31
 800776e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007772:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007776:	bf48      	it	mi
 8007778:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800777c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007780:	4614      	mov	r4, r2
 8007782:	e781      	b.n	8007688 <__ieee754_sqrt+0x34>
 8007784:	0ad9      	lsrs	r1, r3, #11
 8007786:	3815      	subs	r0, #21
 8007788:	055b      	lsls	r3, r3, #21
 800778a:	2900      	cmp	r1, #0
 800778c:	d0fa      	beq.n	8007784 <__ieee754_sqrt+0x130>
 800778e:	02cd      	lsls	r5, r1, #11
 8007790:	d50a      	bpl.n	80077a8 <__ieee754_sqrt+0x154>
 8007792:	f1c2 0420 	rsb	r4, r2, #32
 8007796:	fa23 f404 	lsr.w	r4, r3, r4
 800779a:	1e55      	subs	r5, r2, #1
 800779c:	4093      	lsls	r3, r2
 800779e:	4321      	orrs	r1, r4
 80077a0:	1b42      	subs	r2, r0, r5
 80077a2:	e78a      	b.n	80076ba <__ieee754_sqrt+0x66>
 80077a4:	4610      	mov	r0, r2
 80077a6:	e7f0      	b.n	800778a <__ieee754_sqrt+0x136>
 80077a8:	0049      	lsls	r1, r1, #1
 80077aa:	3201      	adds	r2, #1
 80077ac:	e7ef      	b.n	800778e <__ieee754_sqrt+0x13a>
 80077ae:	4680      	mov	r8, r0
 80077b0:	e7bd      	b.n	800772e <__ieee754_sqrt+0xda>
 80077b2:	bf00      	nop
 80077b4:	7ff00000 	.word	0x7ff00000

080077b8 <with_errno>:
 80077b8:	b570      	push	{r4, r5, r6, lr}
 80077ba:	4604      	mov	r4, r0
 80077bc:	460d      	mov	r5, r1
 80077be:	4616      	mov	r6, r2
 80077c0:	f7fe fd0a 	bl	80061d8 <__errno>
 80077c4:	4629      	mov	r1, r5
 80077c6:	6006      	str	r6, [r0, #0]
 80077c8:	4620      	mov	r0, r4
 80077ca:	bd70      	pop	{r4, r5, r6, pc}

080077cc <xflow>:
 80077cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077ce:	4614      	mov	r4, r2
 80077d0:	461d      	mov	r5, r3
 80077d2:	b108      	cbz	r0, 80077d8 <xflow+0xc>
 80077d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80077d8:	e9cd 2300 	strd	r2, r3, [sp]
 80077dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077e0:	4620      	mov	r0, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7f8 ff20 	bl	8000628 <__aeabi_dmul>
 80077e8:	2222      	movs	r2, #34	; 0x22
 80077ea:	b003      	add	sp, #12
 80077ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077f0:	f7ff bfe2 	b.w	80077b8 <with_errno>

080077f4 <__math_uflow>:
 80077f4:	b508      	push	{r3, lr}
 80077f6:	2200      	movs	r2, #0
 80077f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077fc:	f7ff ffe6 	bl	80077cc <xflow>
 8007800:	ec41 0b10 	vmov	d0, r0, r1
 8007804:	bd08      	pop	{r3, pc}

08007806 <__math_oflow>:
 8007806:	b508      	push	{r3, lr}
 8007808:	2200      	movs	r2, #0
 800780a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800780e:	f7ff ffdd 	bl	80077cc <xflow>
 8007812:	ec41 0b10 	vmov	d0, r0, r1
 8007816:	bd08      	pop	{r3, pc}

08007818 <fabs>:
 8007818:	ec51 0b10 	vmov	r0, r1, d0
 800781c:	ee10 2a10 	vmov	r2, s0
 8007820:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007824:	ec43 2b10 	vmov	d0, r2, r3
 8007828:	4770      	bx	lr

0800782a <finite>:
 800782a:	b082      	sub	sp, #8
 800782c:	ed8d 0b00 	vstr	d0, [sp]
 8007830:	9801      	ldr	r0, [sp, #4]
 8007832:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007836:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800783a:	0fc0      	lsrs	r0, r0, #31
 800783c:	b002      	add	sp, #8
 800783e:	4770      	bx	lr

08007840 <scalbn>:
 8007840:	b570      	push	{r4, r5, r6, lr}
 8007842:	ec55 4b10 	vmov	r4, r5, d0
 8007846:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800784a:	4606      	mov	r6, r0
 800784c:	462b      	mov	r3, r5
 800784e:	b99a      	cbnz	r2, 8007878 <scalbn+0x38>
 8007850:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007854:	4323      	orrs	r3, r4
 8007856:	d036      	beq.n	80078c6 <scalbn+0x86>
 8007858:	4b39      	ldr	r3, [pc, #228]	; (8007940 <scalbn+0x100>)
 800785a:	4629      	mov	r1, r5
 800785c:	ee10 0a10 	vmov	r0, s0
 8007860:	2200      	movs	r2, #0
 8007862:	f7f8 fee1 	bl	8000628 <__aeabi_dmul>
 8007866:	4b37      	ldr	r3, [pc, #220]	; (8007944 <scalbn+0x104>)
 8007868:	429e      	cmp	r6, r3
 800786a:	4604      	mov	r4, r0
 800786c:	460d      	mov	r5, r1
 800786e:	da10      	bge.n	8007892 <scalbn+0x52>
 8007870:	a32b      	add	r3, pc, #172	; (adr r3, 8007920 <scalbn+0xe0>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	e03a      	b.n	80078ee <scalbn+0xae>
 8007878:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800787c:	428a      	cmp	r2, r1
 800787e:	d10c      	bne.n	800789a <scalbn+0x5a>
 8007880:	ee10 2a10 	vmov	r2, s0
 8007884:	4620      	mov	r0, r4
 8007886:	4629      	mov	r1, r5
 8007888:	f7f8 fd18 	bl	80002bc <__adddf3>
 800788c:	4604      	mov	r4, r0
 800788e:	460d      	mov	r5, r1
 8007890:	e019      	b.n	80078c6 <scalbn+0x86>
 8007892:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007896:	460b      	mov	r3, r1
 8007898:	3a36      	subs	r2, #54	; 0x36
 800789a:	4432      	add	r2, r6
 800789c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80078a0:	428a      	cmp	r2, r1
 80078a2:	dd08      	ble.n	80078b6 <scalbn+0x76>
 80078a4:	2d00      	cmp	r5, #0
 80078a6:	a120      	add	r1, pc, #128	; (adr r1, 8007928 <scalbn+0xe8>)
 80078a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ac:	da1c      	bge.n	80078e8 <scalbn+0xa8>
 80078ae:	a120      	add	r1, pc, #128	; (adr r1, 8007930 <scalbn+0xf0>)
 80078b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078b4:	e018      	b.n	80078e8 <scalbn+0xa8>
 80078b6:	2a00      	cmp	r2, #0
 80078b8:	dd08      	ble.n	80078cc <scalbn+0x8c>
 80078ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80078be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80078c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80078c6:	ec45 4b10 	vmov	d0, r4, r5
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80078d0:	da19      	bge.n	8007906 <scalbn+0xc6>
 80078d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80078d6:	429e      	cmp	r6, r3
 80078d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80078dc:	dd0a      	ble.n	80078f4 <scalbn+0xb4>
 80078de:	a112      	add	r1, pc, #72	; (adr r1, 8007928 <scalbn+0xe8>)
 80078e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e2      	bne.n	80078ae <scalbn+0x6e>
 80078e8:	a30f      	add	r3, pc, #60	; (adr r3, 8007928 <scalbn+0xe8>)
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	f7f8 fe9b 	bl	8000628 <__aeabi_dmul>
 80078f2:	e7cb      	b.n	800788c <scalbn+0x4c>
 80078f4:	a10a      	add	r1, pc, #40	; (adr r1, 8007920 <scalbn+0xe0>)
 80078f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0b8      	beq.n	8007870 <scalbn+0x30>
 80078fe:	a10e      	add	r1, pc, #56	; (adr r1, 8007938 <scalbn+0xf8>)
 8007900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007904:	e7b4      	b.n	8007870 <scalbn+0x30>
 8007906:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800790a:	3236      	adds	r2, #54	; 0x36
 800790c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007910:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007914:	4620      	mov	r0, r4
 8007916:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <scalbn+0x108>)
 8007918:	2200      	movs	r2, #0
 800791a:	e7e8      	b.n	80078ee <scalbn+0xae>
 800791c:	f3af 8000 	nop.w
 8007920:	c2f8f359 	.word	0xc2f8f359
 8007924:	01a56e1f 	.word	0x01a56e1f
 8007928:	8800759c 	.word	0x8800759c
 800792c:	7e37e43c 	.word	0x7e37e43c
 8007930:	8800759c 	.word	0x8800759c
 8007934:	fe37e43c 	.word	0xfe37e43c
 8007938:	c2f8f359 	.word	0xc2f8f359
 800793c:	81a56e1f 	.word	0x81a56e1f
 8007940:	43500000 	.word	0x43500000
 8007944:	ffff3cb0 	.word	0xffff3cb0
 8007948:	3c900000 	.word	0x3c900000

0800794c <_init>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	bf00      	nop
 8007950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007952:	bc08      	pop	{r3}
 8007954:	469e      	mov	lr, r3
 8007956:	4770      	bx	lr

08007958 <_fini>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	bf00      	nop
 800795c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795e:	bc08      	pop	{r3}
 8007960:	469e      	mov	lr, r3
 8007962:	4770      	bx	lr
